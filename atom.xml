<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忆语</title>
  
  <subtitle>面朝大海 春暖花开</subtitle>
  <link href="https://blog.dyfnb.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.dyfnb.xyz/"/>
  <updated>2022-12-04T13:29:28.196Z</updated>
  <id>https://blog.dyfnb.xyz/</id>
  
  <author>
    <name>忆语</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nacos注册配置中心</title>
    <link href="https://blog.dyfnb.xyz/posts/e0850bda.html"/>
    <id>https://blog.dyfnb.xyz/posts/e0850bda.html</id>
    <published>2022-12-04T07:41:48.000Z</published>
    <updated>2022-12-04T13:29:28.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Nacos"><a href="#什么是-Nacos" class="headerlink" title="什么是 Nacos"></a>什么是 Nacos</h2><p><strong>Nacos</strong>：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。<a href="https://nacos.io/">Nacos</a>是阿里巴巴的产品，现在是<a href="https://spring.io/projects/spring-cloud">SpringCloud</a>中的一个组件。相比<a href="https://github.com/Netflix/eureka">Eureka</a>功能更加丰富，在国内受欢迎程度较高。</p><h2 id="安装-Nacos"><a href="#安装-Nacos" class="headerlink" title="安装 Nacos"></a>安装 Nacos</h2><h3 id="下载-Nacos"><a href="#下载-Nacos" class="headerlink" title="下载 Nacos"></a>下载 Nacos</h3><p>在 Nacos 的 GitHub 页面，提供有下载链接，可以下载编译好的 Nacos 服务端或者源代码：</p><p>GitHub 主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>GitHub 的 Release 下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204143728.png" alt="下载nacos"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>将这个包解压到任意非中文目录下，如图：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204143931.png" alt="nacos文件列表"></p><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul><h3 id="端口配置"><a href="#端口配置" class="headerlink" title="端口配置"></a>端口配置</h3><p>Nacos 的默认端口是 8848，如果你电脑上的其它进程占用了 8848 端口，请先尝试关闭该进程。</p><p><strong>如果无法关闭占用 8848 端口的进程</strong>，也可以进入 nacos 的 conf 目录，修改配置文件中的端口：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204144130.png" alt="nacos配置文件"></p><p>修改其中的内容：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204144247.png" alt="端口"><br><strong>注意</strong>：Nacos2.X 版本相比 1.X 新增了 gRPC 的通信方式，因此需要增加 2 个端口，新增端口是在配置的主端口(server.port)基础上，进行一定偏移量自动生成。</p><div class="table-container"><table><thead><tr><th style="text-align:center">端口</th><th style="text-align:center">偏移量</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">9848</td><td style="text-align:center">1000</td><td style="text-align:center">客户端 gRPC 请求服务端端口，用于客户端向服务端发起连接和请求</td></tr><tr><td style="text-align:center">9849</td><td style="text-align:center">1001</td><td style="text-align:center">服务端 gRPC 请求服务端端口，用于服务间同步等</td></tr></tbody></table></div><p>如果使用的是服务器部署 2.X 版本的 Nacos，除了需要开启 8848 端口外，还需要开启<span class='p blue'>9848</span>和<span class='p blue'>9848</span>两个端口</p><h2 id="数据源存储方式"><a href="#数据源存储方式" class="headerlink" title="数据源存储方式"></a>数据源存储方式</h2><p>nacos 默认存储在内存，也可以更换数据源将数据存储在 mysql 中<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221203174303.png" alt="nacos持久化"></p><h2 id="Nacos-的启动和关闭"><a href="#Nacos-的启动和关闭" class="headerlink" title="Nacos 的启动和关闭"></a>Nacos 的启动和关闭</h2><p>Linux/Unix/Mac<br>启动命令(standalone 代表着单机模式运行，非集群模式):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果您使用的是ubuntu系统，或者运行脚本报错提示符号找不到，可尝试如下运行：</span></span><br><span class="line"></span><br><span class="line">bash startup.sh -m standalone</span><br></pre></td></tr></table></figure><p>Linux/Unix/Mac 关闭命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh shutdown.sh</span><br></pre></td></tr></table></figure><p>docker 运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nacos -e MODE=standalone -p 8848:8848 -d nacos/nacos-server:v2.1.1</span><br></pre></td></tr></table></figure><p>Windows<br>启动命令(standalone 代表着单机模式运行，非集群模式):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure><p>Windows 关闭<br>双击 shutdown.cmd 运行文件或者运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown.cmd</span><br></pre></td></tr></table></figure><p>进入 nacos 主页:ip:8848/nacos/index.html</p><p>输入用户名：nacos，密码：nacos 即可登陆</p><h2 id="SpringCloud-版本适配"><a href="#SpringCloud-版本适配" class="headerlink" title="SpringCloud 版本适配"></a>SpringCloud 版本适配</h2><h3 id="毕业版本依赖关系"><a href="#毕业版本依赖关系" class="headerlink" title="毕业版本依赖关系"></a>毕业版本依赖关系</h3><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204150144.png" alt="版本适配"></p><h3 id="组件版本关系"><a href="#组件版本关系" class="headerlink" title="组件版本关系"></a>组件版本关系</h3><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204150314.png" alt="组件版本适配"></p><p>具体的版本适配关系可前往<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">GitHub</a>查看</p><h2 id="Nacos-注册中心"><a href="#Nacos-注册中心" class="headerlink" title="Nacos 注册中心"></a>Nacos 注册中心</h2><p>Nacos 注册中心：用来管理所有的微服务，解决微服务之间错综复杂的调用关系和难以维护的问题</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>在父工程中引入 spring-cloud-alibaba 版本管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-cloud-alibaba 版本管理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要将服务注册在 nacos 上的子工程中引入 nacos 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos 服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在项目中配置-nacos"><a href="#在项目中配置-nacos" class="headerlink" title="在项目中配置 nacos"></a>在项目中配置 nacos</h3><p>在配置文件中配置服务名称与 nacos 服务地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderService</span> <span class="comment"># order 服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">1.15</span><span class="number">.110</span><span class="number">.102</span><span class="string">:8848</span> <span class="comment"># nacos 服务地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span> <span class="comment"># nacos 用户名</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">public</span> <span class="comment"># 命名空间默认public</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">SH</span> <span class="comment"># 集群名称配置</span></span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>进入 nacos 服务列表页就可以看到已注册到 nacos 上的服务<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221204143147.png" alt="服务列表"><br><img src="https://blogcdn.dyfnb.xyz/img/post/20221204153331.png" alt="服务详情"></p><h3 id="服务调用和负载均衡"><a href="#服务调用和负载均衡" class="headerlink" title="服务调用和负载均衡"></a>服务调用和负载均衡</h3><p>我们要去 nacos 中拉取 stockService 服务的实例列表，并且实现负载均衡。不过这些动作不用我们去做，只需要添加一些注解即可。<br>在 orderService 的配置类中，给 RestTemplate 这个 Bean 添加一个@LoadBalanced 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span> <span class="comment">// 负载均衡注解</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改访问的 url 路径，用服务名代替 ip、端口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://stockService/stock/reduct/&quot;</span>, String.class,<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Nacos-负载均衡"><a href="#Nacos-负载均衡" class="headerlink" title="Nacos 负载均衡"></a>Nacos 负载均衡</h3><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此 Nacos 中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。<br>在 orderService 的 application.yml 文件中，添加负载均衡规则：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stockService:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># nacos负载均衡规则 优先调用本地集群的stockService服务，在本地集群中的多个服务采用随机规则进行负载均衡，当本地集群的stockService服务挂掉才调用其它集群的stockService服务（只在权重相同时有效）</span></span><br></pre></td></tr></table></figure><h3 id="权重配置"><a href="#权重配置" class="headerlink" title="权重配置"></a>权重配置</h3><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。<br>但默认情况下 NacosRule 是同集群内随机挑选，不会考虑机器的性能问题。<br>因此，Nacos 提供了权重配置来控制访问频率，权重越大则访问频率越高(权重配置早 0~1 之间)。</p><p>在 nacos 控制台，找到 user-service 的实例列表，点击编辑，即可修改权重：<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221204165038.png" alt="修改权重"><br>在弹出的编辑窗口，修改权重：<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221204165140.png" alt="修改权重" style="zoom:70%;" /><br><strong>注意</strong>：如果权重修改为 0，则该实例永远不会被访问</p><h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><p>Nacos 提供了 namespace 来实现环境隔离功能。</p><ul><li>nacos 中可以有多个 namespace</li><li>namespace 下可以有 group、service 等</li><li>不同 namespace 之间相互隔离，例如不同 namespace 的服务互相不可见</li></ul><h4 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h4><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204171354.png" alt="创建命名空间"></p><h4 id="配置服务的命名空间"><a href="#配置服务的命名空间" class="headerlink" title="配置服务的命名空间"></a>配置服务的命名空间</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">1.15</span><span class="number">.110</span><span class="number">.102</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="comment"># 命名空间，填ID</span></span><br></pre></td></tr></table></figure><h2 id="Nacos-配置中心"><a href="#Nacos-配置中心" class="headerlink" title="Nacos 配置中心"></a>Nacos 配置中心</h2><h3 id="新建配置"><a href="#新建配置" class="headerlink" title="新建配置"></a>新建配置</h3><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204174012.png" alt="新建配置"><br><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210714164856664.png" alt="新建配置"><br><strong>注意</strong>：项目的核心配置，需要热更新的配置才有放到 nacos 管理的必要。基本不会变更的一些配置还是保存在微服务本地比较好。</p><h3 id="服务拉取配置"><a href="#服务拉取配置" class="headerlink" title="服务拉取配置"></a>服务拉取配置</h3><p>微服务要拉取 nacos 中管理的配置，并且与本地的 application.yml 配置合并，才能完成项目启动。</p><p>但如果尚未读取 application.yml，又如何得知 nacos 地址呢？</p><p>因此 spring 引入了一种新的配置文件：bootstrap.yaml 文件，会在 application.yml 之前被读取，流程如下：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/L0iFYNF.png" alt="img"></p><h4 id="引入-nacos-config-依赖"><a href="#引入-nacos-config-依赖" class="headerlink" title="引入 nacos-config 依赖"></a>引入 nacos-config 依赖</h4><p>首先，在 user-service 服务中，引入 nacos-config 的客户端依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos配置管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加-bootstrap-yaml"><a href="#添加-bootstrap-yaml" class="headerlink" title="添加 bootstrap.yaml"></a>添加 bootstrap.yaml</h4><p>然后，在 orderService 中添加一个 bootstrap.yaml 文件，内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderService</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">1.15</span><span class="number">.110</span><span class="number">.102</span><span class="string">:8848</span> <span class="comment"># Nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br></pre></td></tr></table></figure><p>这里会根据 spring.cloud.nacos.server-addr 获取 nacos 地址，再根据</p><p><code>$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</code>作为文件 id，来读取配置。</p><h4 id="读取-nacos-配置"><a href="#读取-nacos-配置" class="headerlink" title="读取 nacos 配置"></a>读取 nacos 配置</h4><p>在 orderService 中的 OrderController 中添加业务逻辑，读取 pattern.dateformat 配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(Integer count)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h3><p><strong>配置热更新</strong>：修改 nacos 中的配置后，微服务中无需重启即可让配置生效，也就是<strong>配置热更新</strong>。</p><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>在@Value 注入的变量所在类上添加注解@RefreshScope：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(Integer count)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>使用@ConfigurationProperties 注解代替@Value 注解。</p><p>在 orderService 服务中，添加一个类，读取 patterrn.dateformat 属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Format</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDateformat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dateformat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDateformat</span><span class="params">(String dateformat)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dateformat = dateformat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ===============================================</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Format format;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(Integer count)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(format.getDateformat()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多环境配置共享"><a href="#多环境配置共享" class="headerlink" title="多环境配置共享"></a>多环境配置共享</h3><p>其实微服务启动时，会去 nacos 读取多个配置文件，例如：</p><ul><li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：orderService-dev.yaml</p></li><li><p><code>[spring.application.name].yaml</code>，例如：orderService.yaml</p></li></ul><p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享。<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221204201706.png" alt="多环境配置共享"></p><h4 id="配置共享的优先级"><a href="#配置共享的优先级" class="headerlink" title="配置共享的优先级"></a>配置共享的优先级</h4><p>当 nacos、服务本地同时出现相同属性时，优先级有高低之分：<br><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210714174623557.png" alt="配置共享的优先级"></p><h2 id="Nacos-集群部署"><a href="#Nacos-集群部署" class="headerlink" title="Nacos 集群部署"></a>Nacos 集群部署</h2><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><p>新建 nacos 数据库，而后导入 conf 目录下的 nacos-mysql.sql 文件<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221204204144.png" alt="执行sql"></p><h3 id="配置-nacos"><a href="#配置-nacos" class="headerlink" title="配置 nacos"></a>配置 nacos</h3><p>nacos 的 conf 目录，修改配置文件 cluster.conf.example，重命名为 cluster.conf：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204204225.png" alt="image-20210409212459292"></p><p>然后添加内容，配置集群中每一个节点的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ip:端口 --&gt;</span><br><span class="line">127.0.0.1:8845</span><br><span class="line">127.0.0.1.8846</span><br><span class="line">127.0.0.1.8847</span><br></pre></td></tr></table></figure><p>然后修改 application.properties 文件，添加数据库配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>将 nacos 文件夹复制三份，分别命名为：nacos1、nacos2、nacos3</p><p>然后分别修改三个文件夹中的 application.properties，</p><p>nacos1:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8845</span></span><br></pre></td></tr></table></figure><p>nacos2:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8846</span></span><br></pre></td></tr></table></figure><p>nacos3:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8847</span></span><br></pre></td></tr></table></figure><p>然后分别启动三个 nacos 节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">startup.cmd</span><br></pre></td></tr></table></figure><h2 id="Nacos-与-Eureka-的区别"><a href="#Nacos-与-Eureka-的区别" class="headerlink" title="Nacos 与 Eureka 的区别"></a>Nacos 与 Eureka 的区别</h2><p>Nacos 的服务实例分为两种类型：</p><ul><li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p></li><li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p></li></ul><p>配置一个服务实例为永久实例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 设置为非临时实例</span></span><br></pre></td></tr></table></figure><p>Nacos 和 Eureka 整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210714001728017.png" alt="image-20210714001728017"></p><ul><li><p>Nacos 与 eureka 的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos 与 Eureka 的区别</p><ul><li>Nacos 支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos 支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos 集群默认采用 AP 方式，当集群中存在非临时实例时，采用 CP 模式；Eureka 采用 AP 方式</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是-Nacos&quot;&gt;&lt;a href=&quot;#什么是-Nacos&quot; class=&quot;headerlink&quot; title=&quot;什么是 Nacos&quot;&gt;&lt;/a&gt;什么是 Nacos&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Nacos&lt;/strong&gt;：一个更易于构建云原生应用的动态服务发现</summary>
      
    
    
    
    <category term="笔记" scheme="https://blog.dyfnb.xyz/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="docker" scheme="https://blog.dyfnb.xyz/tags/docker/"/>
    
    <category term="linux" scheme="https://blog.dyfnb.xyz/tags/linux/"/>
    
    <category term="nacos" scheme="https://blog.dyfnb.xyz/tags/nacos/"/>
    
    <category term="java" scheme="https://blog.dyfnb.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习</title>
    <link href="https://blog.dyfnb.xyz/posts/6782be63.html"/>
    <id>https://blog.dyfnb.xyz/posts/6782be63.html</id>
    <published>2022-12-02T08:42:58.000Z</published>
    <updated>2022-12-03T11:01:09.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-docker"><a href="#什么是-docker" class="headerlink" title="什么是 docker"></a>什么是 docker</h3><p>Docker 是一个开源的应用容器引擎，是虚拟化的一种轻量级替代技术。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口，开销很低。docker 解决了服务器昂贵的问题，生产环境和测试环境不一致的问题。</p><h3 id="Docker-和虚拟机的区别"><a href="#Docker-和虚拟机的区别" class="headerlink" title="Docker 和虚拟机的区别"></a>Docker 和虚拟机的区别</h3><p>Docker 和虚拟机的差异：</p><ul><li>docker 是一个系统进程；虚拟机是在操作系统中的操作系统</li><li>docker 体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</li></ul><h3 id="安装和卸载"><a href="#安装和卸载" class="headerlink" title="安装和卸载"></a>安装和卸载</h3><p>卸载 docker，运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure><p>安装 docker，使用 <span class='p blue'>yum</span> 命令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><h4 id="什么是镜像"><a href="#什么是镜像" class="headerlink" title="什么是镜像"></a>什么是镜像</h4><p><strong>镜像：</strong>Docker 将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为<strong>镜像</strong>，镜像名称一般分两部分组成：[repository]:[tag]，没有指定 tag 时，默认是 latest，代表最新版本的镜像。</p><h4 id="镜像常用命令"><a href="#镜像常用命令" class="headerlink" title="镜像常用命令"></a>镜像常用命令</h4><p>1、拉取镜像，拉取镜像时先去镜像仓库搜索 nginx 镜像，比如<a href="https://hub.docker.com/">DockerHub</a>，根据查看到的镜像名称，拉取自己需要的镜像，命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [镜像名]:[版本号]</span><br></pre></td></tr></table></figure><p>2、查看拉取到的镜像，命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-a :列出本地所有的镜像（含历史映像层）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-q :只显示镜像ID。</span></span><br><span class="line">docker images [OPTIONS]</span><br></pre></td></tr></table></figure><p>3、导出镜像，命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker save -o [保存的目标文件名称] [镜像名称]</span></span><br><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure><p>4、从指定文件中加载镜像，命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker save -o [目标文件名称]</span></span><br><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure><p>5、删除镜像，命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f :强制删除该镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker rmi [OPTIONS] [镜像名称]</span></span><br><span class="line">docker rmi -f nginx:latest</span><br></pre></td></tr></table></figure><p>6、推送镜像，命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、重新tag本地镜像docker tag nginx:latest [私有仓库地址]/[名称]:[版本号]</span></span><br><span class="line">docker tag nginx:latest 192.168.150.101:8080/nginx:1.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、推送镜像，docker push [私有仓库地址]/[名称]:[版本号]</span></span><br><span class="line">docker push 192.168.150.101:8080/nginx:1.0</span><br></pre></td></tr></table></figure><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h4 id="什么是容器"><a href="#什么是容器" class="headerlink" title="什么是容器"></a>什么是容器</h4><p><strong>容器：</strong>镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是 Docker 会给容器进程做隔离，对外不可见。</p><h4 id="容器常用命令"><a href="#容器常用命令" class="headerlink" title="容器常用命令"></a>容器常用命令</h4><p>1、创建并运行一个容器，处于运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run \ # 创建并运行一个容器，处于运行状态</span><br><span class="line"> --name containerName \ # 给容器起一个名字</span><br><span class="line"> -p 80:80 \ # 将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</span><br><span class="line"> -d # 后台运行容器</span><br><span class="line"> nginx # 镜像名称</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、让一个运行的容器暂停</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pause</span><br></pre></td></tr></table></figure><p>3、让一个容器从暂停状态恢复运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker unpause</span><br></pre></td></tr></table></figure><p>4、停止一个运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop</span><br></pre></td></tr></table></figure><p>5、让一个停止的容器再次运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start</span><br></pre></td></tr></table></figure><p>6、删除一个容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f :强制删除该容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker <span class="built_in">rm</span> [OPTIONS] [容器名]</span></span><br><span class="line">docker rm -f mynginx</span><br></pre></td></tr></table></figure><p>7、查看容器运行日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f : 跟踪日志输出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t : 显示时间戳</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--<span class="built_in">tail</span> :仅列出最新N条容器日志</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--since：显示某个日期至今的所有日志</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker logs [OPTIONS] [容器名]</span></span><br><span class="line">docker logs -f mynginx</span><br></pre></td></tr></table></figure><p>8、进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker <span class="built_in">exec</span> ：进入容器内部，执行一个命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mn ：要进入的容器的名称</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bash：进入容器后执行的命令，bash是一个linux终端交互命令</span></span><br><span class="line">docker exec -it mn bash</span><br></pre></td></tr></table></figure><p>进入 html 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/nginx/html</span><br></pre></td></tr></table></figure><p>修改 index.html 文件<br>容器内没有 vi 命令，无法直接修改，我们用下面的命令来修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i -e &#x27;s#Welcome to nginx#Hello World#g&#x27; -e &#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27; index.html</span><br></pre></td></tr></table></figure><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><h4 id="什么是数据卷"><a href="#什么是数据卷" class="headerlink" title="什么是数据卷"></a>什么是数据卷</h4><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录。一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。这样，我们操作宿主机的/var/lib/docker/volumes/html 目录，就等于操作容器内的/usr/share/nginx/html 目录了</p><h4 id="数据卷常用命令"><a href="#数据卷常用命令" class="headerlink" title="数据卷常用命令"></a>数据卷常用命令</h4><p>1、创建一个 volume</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker volume create [数据卷名称]</span></span><br><span class="line">docker volume create html</span><br></pre></td></tr></table></figure><p>2、显示一个或多个 volume 的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker volume inspect [数据卷名称、数据卷名称...]</span></span><br><span class="line">docker volume inspect html</span><br></pre></td></tr></table></figure><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221202200957.png" alt="数据卷信息"><br>3、列出所有的 volume</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221202201701.png" alt=""><br>4、删除未使用的 volume</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure><p>5、删除一个或多个指定的 volume</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker volume <span class="built_in">rm</span> [数据卷名称、数据卷名称...]</span></span><br><span class="line">docker volume rm html</span><br></pre></td></tr></table></figure><p>6、使用<span class='p blue'>-v</span>参数挂载数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v volume名称:容器内目录</span></span><br><span class="line">docker run \</span><br><span class="line"> --name mn \</span><br><span class="line"> -v html:/usr/share/nginx/html \ # 挂载数据卷到容器内的HTML目录</span><br><span class="line"> -p 80:80 \</span><br><span class="line"> -d \</span><br><span class="line"> nginx</span><br></pre></td></tr></table></figure><p>进入 html 数据卷所在位置，并修改 HTML 内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看html数据卷的位置</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入该目录</span></span><br><span class="line">cd /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改文件</span></span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure><p>7、使用<span class='p blue'>-v</span>参数挂载本地目录<br>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p><ul><li>带数据卷模式：宿主机目录 —&gt; 数据卷 —-&gt; 容器内目录</li><li>直接挂载模式：宿主机目录 —-&gt; 容器内目录<br><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210731175155453.png" alt="image-20210731175155453"></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v [宿主机目录]:[容器内目录]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v [宿主机文件]:[容器内文件]</span></span><br><span class="line">docker run \</span><br><span class="line"> --name mysql \</span><br><span class="line"> -e MYSQL_ROOT_PASSWORD=123456 # -e 配置环境变量 设置MySQL密码</span><br><span class="line"> -p 3306:3306 \</span><br><span class="line"> -v /ee/data:/var/lib/mysql # 挂载/ee/data目录到数据库的数据目录上</span><br><span class="line"> -v /ee/conf/hmy.cnf:/etc/mysql/conf.d # 挂载/ee/conf/hmy.cnf文件挂载到数据库的/etc/mysql/conf.d目录上</span><br><span class="line"> -d \</span><br><span class="line"> mysql</span><br></pre></td></tr></table></figure><h3 id="Dockerfile-自定义镜像"><a href="#Dockerfile-自定义镜像" class="headerlink" title="Dockerfile 自定义镜像"></a>Dockerfile 自定义镜像</h3><h4 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h4><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><p>我们以 MySQL 为例，来看看镜像的组成结构：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210731175806273.png" alt="镜像结构"><br>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p><h4 id="Dockerfile-语法"><a href="#Dockerfile-语法" class="headerlink" title="Dockerfile 语法"></a>Dockerfile 语法</h4><p>1 什么是 Dockerfile<br>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。我们只需要告诉 Docker，我们的镜像的组成，需要哪些 BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来 Docker 会帮助我们构建镜像。而描述上述信息的文件就是 Dockerfile 文件。<br>Dockerfile 就是一个文本文件，其中包含一个个的指令(Instruction)，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层 Layer。<br><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210731180321133.png" alt="Dockerfile"><br>官网文档：<a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><p>2、创建<span class='p blue'>Dockerfile</span>文件，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定基础镜像</span></span><br><span class="line">FROM ubuntu:16.04</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置环境变量，JDK的安装目录</span></span><br><span class="line">ENV JAVA_DIR=/usr/local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝jdk和java项目的包</span></span><br><span class="line">COPY ./jdk8.tar.gz $JAVA_DIR/</span><br><span class="line">COPY ./docker-demo.jar /tmp/app.jar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装JDK</span></span><br><span class="line">RUN cd $JAVA_DIR \</span><br><span class="line"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span><br><span class="line"> &amp;&amp; mv ./jdk1.8.0_144 ./java8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置环境变量</span></span><br><span class="line">ENV JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line">ENV PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暴露端口</span></span><br><span class="line">EXPOSE 8090</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">入口，java项目的启动命令</span></span><br><span class="line">ENTRYPOINT java -jar /tmp/app.jar</span><br></pre></td></tr></table></figure><p>使用 Dockerfile 构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker build -t 镜像名:镜像tag  Dockerfile所在的目录</span></span><br><span class="line">docker build -t javaweb:1.0 . # . 就是Dockerfile所在的目录（当前目录）</span><br></pre></td></tr></table></figure><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h3><h4 id="什么是-Docker-Compose"><a href="#什么是-Docker-Compose" class="headerlink" title="什么是 Docker Compose"></a>什么是 Docker Compose</h4><p><strong>Docker Compose</strong>可以基于 Compose 文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！Docker Compose 可以基于 Compose 文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p><h4 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h4><p>命令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令安装下载速度较慢</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>上传文件安装：<br>将下载好的<span class='p blue'>dcoker-compose</span>文件上传到<span class='p blue'>/usr/local/bin/</span>目录下<br>修改文件权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改权限为可执行文件</span></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>Base 自动补全命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure><p>如果这里出现错误，需要修改自己的 hosts 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;199.232.68.133 raw.githubusercontent.com&quot; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h4 id="创建文件，部署微服务项目，输入："><a href="#创建文件，部署微服务项目，输入：" class="headerlink" title="创建文件，部署微服务项目，输入："></a>创建<span class='p blue'>docker-compose.yml</span>文件，部署微服务项目，输入：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.2&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  nacos: # nacos作为注册中心和配置中心</span><br><span class="line">    image: nacos/nacos-server # 基于nacos/nacos-server镜像构建</span><br><span class="line">    environment: # 环境变量</span><br><span class="line">      MODE: standalone # 单点模式启动</span><br><span class="line">    ports: # 端口映射，这里暴露了8848端口</span><br><span class="line">      - &quot;8848:8848&quot;</span><br><span class="line">  mysql: # 数据库</span><br><span class="line">    image: mysql:5.7.25 # 基于mysql:5.7.25镜像构建</span><br><span class="line">    environment: # 环境变量</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 123 # 设置数据库密码</span><br><span class="line">    volumes: # 数据卷挂载，这里挂载了mysql的data、conf目录</span><br><span class="line">      - &quot;$PWD/mysql/data:/var/lib/mysql&quot;</span><br><span class="line">      - &quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span><br><span class="line">  userservice: # 基于Dockerfile构建的userservice服务</span><br><span class="line">    build: ./user-service</span><br><span class="line">  orderservice: # 基于Dockerfile构建的orderservice服务</span><br><span class="line">    build: ./order-service</span><br><span class="line">  gateway: # 基于Dockerfile构建的gateway服务</span><br><span class="line">    build: ./gateway</span><br><span class="line">    ports: # 暴露10010端口</span><br><span class="line">      - &quot;10010:10010&quot;</span><br></pre></td></tr></table></figure><h4 id="docker-compos-常用命令"><a href="#docker-compos-常用命令" class="headerlink" title="docker-compos 常用命令"></a>docker-compos 常用命令</h4><p>启动并运行所有的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-d 在后台运行服务容器,一般推荐生产环境下使用该选项</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--no-color 不使用颜色来区分不同的服务的控制台输出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--no-deps 不启动服务所链接的容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--force-recreate 强制重新创建容器，不能与--no-recreate 同时使用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--no-recreate 如果容器已经存在了，则不重新创建，不能与 --force-recreate 同时使用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--no-build 不自动构建缺失的服务镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t, --<span class="built_in">timeout</span> TIMEOUT 停止容器时候的超时（默认为 10 秒）</span></span><br><span class="line">docker-compose up [OPTIONS]</span><br></pre></td></tr></table></figure><p>停止用 up 命令所启动的容器并移除网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><p>查看服务容器的日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f：跟踪日志</span></span><br><span class="line">docker-compose logs [OPTIONS] [SERVICE...]</span><br></pre></td></tr></table></figure><p>重启项目中的服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure><p>停止已经处于运行状态的容器，但不删除它，通过 docker-compose start 可以再次启动这些容器，如果不指定 service 则默认停止所有的容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t, --<span class="built_in">timeout</span> TIMEOUT 停止容器时候的超时（默认为 10 秒）</span></span><br><span class="line">docker-compose stop [OPTIONS] [SERVICE...]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是-docker&quot;&gt;&lt;a href=&quot;#什么是-docker&quot; class=&quot;headerlink&quot; title=&quot;什么是 docker&quot;&gt;&lt;/a&gt;什么是 docker&lt;/h3&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，是虚拟化的一种轻量级替代技术。Doc</summary>
      
    
    
    
    <category term="笔记" scheme="https://blog.dyfnb.xyz/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="docker" scheme="https://blog.dyfnb.xyz/tags/docker/"/>
    
    <category term="linux" scheme="https://blog.dyfnb.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>hexo添加PWA支持</title>
    <link href="https://blog.dyfnb.xyz/posts/df72f53f.html"/>
    <id>https://blog.dyfnb.xyz/posts/df72f53f.html</id>
    <published>2022-12-01T08:17:04.000Z</published>
    <updated>2022-12-01T10:49:15.987Z</updated>
    
    <content type="html"><![CDATA[<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：<div class="tag link"><a class="link-card" title="Butterfly 主题的 PWA 实现方案" href="https://akilar.top/posts/8f31c3d0/"><div class="left"><img src="https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg"/></div><div class="right"><p class="text">Butterfly 主题的 PWA 实现方案</p><p class="url">https://akilar.top/posts/8f31c3d0/</p></div></a></div></h4><h4 id="安装必要插件"><a href="#安装必要插件" class="headerlink" title="安装必要插件"></a>安装必要插件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gulp-cli # 全局安装gulp命令集</span><br><span class="line">npm install workbox-build gulp --save # 安装workbox和gulp插件</span><br><span class="line"></span><br><span class="line"># 压缩html插件</span><br><span class="line">npm install gulp-htmlclean --save-dev</span><br><span class="line">npm install --save gulp-htmlmin</span><br><span class="line"># 压缩css插件</span><br><span class="line">npm install gulp-clean-css --save-dev</span><br><span class="line"># 压缩js插件</span><br><span class="line"># 使用terser压缩js</span><br><span class="line">npm install gulp-terser --save-dev</span><br><span class="line">npm install --save-dev gulp-babel @babel/core @babel/preset-env</span><br><span class="line"># 压缩图片插件</span><br><span class="line">npm install --save-dev gulp-imagemin</span><br><span class="line"># 压缩字体插件(font-min仅支持压缩ttf格式的字体包)</span><br><span class="line">npm install gulp-fontmin --save-dev</span><br></pre></td></tr></table></figure><h4 id="在-中添加以下代码"><a href="#在-中添加以下代码" class="headerlink" title="在  中添加以下代码"></a>在 <span class='p blue'>package.json</span> 中添加以下代码</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h4 id="创建"><a href="#创建" class="headerlink" title="创建 "></a>创建 <span class='p blue'>gulpfile.js</span></h4><p>在根目录下创建 <span class='p blue'>gulpfile.js</span> 文件，打开 <span class='p blue'>[Blogroot]/gulpfile.js</span>，输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gulp <span class="keyword">from</span> <span class="string">&quot;gulp&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> cleanCSS <span class="keyword">from</span> <span class="string">&quot;gulp-clean-css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> htmlmin <span class="keyword">from</span> <span class="string">&quot;gulp-htmlmin&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> htmlclean <span class="keyword">from</span> <span class="string">&quot;gulp-htmlclean&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> workbox <span class="keyword">from</span> <span class="string">&quot;workbox-build&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> fontmin <span class="keyword">from</span> <span class="string">&quot;gulp-fontmin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若使用terser压缩js</span></span><br><span class="line"><span class="keyword">import</span> terser <span class="keyword">from</span> <span class="string">&quot;gulp-terser&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pwa</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;generate-service-worker&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> workbox.<span class="title function_">injectManifest</span>(&#123;</span><br><span class="line">    <span class="attr">swSrc</span>: <span class="string">&quot;./sw-template.js&quot;</span>,</span><br><span class="line">    <span class="attr">swDest</span>: <span class="string">&quot;./public/sw.js&quot;</span>,</span><br><span class="line">    <span class="attr">globDirectory</span>: <span class="string">&quot;./public&quot;</span>,</span><br><span class="line">    <span class="attr">globPatterns</span>: [</span><br><span class="line">      <span class="comment">// 缓存所有以下类型的文件，极端不推荐</span></span><br><span class="line">      <span class="comment">// &quot;**/*.&#123;html,css,js,json,woff2,xml&#125;&quot;</span></span><br><span class="line">      <span class="comment">// 推荐只缓存404，主页和主要样式和脚本。</span></span><br><span class="line">      <span class="string">&quot;404.html&quot;</span>,</span><br><span class="line">      <span class="string">&quot;index.html&quot;</span>,</span><br><span class="line">      <span class="string">&quot;js/main.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;css/index.css&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">modifyURLPrefix</span>: &#123;</span><br><span class="line">      <span class="string">&quot;&quot;</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// minify js - gulp-tester</span></span><br><span class="line"><span class="comment">// 若使用terser压缩js</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;compress&quot;</span>, <span class="function">() =&gt;</span></span><br><span class="line">  gulp</span><br><span class="line">    .<span class="title function_">src</span>([</span><br><span class="line">      <span class="string">&quot;./public/**/*.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;!./public/**/*.min.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;!./public/js/custom/galmenu.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;!./public/js/custom/gitcalendar.js&quot;</span>,</span><br><span class="line">    ])</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">terser</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public&quot;</span>))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;minify-css&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&quot;./public/**/*.css&quot;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">cleanCSS</span>(&#123;</span><br><span class="line">        <span class="attr">compatibility</span>: <span class="string">&quot;ie11&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录内 html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;minify-html&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&quot;./public/**/*.html&quot;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">//清除 HTML 註释</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">//压缩 HTML</span></span><br><span class="line">        <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除 &lt;script&gt; 的 type=&quot;text/javascript&quot;</span></span><br><span class="line">        <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除 &lt;style&gt; 和 &lt;link&gt; 的 type=&quot;text/css&quot;</span></span><br><span class="line">        <span class="attr">minifyJS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 JS</span></span><br><span class="line">        <span class="attr">minifyCSS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 CSS</span></span><br><span class="line">        <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩字体</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">minifyFont</span>(<span class="params">text, cb</span>) &#123;</span><br><span class="line">  gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&quot;./public/fonts/*.ttf&quot;</span>) <span class="comment">//原字体所在目录</span></span><br><span class="line">    .<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">fontmin</span>(&#123;</span><br><span class="line">        <span class="attr">text</span>: text,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public/fontsdest/&quot;</span>)) <span class="comment">//压缩后的输出目录</span></span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;mini-font&quot;</span>, <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> buffers = [];</span><br><span class="line">  gulp</span><br><span class="line">    .<span class="title function_">src</span>([<span class="string">&quot;./public/**/*.html&quot;</span>]) <span class="comment">//HTML文件所在目录请根据自身情况修改</span></span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="keyword">function</span> (<span class="params">file</span>) &#123;</span><br><span class="line">      buffers.<span class="title function_">push</span>(file.<span class="property">contents</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> text = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(buffers).<span class="title function_">toString</span>(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">      <span class="title function_">minifyFont</span>(text, cb);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(</span><br><span class="line">  <span class="string">&quot;default&quot;</span>,</span><br><span class="line">  gulp.<span class="title function_">series</span>(</span><br><span class="line">    <span class="string">&quot;generate-service-worker&quot;</span>,</span><br><span class="line">    gulp.<span class="title function_">parallel</span>(<span class="string">&quot;compress&quot;</span>, <span class="string">&quot;minify-html&quot;</span>, <span class="string">&quot;minify-css&quot;</span>, <span class="string">&quot;mini-font&quot;</span>)</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建 "></a>创建 <span class='p blue'>sw-template.js</span></h4><p>在根目录下创建一个<span class='p blue'>sw-template.js</span>文件,打开<span class='p blue'>[Blogroot]/sw-template.js</span>,输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处sw.js文件可自行去github上下载</span></span><br><span class="line">importScripts(</span><br><span class="line">  <span class="string">`https://storage.googleapis.com/workbox-cdn/releases/5.1.4/workbox-sw.js`</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">core</span>.<span class="title function_">setCacheNameDetails</span>(&#123;</span><br><span class="line">  <span class="attr">prefix</span>: <span class="string">&quot;忆语&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">core</span>.<span class="title function_">skipWaiting</span>();</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">core</span>.<span class="title function_">clientsClaim</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册成功后要立即缓存的资源列表</span></span><br><span class="line"><span class="comment">// 具体缓存列表在gulpfile.js中配置，见下文</span></span><br><span class="line">workbox.<span class="property">precaching</span>.<span class="title function_">precacheAndRoute</span>(self.<span class="property">__WB_MANIFEST</span>, &#123;</span><br><span class="line">  <span class="attr">directoryIndex</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空过期缓存</span></span><br><span class="line">workbox.<span class="property">precaching</span>.<span class="title function_">cleanupOutdatedCaches</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片资源（可选，不需要就注释掉）</span></span><br><span class="line"><span class="comment">// workbox.routing.registerRoute(</span></span><br><span class="line"><span class="comment">//   /\.(?:png|jpg|jpeg|gif|bmp|webp|svg|ico)$/,</span></span><br><span class="line"><span class="comment">//   new workbox.strategies.CacheFirst(&#123;</span></span><br><span class="line"><span class="comment">//     cacheName: &#x27;images&#x27;,</span></span><br><span class="line"><span class="comment">//     plugins: [</span></span><br><span class="line"><span class="comment">//       new workbox.expiration.ExpirationPlugin(&#123;</span></span><br><span class="line"><span class="comment">//         maxEntries: 1000,</span></span><br><span class="line"><span class="comment">//         maxAgeSeconds: 60 * 60 * 24 * 30,</span></span><br><span class="line"><span class="comment">//       &#125;),</span></span><br><span class="line"><span class="comment">//       new workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span></span><br><span class="line"><span class="comment">//         statuses: [0, 200],</span></span><br><span class="line"><span class="comment">//       &#125;),</span></span><br><span class="line"><span class="comment">//     ],</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字体文件（可选，不需要就注释掉）</span></span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">  <span class="regexp">/\.(?:eot|ttf|woff|woff2)$/</span>,</span><br><span class="line">  <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">CacheFirst</span>(&#123;</span><br><span class="line">    <span class="attr">cacheName</span>: <span class="string">&quot;fonts&quot;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> workbox.<span class="property">expiration</span>.<span class="title class_">ExpirationPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">maxEntries</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="attr">maxAgeSeconds</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> workbox.<span class="property">cacheableResponse</span>.<span class="title class_">CacheableResponsePlugin</span>(&#123;</span><br><span class="line">        <span class="attr">statuses</span>: [<span class="number">0</span>, <span class="number">200</span>],</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 谷歌字体（可选，不需要就注释掉）</span></span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">  <span class="regexp">/^https:\/\/fonts\.googleapis\.com/</span>,</span><br><span class="line">  <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">StaleWhileRevalidate</span>(&#123;</span><br><span class="line">    <span class="attr">cacheName</span>: <span class="string">&quot;google-fonts-stylesheets&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">  <span class="regexp">/^https:\/\/fonts\.gstatic\.com/</span>,</span><br><span class="line">  <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">CacheFirst</span>(&#123;</span><br><span class="line">    <span class="attr">cacheName</span>: <span class="string">&quot;google-fonts-webfonts&quot;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> workbox.<span class="property">expiration</span>.<span class="title class_">ExpirationPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">maxEntries</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="attr">maxAgeSeconds</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> workbox.<span class="property">cacheableResponse</span>.<span class="title class_">CacheableResponsePlugin</span>(&#123;</span><br><span class="line">        <span class="attr">statuses</span>: [<span class="number">0</span>, <span class="number">200</span>],</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsdelivr的CDN资源（可选，不需要就注释掉）</span></span><br><span class="line"><span class="comment">// workbox.routing.registerRoute(</span></span><br><span class="line"><span class="comment">//   /^https:\/\/cdn\.jsdelivr\.net/,</span></span><br><span class="line"><span class="comment">//   new workbox.strategies.CacheFirst(&#123;</span></span><br><span class="line"><span class="comment">//     cacheName: &#x27;static-libs&#x27;,</span></span><br><span class="line"><span class="comment">//     plugins: [</span></span><br><span class="line"><span class="comment">//       new workbox.expiration.ExpirationPlugin(&#123;</span></span><br><span class="line"><span class="comment">//         maxEntries: 1000,</span></span><br><span class="line"><span class="comment">//         maxAgeSeconds: 60 * 60 * 24 * 30,</span></span><br><span class="line"><span class="comment">//       &#125;),</span></span><br><span class="line"><span class="comment">//       new workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span></span><br><span class="line"><span class="comment">//         statuses: [0, 200],</span></span><br><span class="line"><span class="comment">//       &#125;),</span></span><br><span class="line"><span class="comment">//     ],</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"></span><br><span class="line">workbox.<span class="property">googleAnalytics</span>.<span class="title function_">initialize</span>();</span><br></pre></td></tr></table></figure><h4 id="创建-2"><a href="#创建-2" class="headerlink" title="创建"></a>创建<span class='p blue'>pwanotice.pug</span></h4><p>在<span class='p blue'>[Blogroot]\themes\butterfly\layout\includes\third-party\</span>目录下新建<span class='p blue'>pwanotice.pug</span>文件，打开<span class='p blue'>[Blogroot]\themes\butterfly\layout\includes\third-party\pwanotice.pug</span>,输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#app-refresh.<span class="property">app</span>-<span class="title function_">refresh</span>(style=<span class="string">&#x27;position: fixed;top: -2.2rem;left: 0;right: 0;z-index: 99999;padding: 0 1rem;font-size: 15px;height: 2.2rem;transition: all 0.3s ease;&#x27;</span>)</span><br><span class="line">  .<span class="property">app</span>-refresh-<span class="title function_">wrap</span>(style=<span class="string">&#x27; display: flex;color: #fff;height: 100%;align-items: center;justify-content: center;&#x27;</span>)</span><br><span class="line">    label ✨ 有新文章啦！ 👉</span><br><span class="line">    <span class="title function_">a</span>(href=<span class="string">&#x27;javascript:void(0)&#x27;</span> onclick=<span class="string">&#x27;location.reload()&#x27;</span>)</span><br><span class="line">      <span class="title function_">span</span>(style=<span class="string">&#x27;color: #fff;text-decoration: underline;cursor: pointer;&#x27;</span>) 🍗点击食用🍔</span><br><span class="line">script.</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.<span class="property">serviceWorker</span>.<span class="property">controller</span>) &#123;</span><br><span class="line">  navigator.<span class="property">serviceWorker</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;controllerchange&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">showNotification</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  navigator.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&#x27;/sw.js&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">showNotification</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> snackbarBg =</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;light&#x27;</span> ?</span><br><span class="line">  <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span>.<span class="property">bgLight</span> :</span><br><span class="line">  <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span>.<span class="property">bgDark</span></span><br><span class="line">  <span class="keyword">var</span> snackbarPos = <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span>.<span class="property">position</span></span><br><span class="line">  <span class="title class_">Snackbar</span>.<span class="title function_">show</span>(&#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&#x27;✨ 有新文章啦！ 👉&#x27;</span>,</span><br><span class="line">  <span class="attr">backgroundColor</span>: snackbarBg,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">500000</span>,</span><br><span class="line">  <span class="attr">pos</span>: snackbarPos,</span><br><span class="line">  <span class="attr">actionText</span>: <span class="string">&#x27;🍗点击食用🍔&#x27;</span>,</span><br><span class="line">  <span class="attr">actionTextColor</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">  <span class="attr">onActionClick</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  location.<span class="title function_">reload</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> showBg =</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;light&#x27;</span> ?</span><br><span class="line">  <span class="string">&#x27;#3b70fc&#x27;</span> :</span><br><span class="line">  <span class="string">&#x27;#1f1f1f&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> cssText = <span class="string">`top: 0; background: <span class="subst">$&#123;showBg&#125;</span>;`</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app-refresh&#x27;</span>).<span class="property">style</span>.<span class="property">cssText</span> = cssText</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改<span class='p blue'>additional-js.pug</span></h4><p>修改<span class='p blue'>[Blogroot]\themes\butterfly\layout\includes\additional-js.pug</span>,在文件底部添加以下内容，注意缩进。butterfly_v3.6.0 取消了缓存配置，转为完全默认，需要将<span class='p blue'>{cache:theme.fragment_cache}</span>改为<span class='p blue'>{cache: true}</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.<span class="property">pwa</span>.<span class="property">enable</span></span><br><span class="line">  !=<span class="title function_">partial</span>(<span class="string">&#x27;includes/third-party/pwanotice&#x27;</span>, &#123;&#125;, &#123;<span class="attr">cache</span>: <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="将图标包移入相应的目录"><a href="#将图标包移入相应的目录" class="headerlink" title="将图标包移入相应的目录"></a>将图标包移入相应的目录</h4><p>例如我是<span class='p blue'>/img/siteicon/</span>，所以放到<span class='p blue'>[Blogroot]/source/img/siteicon/</span>目录下。</p><h4 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建<span class='p blue'>manifest.json</span>文件</h4><p>在 <span class='p blue'>[Blogroot]/source</span>目录下新建<span class='p blue'>manifest.json</span>文件，此时还不能直接用，需要添加一些内容，以下是我的<span class='p blue'>manifest.json</span>配置内容，权且作为参考，其中的 <span class='p blue'>theme_color</span> 建议用取色器取设计的图标的主色调，同时务必配置 <span class='p blue'>start_url</span> 和 <span class='p blue'>name</span> 的配置项，这关系到你之后能否看到浏览器的应用安装按钮。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;忆语&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;忆语&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;theme_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#3b70fc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;background_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#3b70fc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standalone&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/16.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;16x16&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/32.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;32x32&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/48.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;48x48&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/64.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;64x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/128.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;128x128&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/144.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;144x144&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/512.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;512x512&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;splash_pages&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h4><p>打开主题配置文件<span class='p blue'>[Blogroot]/_config.butterfly.yml</span>,找到 PWA 配置项。添加图标路径。这里的 <span class='p blue'>theme_color</span> 建议改成你图标的主色调，包括 <span class='p blue'>manifest.json</span> 中的 <span class='p blue'>theme_color</span> 也是如此。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pwa:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">manifest:</span> <span class="string">/manifest.json</span></span><br><span class="line">  <span class="attr">theme_color:</span> <span class="string">&quot;#3b70fc&quot;</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/img/siteicon/128.png</span></span><br><span class="line">  <span class="attr">favicon_32_32:</span> <span class="string">/img/siteicon/32.png</span></span><br><span class="line">  <span class="attr">favicon_16_16:</span> <span class="string">/img/siteicon/16.png</span></span><br><span class="line">  <span class="attr">mask_icon:</span> <span class="string">/img/siteicon/128.png</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;参考：&quot;&gt;&lt;a href=&quot;#参考：&quot; class=&quot;headerlink&quot; title=&quot;参考：&quot;&gt;&lt;/a&gt;参考：&lt;div class=&quot;tag link&quot;&gt;&lt;a class=&quot;link-card&quot; title=&quot;Butterfly 主题的 PWA 实现方案&quot; </summary>
      
    
    
    
    <category term="前端" scheme="https://blog.dyfnb.xyz/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="hexo" scheme="https://blog.dyfnb.xyz/tags/hexo/"/>
    
    <category term="Butterfly" scheme="https://blog.dyfnb.xyz/tags/Butterfly/"/>
    
    <category term="pwa" scheme="https://blog.dyfnb.xyz/tags/pwa/"/>
    
  </entry>
  
</feed>
