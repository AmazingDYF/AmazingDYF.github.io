<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忆语</title>
  
  <subtitle>面朝大海 春暖花开</subtitle>
  <link href="https://blog.dyfnb.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.dyfnb.xyz/"/>
  <updated>2023-03-02T13:29:59.042Z</updated>
  <id>https://blog.dyfnb.xyz/</id>
  
  <author>
    <name>忆语</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA面试题</title>
    <link href="https://blog.dyfnb.xyz/posts/761fcbb2.html"/>
    <id>https://blog.dyfnb.xyz/posts/761fcbb2.html</id>
    <published>2023-02-27T07:19:33.000Z</published>
    <updated>2023-03-02T13:29:59.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA-基础"><a href="#JAVA-基础" class="headerlink" title="JAVA 基础"></a>JAVA 基础</h1><h2 id="JDK、JRE、JVM-的区别"><a href="#JDK、JRE、JVM-的区别" class="headerlink" title="JDK、JRE、JVM 的区别"></a>JDK、JRE、JVM 的区别</h2><p><strong>JDK</strong>（Java Development Kit）是整个 Java 的核心，是 java 开发工具包，包括了 Java 运行环境 JRE、Java 工具和 Java 基础类库。<br><strong>JRE</strong>（Java Runtime Environment）是运行 JAVA 程序所必须的环境的集合，包含 java 虚拟机和 java 程序的一些核心类库。<br><strong>JVM</strong> 是 Java Virtual Machine（Java 虚拟机）的缩写，是整个 java 实现跨平台的最核心的部分，能够运行以 Java 语言写作的软件程序。</p><h2 id="jdk1-8-的新特性"><a href="#jdk1-8-的新特性" class="headerlink" title="jdk1.8 的新特性"></a>jdk1.8 的新特性</h2><ol><li><p>Lambda 表达式</p><p>Lambda 允许把函数作为一个方法的参数。</p></li><li><p>方法引用</p><p>方法引用允许直接引用已有 Java 类或对象的方法或构造方法。</p><p>上例中我们将 System.out::println 方法作为静态方法来引用。</p></li><li><p>函数式接口</p><p>有且仅有一个抽象方法的接口叫做函数式接口，函数式接口可以被隐式转换为 Lambda 表达式。通常函数式接口上会添加@FunctionalInterface 注解。</p></li><li><p>接口允许定义默认方法和静态方法</p><p>从 JDK8 开始，允许接口中存在一个或多个默认非抽象方法和静态方法。</p></li><li><p>Stream API</p><p>新添加的 Stream API（java.util.stream）把真正的函数式编程风格引入到 Java 中。这种风格将要处理的元素集<br>可看作一种流，流在管道中传输，并且可以在管道的节点上进行处理，比如筛选， 排序，聚合等。</p></li><li><p>日期/时间类改进</p><p>之前的 JDK 自带的日期处理类非常不方便，我们处理的时候经常是使用的第三方工具包，比如 commons-lang 包等。<br>不过 JDK8 出现之后这个改观了很多，比如日期时间的创建、比较、调整、格式化、时间间隔等。这些类都在 java.time 包下，LocalDate/LocalTime/LocalDateTime。</p></li><li><p>Optional 类</p><p>Optional 类是一个可以为 null 的容器对象。<br>如果值存在则 isPresent()方法会返回 true，调用 get()方法会返回该对象。</p></li><li><p>Java8 Base64 实 现</p><p>Java 8 内置了 Base64 编码的编码器和解码器。</p></li></ol><h2 id="面向对象和面向过程的区别"><a href="#面向对象和面向过程的区别" class="headerlink" title="面向对象和面向过程的区别"></a>面向对象和面向过程的区别</h2><p><strong>面向过程</strong>：</p><ul><li>优点：<br>性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源；比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发，性能是最重要的因素。</li><li>缺点：<br>没有面向对象易维护、易复用、易扩展</li></ul><p><strong>面向对象</strong>：</p><ul><li>优点：<br>易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护</li><li>缺点：<br>性能比面向过程低</li></ul><p>面向对象的特征主要有以下几个方面：<br><strong>抽象</strong>：抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。</p><h3 id="其中-Java-面向对象编程三大特性：封装-继承-多态"><a href="#其中-Java-面向对象编程三大特性：封装-继承-多态" class="headerlink" title="其中 Java 面向对象编程三大特性：封装 继承 多态"></a>其中 Java 面向对象编程三大特性：封装 继承 多态</h3><p><strong>封装</strong>：封装是把一个对象的属性私有化，隐藏内部的实现细节，同时提供一些可以被外界访问属性的方法。通过封装可以使程序便于使用，提高复用性和安全性<br><strong>继承</strong>：继承是使用已存在的类的定义作为基础，建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过继承可以提高代码复用性。继承是多态的前提。<br>关于继承如下 3 点请记住</p><ul><li>子类拥有父类非 private 的属性和方法。</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。</li></ul><p><strong>多态性</strong>：父类或接口定义的引用变量可以指向子类或具体实现类的实例对象。多态提高了程序的扩展性。一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在程序运行期间才能决定。</p><p>Java 实现多态有三个必要条件：继承、重写、向上转型。</p><ul><li>继承：在多态中必须存在有继承关系的子类和父类。</li><li>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。</li><li>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备调用父类和子类的方法的技能。</li></ul><p>只有满足了上述三个条件，我们才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而达到执行不同的行为。</p><h2 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h2><p><strong>重载</strong>：发生在同一个类中，方法名必须相同，参数类型不同.个数不同.顺序不同， 方法返回<br>值和访问修饰符可以不同，发生在编译时。<br><strong>重写</strong>：发生在父子类中，方法名.参数列表必须相同，返回值范围小于等于父类， 抛出的异<br>常范围小于等于父类，<br>访问修饰符范围大于等于父类；如果父类方法访问修饰符为 private 则子类就不能重写该方法。</p><h2 id="static-的用法"><a href="#static-的用法" class="headerlink" title="static 的用法"></a>static 的用法</h2><p>static 能够修饰方法，代码块，变量</p><ol><li>static 修饰方法时</li></ol><ul><li>static 修饰的方法不能够被重写，static 修饰的方法完全摆脱了类对象的约束，因为他是随着.class 的加载而加载的，存储在内存的代码区。</li><li>static 修饰的方法中不能够使用 this 关键字，因为 this 关键字是调用当前方法的类对象的，静态成员方法加载的时候，当前类对象还没有创建</li><li>static 修饰的方法中不能够使用非静态的方法和变量</li><li>static 修饰的方法能够通过类名.方法名字类调用，也可以通过对象名.方法名来调用。</li><li>static 修饰的静态方法和实例方法的区别就是最后两条。</li></ul><ol><li>static 修饰代码块</li></ol><ul><li>static 修饰的代码块是静态代码块，静态代码块一般是用来加载配置的，其在类加载前就已经加载了，并且只会执行一次，如果有多个静态代码块，会按照先后顺序进行。<br>静态代码块优先于构造代码块执行。</li></ul><ol><li>static 修饰变量</li></ol><ul><li>static 修饰的变量使用的时候通过类名.变量名</li><li>static 修饰的变量只能够被静态的方法调用，非静态的不能够调用</li><li>static 修饰的变量和类对象无关，因为 static 修饰的变量在类加载之前就已经加载了，存放在内存的数据区。</li><li>static 修饰的变量，如果其所在的当前类对象全部销毁，依然可以通过类名.变量名来调用。</li></ul><h2 id="Java-数据类型"><a href="#Java-数据类型" class="headerlink" title="Java 数据类型"></a>Java 数据类型</h2><p>定义：Java 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。</p><p>分类</p><ul><li><strong>基本数据类型</strong>:byte,short,int,long,float,double,char,boolean</li><li><strong>引用数据类型</strong>: 类(class),接口(interface),数组([])</li></ul><p><strong>Java 基本数据类型图</strong><br><img src="https://blogcdn.dyfnb.xyz/img/post/20230228165606.png" alt="Java 基本数据类型图"></p><h2 id="Java-中-和-equals-的区别"><a href="#Java-中-和-equals-的区别" class="headerlink" title="Java 中==和 equals 的区别"></a>Java 中==和 equals 的区别</h2><p><strong>== 的作用</strong>：<br>基本类型：比较的就是值是否相同<br>引用类型：比较的就是地址值是否相同<br><strong>equals 的作用</strong>:<br>引用类型：默认情况下，比较的是地址值。<br>特：String、Integer、Date 这些类库中 equals 被重写，比较的是内容而不是地址！</p><p><strong>面试题：请解释字符串比较之中 “ == ” 和 equals() 的区别？</strong></p><p>答： ==：比较的是两个字符串内存地址（堆内存）的数值是否相等，属于数值比较； equals()：比较的是两个字符串的内容，属于内容比较。</p><h2 id="hashCode-与-equals"><a href="#hashCode-与-equals" class="headerlink" title="hashCode 与 equals"></a>hashCode 与 equals</h2><h3 id="hashCode-介绍"><a href="#hashCode-介绍" class="headerlink" title="hashCode()介绍"></a>hashCode()介绍</h3><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 类型的整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在 JDK 的 Object 类中，这就意味着 Java 中的任何类都包含有 hashCode()函数。</p><p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p><h3 id="为什么要有-hashCode"><a href="#为什么要有-hashCode" class="headerlink" title="为什么要有 hashCode"></a>为什么要有 hashCode</h3><p>我们以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode：<br>当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相同的 hashcode，HashSet 会假设对象没有重复出现。</p><p>但是如果发现有相同 hashcode 值的对象，这时会调用 equals()方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。</p><p><strong>先进行 hashcode 比较，后进行 equals 方法比较的目的</strong>：<br>可以大大减少了 equals 方法比较的次数，相应就大大提高了执行速度。</p><p>hashCode()与 equals()的相关规定</p><ul><li>如果两个对象相等，则 hashcode 一定也是相同的</li><li>两个对象相等，对两个对象分别调用 equals 方法都返回 true</li><li>两个对象有相同的 hashcode 值，它们不一定是相等的</li></ul><p>因此，当重写 equals 方法后有必要将 hashCode 方法也重写，这样做才能保证不违背 hashCode 方法中“相同对象必须有相同哈希值”的约定。</p><h3 id="String-的创建机理是什么？什么是字符串常量池？"><a href="#String-的创建机理是什么？什么是字符串常量池？" class="headerlink" title="String 的创建机理是什么？什么是字符串常量池？"></a>String 的创建机理是什么？什么是字符串常量池？</h3><p>创建机理：由于 String 在 Java 世界中使用过于频繁，为了提高内存的使用率，避免开辟多块空间存储相同的字符串，引入了字符串常量池（字符串常量池位于堆内存中）。</p><p>其运行机制是：在创建字符串时 JVM 会首先检查字符串常量池，如果该字符串已经存在池中，则返回它的引用，如果不存在，则实例化一个字符串放到池中，并返回其引用。</p><h2 id="String、StringBuffer、StringBuilder"><a href="#String、StringBuffer、StringBuilder" class="headerlink" title="String、StringBuffer、StringBuilder"></a>String、StringBuffer、StringBuilder</h2><p><strong>String 字符串常量</strong></p><p><strong>StringBuffer 字符串变量（线程安全）</strong></p><p><strong>StringBuilder 字符串变量（非线程安全）</strong></p><p>String 中的 String 类中使用 final 关键字修<br>饰字符数组来保存字符串，private final char value[] ，String 对象是不可变的，也就可以理解为常量，线程安全。</p><p>AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。</p><p>StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。</p><p>StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。</p><p>小结：</p><p>（1） 如果要操作少量的数据用 String；<br>（2） 多线程操作字符串缓冲区下操作大量数据用 StringBuffer；<br>（3） 单线程操作字符串缓冲区下操作大量数据用 StringBuilder。</p><h2 id="成员变量与局部变量"><a href="#成员变量与局部变量" class="headerlink" title="成员变量与局部变量"></a>成员变量与局部变量</h2><p>变量：在程序执行的过程中，其值可以在某个范围内发生改变的量。从本质上讲，变量其实是内存中的一小块区域</p><p>各变量联系与区别</p><ul><li><strong>成员变量</strong>：作用范围是整个类，相当于 C 中的全局变量，定义在方法体和语句块之外，一般定义在类的声明之下；成员变量包括实例变量和静态变量(类变量)；</li><li><strong>实例变量</strong>：独立于与方法之外的变量，无 static 修饰，声明在一个类中，但在方法、构造方法和语句块之外，数值型变量默认值为 0，布尔型默认值为 false，引用类型默认值为 null；</li><li><strong>静态变量</strong>(类变量)：独立于方法之外的变量，用 static 修饰，默认值与实例变量相似，一个类中只有一份，属于对象共有，存储在静态存储区，经常被声明为常量，调用一般是类名.静态变量名，也可以用对象名.静态变量名调用；</li><li><strong>局部变量</strong>：类的方法中的变量，访问修饰符不能用于局部变量，声明在方法、构造方法或语句块中，在栈上分配，无默认值，必须初始化后才能使用；</li></ul><p>成员变量和局部变量的区别</p><div class="table-container"><table><thead><tr><th></th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>作用域</td><td>作用范围是整个类</td><td>在方法或者语句块内有效</td></tr><tr><td>存储位置和生命周期</td><td>随着对象的创建而存在，随着对象的消失而消失，存储在堆内存中</td><td>在方法被调用的时候存在，方法调用完会自动释放，存储在栈内存中</td></tr><tr><td>初始值</td><td>有默认初始值</td><td>没有默认初始值，使用前必须赋值</td></tr><tr><td>使用原则</td><td>就近原则，首先在局部位置找，有就使用；接着在成员位置找</td></tr></tbody></table></div><h2 id="访问修饰符的区别"><a href="#访问修饰符的区别" class="headerlink" title="访问修饰符的区别"></a>访问修饰符的区别</h2><p>定义：Java 中可以使用访问修饰符来保护对类、变量、方法的访问。Java 支持 4 种不同的访问权限<br>分类</p><ul><li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。注意：不能修饰类（外部类）</li><li><strong>default</strong> (即缺省，什么也不写，不使用任何关键字）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。注意：不能修饰类（外部类）。</li><li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li></ul><h2 id="final-finally-finalize-区别"><a href="#final-finally-finalize-区别" class="headerlink" title="final finally finalize 区别"></a>final finally finalize 区别</h2><p><strong>final</strong>是一个修饰符关键字，可以修饰类、方法、变量，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。<br><strong>finally</strong>是一个异常处理的关键字，一般作用在 try-catch-finally 代码块中，在处理异常的时候，通常我们将一定要执行的代码放在 finally 代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。<br><strong>finalize</strong>是属于 Object 类的一个方法，该方法一般由垃圾回收器来调用，它的设计目的是保证对象在被垃圾收集前完成特定资源的回收。finalize 机制现在已经不推荐使用，并且在 JDK 9 被标记为 deprecated。</p><h2 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h2><p><strong>抽象类</strong>是用来捕捉子类的通用特性的，实现代码重用。<br><strong>接口</strong>是抽象方法的集合，利用接口可以达到 API 定义和实现分离的目的，提供程序的扩展性和可维护性。</p><p>从设计层面来说，抽象类是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。</p><p>相同点</p><ul><li>接口和抽象类都不能实例化</li><li>都位于继承的顶端，用于被其他类实现或继承</li><li>都包含抽象方法，其子类都必须重写这些抽象方法</li></ul><p>不同点</p><div class="table-container"><table><thead><tr><th>参数</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>声明</td><td>抽象类使用 abstract 关键字声明</td><td>接口使用 interface 关键字声明</td></tr><tr><td>实现</td><td>子类使用 extends 关键字来继承抽象类。如果一个类继承了抽象类，那么该子类必须实现抽象类的所有抽象方法。</td><td>子类使用 implements 关键字来实现接口。如果一个类实现了接口，那么该子类必须实现父接口的所有方法。</td></tr><tr><td>构造器</td><td>抽象类可以有构造器</td><td>接口不能有构造器</td></tr><tr><td>访问修饰符</td><td>抽象类中的方法可以是任意访问修饰符</td><td>接口方法默认修饰符是 public。并且不允许定义为 private 或者 protected</td></tr><tr><td>字段声明</td><td>抽象类的字段声明可以是任意的</td><td>接口的字段默认都是 static 和 final 的</td></tr><tr><td>多继承</td><td>一个类最多只能继承一个抽象类</td><td>一个类可以实现多个接口</td></tr></tbody></table></div><p>备注：Java8 中接口中引入默认方法和静态方法，以此来减少抽象类和接口之间的差异。现在，我们可以为接口提供默认实现的方法了，并且不用强制子类来实现它。</p><p>接口和抽象类各有优缺点，在接口和抽象类的选择上，必须遵守下面的几个原则：</p><ul><li>抽象类用来定义某个领域的固有属性，即抽象类表示它是什么，接口用来定义某个领域的扩展功能，即 接口表示它能做什么。</li><li>当需要为子类提供公共的实现代码时，应优先考虑抽象类。因为抽象类中的非抽象方法可以被子类继承，使 实现功能的代码更简洁。</li><li>当注重代码的扩展性和可维护性时，应当优先采用接口。① 接口与实现类之间可以不存在任何层次关系，接口可以实现毫不相关类的行为，比抽象类的使用更加方便灵活；② 接口只关心对象之间的交互方法，而不关心对象所对应的具体类。接口是程序之间的一个协议，比抽象类的使用更安全、清晰。一般使用接口的情况更多。</li></ul><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="什么是反射机制？"><a href="#什么是反射机制？" class="headerlink" title="什么是反射机制？"></a>什么是反射机制？</h3><p>JAVA 反射机制是在程序运行过程中，对于任意一个类或对象，都能够知道这个类或对象的所有属性和方法，这种动态获取信息以及动态调用对象方法的功能称为 java 语言的反射机制。</p><p>静态编译和动态编译</p><ul><li>静态编译：在编译时确定类型，绑定对象</li><li>动态编译：在运行时确定类型，绑定对象</li></ul><h3 id="反射机制优缺点"><a href="#反射机制优缺点" class="headerlink" title="反射机制优缺点"></a>反射机制优缺点</h3><ul><li>优点 ：运行期类型的判断，动态加载类，提高代码的灵活性。</li><li>缺点：性能瓶颈：反射相当于一系列解释操作，通知 JVM 要做的事情，性能比直接的 java 代码要慢很多。</li></ul><h3 id="反射为什么慢"><a href="#反射为什么慢" class="headerlink" title="反射为什么慢"></a>反射为什么慢</h3><ul><li>反射调用过程中会产生大量的临时对象，这些对象会占用内存，可能会导致频繁 gc，从而影响性能。</li><li>反射调用方法时会从方法数组中遍历查找，并且检查可见性等操作会比较耗时。</li><li>反射在达到一定次数时，会动态编写字节码并加载到内存中，这个字节码没有经过编译器优化，也不能享受 JIT 优化。</li><li>反射一般会涉及自动装箱/拆箱和类型转换，都会带来一定的资源开销。</li></ul><h3 id="反射机制的应用场景有哪些？"><a href="#反射机制的应用场景有哪些？" class="headerlink" title="反射机制的应用场景有哪些？"></a>反射机制的应用场景有哪些？</h3><p>反射是框架设计的灵魂。</p><p>在我们平时的项目开发过程中，基本上很少会直接使用到反射机制，但这不能说明反射机制没有用，实际上有很多设计、开发都与反射机制有关，例如模块化的开发，通过反射去调用对应的字节码；动态代理设计模式也采用了反射机制，还有我们日常使用的 Spring／Hibernate 等框架也大量使用到了反射机制。</p><p>举例：① 我们在使用 JDBC 连接数据库时使用 Class.forName()通过反射加载数据库的驱动程序；②Spring 框架也用到很多反射机制，最经典的就是 xml 的配置模式。Spring 通过 XML 配置模式装载 Bean 的过程：1) 将程序内所有 XML 或 Properties 配置文件加载入内存中; 2)Java 类里面解析 xml 或 properties 里面的内容，得到对应实体类的字节码字符串以及相关的属性信息; 3)使用反射机制，根据这个字符串获得某个类的 Class 实例; 4)动态配置实例的属性</p><h2 id="IO-流"><a href="#IO-流" class="headerlink" title="IO 流"></a>IO 流</h2><p>1、java 中 IO 流分为几种?</p><ul><li>按照流的流向分，可以分为输入流和输出流；</li><li>按照操作单元划分，可以分为字节流和字符流；</li><li>按照流的角色划分，可以分为节点流和处理流。</li></ul><p>Java IO 流共涉及 40 多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java IO 流的 40 多个类大部分都是从如下 4 个抽象类基类中派生出来的。</p><ul><li>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><h3 id="字节流和字符流的区别"><a href="#字节流和字符流的区别" class="headerlink" title="字节流和字符流的区别"></a>字节流和字符流的区别</h3><p>字节流的输入输出是以字节的形式操作，字节流按 8 位进行传输，字节流是直接操作文件</p><p>字符流的输入输出是以字符的形式操作，字符流按 16 位进行传输，字符流是操作缓存区，不操作文件。</p><h3 id="BIO-NIO-AIO-有什么区别"><a href="#BIO-NIO-AIO-有什么区别" class="headerlink" title="BIO,NIO,AIO 有什么区别"></a>BIO,NIO,AIO 有什么区别</h3><p>在讲 BIO,NIO,AIO 之前先来回顾一下这样几个概念：同步与异步，阻塞与非阻塞。</p><p>同步与异步</p><ul><li>同步： 同步就是发起一个请求，被调用者未处理完请求之前，调用不返回。</li><li>异步： 异步就是发起一个请求，立刻得到被调用者的响应表示已接收到请求，但是被调用者并没有返回请求处理结果，此时我们可以处理其他的请求，被调用者通过事件和回调等机制来通知调用者其返回结果。</li></ul><p>同步和异步的区别在于调用者需不需要等待被调用者的处理结果。</p><p>阻塞和非阻塞</p><ul><li>阻塞： 阻塞就是发起一个请求，调用者一直等待请求结果返回，也就是当前线程会被挂起，无法从事其他任务，只有当返回结果才能继续。</li><li>非阻塞： 非阻塞就是发起一个请求，调用者不用一直等着结果返回，可以先去干其他事情。</li></ul><p>阻塞和非阻塞的区别在于调用者的线程需不需要挂起。</p><p>Java IO 方式有很多种，基于不同的 IO 抽象模型和交互方式，可以进行简单区分。</p><ul><li>BIO（jdk1.4 之前）：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它基于流模型实现，一个连接一个线程，客户端有连接请求时，服务器端就需要启动一个线程进行处理，线程开销大。伪异步 IO：将请求连接放入线程池，一对多，但线程还是很宝贵的资源。它的特点是模式简单使用方便，但并发处理能力低，容易成为应用性能的瓶颈。BIO 是面向流的，BIO 的 Stream 是单向的。<br>很多时候，人们也把 java.net 包下的部分网络 API，比如 Socket、ServerSocket、HttpURLConnection 也归类到同步阻塞 IO，因为网络通信同样是 IO 行为。</li><li>NIO（jdk1.4 之后 linux 的多路复用技术 select 模式）：Non IO 同步非阻塞 IO，是传统 IO 的升级，提供了 Channel、Selector、Buffer 等新的抽象，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有 I/O 请求时才启动一个线程进行处理。Mina2.0 和 Netty5.0 网络通信框架都是通过 NIO 实现的网络通信。NIO 是面向缓冲区的，NIO 的 channel 是双向的。</li></ul><p><strong>NIO 能解决什么问题？</strong></p><p>通过一个固定大小的线程池，来负责管理工作线程，避免频繁创建、销毁线程的开销，这是我们构建并发服务的典型方式。<br>NIO 则是利用了单线程轮询事件的机制，通过高效地定位就绪的 Channel，来决定做什么，仅仅 select 阶段是阻塞的，可以有效避免大量客户端连接时，频繁线程切换带来的问题，应用的扩展能力有了非常大的提高。</p><ul><li>AIO（jdk 1.7 过后 又叫 NIO 2）：Asynchronous IO 异步非堵塞 IO，是 NIO 的升级，异步 IO 的操作基于事件和回调机制，性能是最好的。底层实现是通过 epoll 的 I/O 多路复用机制。</li></ul><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p><strong>饿汉式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton1</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;单例对象不能重复创建&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton1</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton1</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造方法抛出异常是防止反射破坏单例</li><li><code>readResolve()</code> 是防止反序列化破坏单例</li></ul><p><strong>枚举饿汉式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton2</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>枚举饿汉式能天然防止反射、反序列化破坏单例</li></ul><p><strong>懒汉式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton3</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton3()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton3</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Singleton3.class</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton3 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton3</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其实只有首次创建单例对象时才需要同步，但该代码实际上每次调用都会同步</li><li>因此有了下面的双检锁改进</li></ul><p><strong>双检锁懒汉式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton4</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton4()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton4</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 可见性，有序性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton4.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton4</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为何必须加 volatile：</p><ul><li><code>INSTANCE = new Singleton4()</code> 不是原子的，分成 3 步：创建对象、调用构造、给静态变量赋值，其中后两步可能被指令重排序优化，变成先赋值、再调用构造</li><li>如果线程 1 先执行了赋值，线程 2 执行到第一个 <code>INSTANCE == null</code> 时发现 INSTANCE 已经不为 null，此时就会返回一个未完全构造的对象</li></ul><p><strong>内部类懒汉式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton5</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton5()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Holder</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">Singleton5</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton5</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Holder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>避免了双检锁的缺点</li></ul><p><strong>JDK 中单例的体现</strong></p><ul><li>Runtime 体现了饿汉式单例</li><li>Console 体现了双检锁懒汉式单例</li><li>Collections 中的 EmptyNavigableSet 内部类懒汉式单例</li><li>ReverseComparator.REVERSE_ORDER 内部类懒汉式单例</li><li>Comparators.NaturalOrderComparator.INSTANCE 枚举饿汉式单例</li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>Throwable 是所有 Java 程序中错误处理的父类，有两种资类：Error 和 Exception。</p><p><strong>Error</strong>：表示由 JVM 所侦测到的无法预期的错误，由于这是属于 JVM 层次的严重错误，导致 JVM 无法继续执行，因此，这是不可捕捉到的，无法采取任何恢复的操作，顶多只能显示错误信息。</p><p><strong>Exception</strong>：表示可恢复的例外，这是可捕捉到的。</p><ol><li><strong>运行时异常</strong>：都是 RuntimeException 类及其子类异常，如 NullPointerException(空指针异常)IndexOutOfBoundsException(下标越界异常)等， 这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。<br>这些异常一般是由程序 逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。<br>运行时异常的特点是 Java 编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用 try-catch 语句捕获它，也没有用 throws 子句声明抛出它，也会编译通过。</li><li><strong>非运行时异常</strong>（编译异常）：是 RuntimeException 以外的异常，类型上都属于 Exception 类及其子类。<br>从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。<br> 如 IOException、SQLException 等以及用户自定义的 Exception 异常，一般情况下不自定义检查异常。</li></ol><p>常见的 RunTime 异常几种如下：</p><ol><li>NullPointerException - 空指针引用异常</li><li>ClassCastException - 类型强制转换异常。</li><li>IllegalArgumentException - 传递非法参数异常。ArithmeticException - 算术运算异常</li><li>ArrayStoreException - 向数组中存放与声明类型不兼容对象异常</li><li>IndexOutOfBoundsException - 下标越界异常</li><li>NegativeArraySizeException - 创建一个大小为负数的数组错误异常</li><li>NumberFormatException - 数字格式异常</li><li>SecurityException - 安全异常</li><li>UnsupportedOperationException - 不支持的操作异常</li></ol><h3 id="throw-和-throws-的区别"><a href="#throw-和-throws-的区别" class="headerlink" title="throw 和 throws 的区别"></a>throw 和 throws 的区别</h3><ul><li>throw 在方法体内使用，throws 在方法声明上使用；</li><li>throw 后面接的是异常对象，只能接一个。throws 后面接的是异常类型，可以接多个，多个异常类型用逗号隔开；</li><li>throw 是在方法中出现不正确情况时，手动来抛出异常，结束方法的，执行了 throw 语句一定会出现异常。而 throws 是用来声明当前方法有可能会出现某种异常的，如果出现了相应的异常，将由调用者来处理，声明了异常不一定会出现异常。</li></ul><h2 id="Get-和-Post-的区别？"><a href="#Get-和-Post-的区别？" class="headerlink" title="Get 和 Post 的区别？"></a>Get 和 Post 的区别？</h2><ol><li>Get 是不安全的，因为在传输过程，数据被放在请求的 URL 中；Post 的所有操作对用户来说都是不可见的。</li><li>Get 传送的数据量较小，一般传输数据大小不超过 2k-4k（根据浏览器不同，限制不一样， 但相差不大这主要是因为受 URL 长度限制；Post 传送的数据量较大，一般被默认为不受限制。</li><li>Get 限制 Form 表单的数据集的值必须为 ASCII 字符；而 Post 支持整个 ISO10646 字符集。</li><li>Get 执行效率却比 Post 方法好。Get 是 form 提交的默认方法。</li></ol><h2 id="session-和-cookie"><a href="#session-和-cookie" class="headerlink" title="session 和 cookie"></a>session 和 cookie</h2><h3 id="session-和-cookie-的区别？"><a href="#session-和-cookie-的区别？" class="headerlink" title="session 和 cookie 的区别？"></a>session 和 cookie 的区别？</h3><p>（1）seesion 是通过服务器产生，服务器保存的，Cookie 是服务器产生，浏览器保存。<br>（2）session 是没有大小限制，cookie 有大小限制最多 4kb。<br>（3）cookie 只能够存储 String 类型数据，session 可以存储任意类型数据。<br>（4）cookie 不能存储敏感信息，session 能够存储敏感信息。<br>（5）浏览器关闭 cookie 不会消失，session 会消失。<br>session 和 Cookie 之间的联系，Cookie 中存储这 session 的唯一标识 SessionId。</p><h3 id="cookie-的缺陷？"><a href="#cookie-的缺陷？" class="headerlink" title="cookie 的缺陷？"></a>cookie 的缺陷？</h3><ol><li>cookie 不能存储敏感信息，并且是明文的</li><li>不同的浏览器对应的 cookie 存储的大小有限制</li><li>cookie 存储的内容只能是字符串</li></ol><h3 id="session-的运行过程？"><a href="#session-的运行过程？" class="headerlink" title="session 的运行过程？"></a>session 的运行过程？</h3><ol><li>seesion 是由服务器产生，服务器保存的，服务器产生一个 Session 对象时会带有一个唯一的 SessionID 来标识 Session 会话对象，同时会产生一个 Cookie 来存储这个 SessionID。</li><li>seession 对象在一个浏览器第一次访问的时候，会保存存储 SessionId 的 Cookie。</li><li>当后续再次访问的时候，这个请求就会携带 Cookie，浏览器会先查看 Cookie 中存储的 SessionID 来找到相对应的 Session 会话对象，来区分不同的对象。</li></ol><h3 id="Session-的销毁条件？"><a href="#Session-的销毁条件？" class="headerlink" title="Session 的销毁条件？"></a>Session 的销毁条件？</h3><p>关闭浏览器只会使存储在客户端浏览器内存中的 session cookie 失效，不会使服务器端的 session 对象失效。因此销毁 httpsession 有以下 3 中方法：</p><ol><li>直接调用 HttpSession 的 invalidate() 方法, 该方法使 HttpSession 失效</li><li>服务器进程被停止或者服务器卸载了当前 WEB 应用</li><li>距离上一次收到客户端发送的 session id 时间间隔超过了 session 的最大有效时间</li></ol><p>设置 HttpSession 的过期时间: session.setMaxInactiveInterval(5); 单位为秒或者在 web.xml 文件中设置 HttpSession 的过期时间: 单位为分钟：30</p><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="TCP-IP-的五层体系结构分别是什么？"><a href="#TCP-IP-的五层体系结构分别是什么？" class="headerlink" title="TCP/IP 的五层体系结构分别是什么？"></a>TCP/IP 的五层体系结构分别是什么？</h3><p><strong>应用层</strong></p><p>应用层( application-layer ）的任务是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程间的通信和交互的规则。</p><p>对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统 DNS，支持万维网应用的 HTTP 协议，支持电子邮件的 SMTP 协议等等。</p><p><strong>运输层</strong></p><p>运输层(transport layer)的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务。应用进程利用该服务传送应用层报文。</p><p><strong>网络层</strong></p><p>网络层的任务就是选择合适的网间路由和交换结点，确保计算机通信的数据及时传送。在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于网络层使用 IP 协议，因此分组也叫 IP 数据报 ，简称数据报。</p><p>互联网是由大量的异构（heterogeneous）网络通过路由器（router）相互连接起来的。互联网使用的网络层协议是无连接的网际协议（Intert Prococol）和许多路由选择协议，因此互联网的网络层也叫做网际层或 IP 层。</p><p><strong>数据链路层</strong></p><p>数据链路层(data link layer)通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。</p><p>在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。</p><p>在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。</p><p><strong>物理层</strong></p><p>在物理层上所传送的数据单位是比特。物理层(physical layer)的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。</p><h3 id="TCP、UDP"><a href="#TCP、UDP" class="headerlink" title="TCP、UDP"></a>TCP、UDP</h3><p>运输层主要使用一下两种协议</p><ol><li>传输控制协议-TCP：提供面向连接的，可靠的数据传输服务。</li><li>用户数据协议-UDP：提供无连接的，尽最大努力的数据传输服务（不保证数据传输的可靠性）。</li></ol><div class="table-container"><table><thead><tr><th></th><th>UDP</th><th>TCP</th></tr></thead><tbody><tr><td>是否连接</td><td>无连接</td><td>面向连接</td></tr><tr><td>是否可靠</td><td>不可靠传输，不使用流量控制和拥塞控制</td><td>可靠传输，使用流量控制和拥塞控制</td></tr><tr><td>连接对象个数</td><td>支持一对一，一对多，多对一和多对多交互通信</td><td>只能是一对一通信</td></tr><tr><td>传输方式</td><td>面向报文</td><td>面向字节流</td></tr><tr><td>首部开销</td><td>首部开销小，仅 8 字节</td><td>首部最小 20 字节，最大 60 字节</td></tr><tr><td>场景</td><td>适用于实时应用（IP 电话、视频会议、直播等）</td><td>适用于要求可靠传输的应用，例如文件传输</td></tr></tbody></table></div><p>每一个应用层（TCP/IP 参考模型的最高层）协议一般都会使用到两个传输层协议之一：</p><p>运行在 TCP 协议上的协议：</p><ul><li>HTTP（Hypertext Transfer Protocol，超文本传输协议），主要用于普通浏览。</li><li>HTTPS（HTTP over SSL，安全超文本传输协议）,HTTP 协议的安全版本。</li><li>FTP（File Transfer Protocol，文件传输协议），用于文件传输。</li><li>POP3（Post Office Protocol, version 3，邮局协议），收邮件用。</li><li>SMTP（Simple Mail Transfer Protocol，简单邮件传输协议），用来发送电子邮件。</li><li>TELNET（Teletype over the Network，网络电传），通过一个终端（terminal）登陆到网络。</li><li>SSH（Secure Shell，用于替代安全性差的 TELNET），用于加密安全登陆用。</li></ul><p>运行在 UDP 协议上的协议：</p><ul><li>BOOTP（Boot Protocol，启动协议），应用于无盘设备。</li><li>NTP（Network Time Protocol，网络时间协议），用于网络同步。</li><li>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议），动态配置 IP 地址。</li></ul><p>运行在 TCP 和 UDP 协议上：</p><ul><li>DNS（Domain Name Service，域名服务），用于完成地址查找，邮件转发等工作。</li></ul><h3 id="TCP-的三次握手四次挥手"><a href="#TCP-的三次握手四次挥手" class="headerlink" title="TCP 的三次握手四次挥手"></a>TCP 的三次握手四次挥手</h3><p><strong>三次握手</strong><br>三次握手的本质是确认通信双方收发数据的能力</p><p>首先，我让信使运输一份信件给对方，对方收到了，那么他就知道了我的发件能力和他的收件能力是可以的。</p><p>于是他给我回信，我若收到了，我便知我的发件能力和他的收件能力是可以的，并且他的发件能力和我的收件能力是可以。</p><p>然而此时他还不知道他的发件能力和我的收件能力到底可不可以，于是我最后反馈一次，他若收到了，他便清楚了他的发件能力和我的收件能力是可以的。</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20230302211215.png" alt="三次握手"></p><ol><li>第一次握手：客户端要向服务端发起连接请求，首先客户端随机生成一个起始序列号 ISN(比如是 100)，那客户端向服务端发送的报文段包含 SYN 标志位(也就是 SYN=1)，序列号 seq=100。</li><li>第二次握手：服务端收到客户端发过来的报文后，发现 SYN=1，知道这是一个连接请求，于是将客户端的起始序列号 100 存起来，并且随机生成一个服务端的起始序列号(比如是 300)。然后给客户端回复一段报文，回复报文包含 SYN 和 ACK 标志(也就是 SYN=1,ACK=1)、序列号 seq=300、确认号 ack=101(客户端发过来的序列号+1)。</li><li>第三次握手：客户端收到服务端的回复后发现 ACK=1 并且 ack=101,于是知道服务端已经收到了序列号为 100 的那段报文；同时发现 SYN=1，知道了服务端同意了这次连接，于是就将服务端的序列号 300 给存下来。然后客户端再回复一段报文给服务端，报文包含 ACK 标志位(ACK=1)、ack=301(服务端序列号+1)、seq=101(第一次握手时发送报文是占据一个序列号的，所以这次 seq 就从 101 开始，需要注意的是不携带数据的 ACK 报文是不占据序列号的，所以后面第一次正式发送数据时 seq 还是 101)。当服务端收到报文后发现 ACK=1 并且 ack=301，就知道客户端收到序列号为 300 的报文了，就这样客户端和服务端通过 TCP 建立了连接。</li></ol><p><strong>四次挥手</strong></p><p>四次挥手的目的是关闭一个连接<br><img src="https://blogcdn.dyfnb.xyz/img/post/20230302211447.png" alt="四次挥手"><br>比如客户端初始化的序列号 ISA=100，服务端初始化的序列号 ISA=300。TCP 连接成功后客户端总共发送了 1000 个字节的数据，服务端在客户端发 FIN 报文前总共回复了 2000 个字节的数据。</p><ol><li>第一次挥手：当客户端的数据都传输完成后，客户端向服务端发出连接释放报文(当然数据没发完时也可以发送连接释放报文并停止发送数据)，释放连接报文包含 FIN 标志位(FIN=1)、序列号 seq=1101(100+1+1000，其中的 1 是建立连接时占的一个序列号)。需要注意的是客户端发出 FIN 报文段后只是不能发数据了，但是还可以正常收数据；另外 FIN 报文段即使不携带数据也要占据一个序列号。</li><li>第二次挥手：服务端收到客户端发的 FIN 报文后给客户端回复确认报文，确认报文包含 ACK 标志位(ACK=1)、确认号 ack=1102(客户端 FIN 报文序列号 1101+1)、序列号 seq=2300(300+2000)。此时服务端处于关闭等待状态，而不是立马给客户端发 FIN 报文，这个状态还要持续一段时间，因为服务端可能还有数据没发完。</li><li>第三次挥手：服务端将最后数据(比如 50 个字节)发送完毕后就向客户端发出连接释放报文，报文包含 FIN 和 ACK 标志位(FIN=1,ACK=1)、确认号和第二次挥手一样 ack=1102、序列号 seq=2350(2300+50)。</li><li>第四次挥手：客户端收到服务端发的 FIN 报文后，向服务端发出确认报文，确认报文包含 ACK 标志位(ACK=1)、确认号 ack=2351、序列号 seq=1102。注意客户端发出确认报文后不是立马释放 TCP 连接，而是要经过 2MSL(最长报文段寿命的 2 倍时长)后才释放 TCP 连接。而服务端一旦收到客户端发出的确认报文就会立马释放 TCP 连接，所以服务端结束 TCP 连接的时间要比客户端早一些。</li></ol><h1 id="集合容器"><a href="#集合容器" class="headerlink" title="集合容器"></a>集合容器</h1><h2 id="常见的数据结构"><a href="#常见的数据结构" class="headerlink" title="常见的数据结构"></a>常见的数据结构</h2><p>常用的数据结构有：数组，栈，队列，链表，树，散列，堆，图等</p><p><strong>数组</strong>：是最常用的数据结构，数组的特点是长度固定，数组的大小固定后就无法扩容了 ， 数组只能存储一种类型的数据 ，添加，删除的操作慢，因为要移动其他的元素。</p><p><strong>栈</strong>：是一种基于先进后出（FILO）的数据结构，是一种只能在一端进行插入和删除操 作的特殊线性表。它按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据 在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。</p><p><strong>队列</strong>：是一种基于先进先出（FIFO）的数据结构，是一种只能在一端进行插入，在另 一端进行删除操作的特殊线性表，它按照先进先出的原则存储数据，先进入的数据，在读取 数据时先被读取出来。</p><p><strong>链表</strong>：是一种物理存储单元上非连续、非顺序的存储结构，其物理结构不能只表示数据元素的逻辑顺序，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系 列的结节（链表中的每一个元素称为结点）组成，结点可以在运行时动态生成。根据指针的 指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。</p><p><strong>树</strong>：是我们计算机中非常重要的一种数据结构，同时使用树这种数据结构，可以描述现实生活中的很多事物，例如家谱、单位的组织架构等等。有二叉树、平衡树、红黑树、B 树、B+树。</p><p><strong>散列表</strong>：也叫哈希表，是根据关键码和值 (key 和 value) 直接进行访问的数据结构， 通过 key 和 value 来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p><p><strong>堆</strong>：是计算机学科中一类特殊的数据结构的统称，堆通常可以被看作是一棵完全二叉 树的数组对象。</p><p><strong>图</strong>：图是由一组顶点和一组能够将两个顶点相连的边组成的</p><h2 id="什么是集合，集合和数组的区别"><a href="#什么是集合，集合和数组的区别" class="headerlink" title="什么是集合，集合和数组的区别"></a>什么是集合，集合和数组的区别</h2><p>集合：用于存储数据的容器。</p><p>集合和数组的区别</p><ul><li>数组是固定长度的；集合是可变长度的。</li><li>数组可以存储基本数据类型，也可以存储引用数据类型；集合只能存储引用数据类型。</li><li>数组是 Java 语言中内置的数据类型，是线性排列的，执行效率和类型检查都比集合快，集合提供了众多的属性和方法，方便操作。</li></ul><p>联系：通过集合的 toArray()方法可以将集合转换为数组，通过 Arrays.asList()方法可以将数组转换为集合</p><h2 id="Collection-和-Collections-的区别"><a href="#Collection-和-Collections-的区别" class="headerlink" title="Collection 和 Collections 的区别"></a>Collection 和 Collections 的区别</h2><p>Collection 是集合类的父级接口，下边实现的有 set list 集合</p><p>Collections 是集合类的一个辅助工具类，可以帮助实现集合类的排序，反转，搜索，线程安全化等一系列功能操作。</p><h2 id="List-和-Map、Set-的区别"><a href="#List-和-Map、Set-的区别" class="headerlink" title="List 和 Map、Set 的区别"></a>List 和 Map、Set 的区别</h2><ul><li>List 和 Set 是存储单列数据的集合，Map 是存储键值对这样的双列数据的集合；</li><li>List 中存储的数据是有顺序的，并且值允许重复；</li><li>Map 中存储的数据是无序的，它的键是不允许重复的，但是值是允许重复的；</li><li>Set 中存储的数据是无顺序的，并且不允许重复，但元素在集合中的位置是由元素的 hashcode 决定，即位置是固定的（Set 集合是根据 hashcode 来进行数据存储的，所以位置是固定的，但是这个位置不是用户可以控制的，所以对于用户来说 set 中的元素还是无序的）</li></ul><h2 id="集合框架底层数据结构"><a href="#集合框架底层数据结构" class="headerlink" title="集合框架底层数据结构"></a>集合框架底层数据结构</h2><p>Collection 集合实现类概述</p><p>list</p><ul><li>Arraylist：Object 数组</li><li>LinkedList：双向循环链表</li><li>Vector：Object 数组</li></ul><p>Set</p><ul><li>HashSet（无序，唯一）：基于 HashMap 实现，底层采用 HashMap 的 key 来保存元素</li><li>LinkedHashSet：LinkedHashSet 继承于 HashSet，并且其内部是通过 LinkedHashMap 来实现的。</li><li>TreeSet（有序，唯一）：红黑树(自平衡的排序二叉树</li></ul><p>Map 集合实现类概述</p><ul><li>HashMap：JDK1.8 之前 HashMap 由<strong>数组+链表</strong>组成的，数组是 HashMap 的主体，<br>链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。<br>JDK1.8 以后 HashMap 由<strong>数组 + （链表 | 红黑树）</strong>组成在解决哈希冲突时有了较大的变化。</li><li>LinkedHashMap：LinkedHashMap 继承自 HashMap，<br>它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。<br>另外，LinkedHashMap 在上面结构的基础上，增加了一条双向链表，<br>使得 LinkedHashMap 可以保持键值对的插入顺序。</li><li>HashTable：数组+链表组成的，数组是 HashTable 的主体，链表则是主要为了解决哈希冲突而存在的</li><li>TreeMap：红黑树（自平衡的排序二叉树）</li></ul><h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h2><p>iterator 就是一个专门用来处理集合类遍历问题的一个对象，隔离了对容器操作和底层实现，从而实现解耦</p><p><strong>区别</strong>：</p><ul><li>iterator 可以用来遍历 set、list 等集合，ListIterator 只能够用来遍历 list 集合</li><li>iterator 只能够实现的是前向遍历，ListIterator 能够实现的是双向遍历。</li></ul><h3 id="Fail-Fast-与-Fail-Safe"><a href="#Fail-Fast-与-Fail-Safe" class="headerlink" title="Fail-Fast 与 Fail-Safe"></a>Fail-Fast 与 Fail-Safe</h3><ul><li>ArrayList 是 fail-fast 的典型代表，遍历的同时不能修改，尽快失败</li><li>CopyOnWriteArrayList 是 fail-safe 的典型代表，遍历的同时可以修改，原理是读写分离</li></ul><h2 id="ArrayList-扩容规则"><a href="#ArrayList-扩容规则" class="headerlink" title="ArrayList 扩容规则"></a>ArrayList 扩容规则</h2><ol><li>ArrayList() 会使用长度为零的数组</li><li>ArrayList(int initialCapacity) 会使用指定容量的数组</li><li>public ArrayList(Collection&lt;? extends E&gt; c) 会使用 c 的大小作为数组容量</li><li>add(Object o) 首次扩容为 10，再次扩容为上次容量的 1.5 倍</li><li>addAll(Collection c) 没有元素时，扩容为 Math.max(10, 实际元素个数)，有元素时为 Math.max(原容量 1.5 倍, 实际元素个数)</li></ol><h2 id="ArrayList-和-LinkedList-的区别"><a href="#ArrayList-和-LinkedList-的区别" class="headerlink" title="ArrayList 和 LinkedList 的区别"></a>ArrayList 和 LinkedList 的区别</h2><p><strong>LinkedList</strong></p><ol><li>基于双向链表，无需连续内存</li><li>随机访问慢（要沿着链表遍历）</li><li>头尾插入删除性能高</li><li>占用内存多</li></ol><p><strong>ArrayList</strong></p><ol><li>基于数组，需要连续内存</li><li>随机访问快（指根据下标访问）</li><li>尾部插入、删除性能可以，其它部分插入、删除都会移动数据，因此性能会低</li><li>可以利用 cpu 缓存，局部性原理</li></ol><h2 id="HashMap-put-与扩容"><a href="#HashMap-put-与扩容" class="headerlink" title="HashMap put 与扩容"></a>HashMap put 与扩容</h2><p><strong>put 流程</strong></p><ol><li>HashMap 是懒惰创建数组的，首次使用才创建数组</li><li>计算索引（桶下标）</li><li>如果桶下标还没人占用，创建 Node 占位返回</li><li>如果桶下标已经有人占用<ol><li>已经是 TreeNode 走红黑树的添加或更新逻辑</li><li>是普通 Node，走链表的添加或更新逻辑，如果链表长度超过树化阈值，走树化逻辑</li></ol></li><li>返回前检查容量是否超过阈值，一旦超过进行扩容</li></ol><p><strong>1.7 与 1.8 的区别</strong></p><ol><li><p>链表插入节点时，1.7 是头插法，1.8 是尾插法</p></li><li><p>1.7 是大于等于阈值且没有空位时才扩容，而 1.8 是大于阈值就扩容</p></li><li><p>1.8 在扩容计算 Node 索引时，会优化</p></li></ol><p><strong>扩容（加载）因子为何默认是 0.75f</strong></p><ol><li>在空间占用与查询时间之间取得较好的权衡</li><li>大于这个值，空间节省了，但链表就会比较长影响性能</li><li>小于这个值，冲突减少了，但扩容就会更频繁，空间占用也更多</li></ol><h2 id="HashMap-索引计算"><a href="#HashMap-索引计算" class="headerlink" title="HashMap 索引计算"></a>HashMap 索引计算</h2><p><strong>索引计算方法</strong></p><ul><li>首先，计算对象的 hashCode()</li><li>再进行调用 HashMap 的 hash() 方法进行二次哈希<ul><li>二次 hash() 是为了综合高位数据，让哈希分布更为均匀</li></ul></li><li>最后 &amp; (capacity – 1) 得到索引</li></ul><p><strong>数组容量为何是 2 的 n 次幂</strong></p><ol><li>计算索引时效率更高：如果是 2 的 n 次幂可以使用位与运算代替取模</li><li>扩容时重新计算索引效率更高： hash &amp; oldCap == 0 的元素留在原来位置 ，否则新位置 = 旧位置 + oldCap</li></ol><p><strong>注意</strong></p><ul><li>二次 hash 是为了配合 <strong>容量是 2 的 n 次幂</strong> 这一设计前提，如果 hash 表的容量不是 2 的 n 次幂，则不必二次 hash</li><li><strong>容量是 2 的 n 次幂</strong> 这一设计计算索引效率更好，但 hash 的分散性就不好，需要二次 hash 来作为补偿，没有采用这一设计的典型例子是 Hashtable</li></ul><h2 id="HashMap-树化与退化"><a href="#HashMap-树化与退化" class="headerlink" title="HashMap 树化与退化"></a>HashMap 树化与退化</h2><p><strong>树化意义</strong></p><ul><li>红黑树用来避免 DoS 攻击，防止链表超长时性能下降，树化应当是偶然情况，是保底策略</li><li>hash 表的查找，更新的时间复杂度是 $O(1)$，而红黑树的查找，更新的时间复杂度是 $O(log_2⁡n )$，TreeNode 占用空间也比普通 Node 的大，如非必要，尽量还是使用链表</li><li>hash 值如果足够随机，则在 hash 表内按泊松分布，在负载因子 0.75 的情况下，长度超过 8 的链表出现概率是 0.00000006，树化阈值选择 8 就是为了让树化几率足够小</li></ul><p><strong>树化规则</strong></p><ul><li>当链表长度超过树化阈值 8 时，先尝试扩容来减少链表长度，如果数组容量已经 &gt;=64，才会进行树化</li></ul><p><strong>退化规则</strong></p><ul><li>情况 1：在扩容时如果拆分树时，树元素个数 &lt;= 6 则会退化链表</li><li>情况 2：remove 树节点时，若 root、root.left、root.right、root.left.left 有一个为 null ，也会退化为链表</li></ul><h2 id="Hashtable-和-HashMap-的区别？"><a href="#Hashtable-和-HashMap-的区别？" class="headerlink" title="Hashtable 和 HashMap 的区别？"></a>Hashtable 和 HashMap 的区别？</h2><ol><li>HashMap 是非线程安全的，HashTable 是线程安全的。</li><li>HashMap 的键和值都允许有 null 值存在，而 HashTable 则不行。</li><li>因为线程安全的问题，HashMap 效率比 HashTable 的要高。</li><li>Hashtable 是同步的，而 HashMap 不是。因此，HashMap 更适合于单线程环境，而 Hashtable 适合于多线 程环境。一般现在不建议用 HashTable,</li></ol><ul><li>① 是 HashTable 是遗留类，内部实现很多没优化和冗余。</li><li>② 即使在多线程环境下， 现在也有同步的 ConcurrentHashMap 替代，没有必要因为是多线程而用 HashTable。</li></ul><h2 id="ConcurrentHashMap-具体实现"><a href="#ConcurrentHashMap-具体实现" class="headerlink" title="ConcurrentHashMap 具体实现"></a>ConcurrentHashMap 具体实现</h2><p><strong>数据结构</strong>：哈希表+单链表+红黑树</p><p><strong>特点</strong>：线程安全，查询快，元素无序，key 不允许重复，key、value 不允许为 null</p><p><strong>底层分析</strong>：JDK1.8 之后也是当单向链表长度超过 8 的时候，单向链表会转化为红黑树，ConcurrentHashMap 利用 CAS + synchronized 来保证并发更新的安全，当需要插入数据的时候，对每一个节点都加锁，如果没有 hash 冲突的时候就采用 CAS 直接插入，CAS 中有三个值（A 地址,V 预期旧的值,B 新的值）CAS 就是比较并替换的意思，更新一个变量的值的时候，只有当预期旧值和 A 地址现在的值相同时，才会将内存地址 A 对应的值修改为 B，预期旧的值和内存地址 A 的现有值不同的时候，就说明其他线程正在修改这个值，则其他线程就会去循环重试，通过 sychronzied 来保证是单线程操作。<br>在 JDK1.7 的时候，ConcurrentHashMap（分段锁） 对整个桶数组进行了分割分段(Segment)，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。</p><h2 id="ConcurrentHashMap-和-HashMap-的区别"><a href="#ConcurrentHashMap-和-HashMap-的区别" class="headerlink" title="ConcurrentHashMap 和 HashMap 的区别"></a>ConcurrentHashMap 和 HashMap 的区别</h2><ol><li>ConcurrentHashMap 对整个桶数组进行了分割分段(Segment)，然后在每一个分段上都用 lock 锁进行保护，相对于 HashTable 的 synchronized 锁的粒度更精细了一些，并发性能更好，而 HashMap 没有锁机制，不是线程安全的。（JDK1.8 之后 ConcurrentHashMap 启用了一种全新的方式实现，利用 CAS 算法。）</li><li>HashMap 的键值对允许有 null，但是 ConCurrentHashMap 都不允许。</li></ol><h2 id="ConcurrentHashMap-和-Hashtable-的区别"><a href="#ConcurrentHashMap-和-Hashtable-的区别" class="headerlink" title="ConcurrentHashMap 和 Hashtable 的区别"></a>ConcurrentHashMap 和 Hashtable 的区别</h2><p>ConcurrentHashMap 和 Hashtable 的区别主要体现在底层数据结构和实现线程安全的方式上不同。</p><p><strong>底层数据结构</strong>：</p><ul><li>JDK1.7 的 ConcurrentHashMap 底层采用 分段的数组+链表 实现，JDK1.8 采用的数据结构跟 HashMap1.8 的结构一样，数组+链表/红黑树。</li><li>Hashtable 和 JDK1.8 之前的 HashMap 的底层数据结构类似都是采用 数组+链表 的形式，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的；</li></ul><p><strong>实现线程安全的方式</strong>：</p><ul><li>在 JDK1.7 的时候，ConcurrentHashMap（分段锁） 对整个桶数组进行了分割分段(Segment)，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。（默认分配 16 个 Segment，比 Hashtable 效率提高 16 倍。）</li><li>到了 JDK1.8 的时候已经摒弃了 Segment 的概念，而是直接用 Node 数组+链表+红黑树的数据结构来实现，并发控制使用 synchronized 和 CAS 来操作。（JDK1.6 以后 对 synchronized 锁做了很多优化） 整个看起来就像是优化过且线程安全的 HashMap，虽然在 JDK1.8 中还能看到 Segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本；</li><li>Hashtable(同一把锁) :使用 synchronized 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈，效率越低。</li></ul><h2 id="哪些集合类是线程安全的？"><a href="#哪些集合类是线程安全的？" class="headerlink" title="哪些集合类是线程安全的？"></a>哪些集合类是线程安全的？</h2><p>Vector、Hashtable、Stack 都是线程安全的，而像 HashMap 则是非线程安全的，不过在 JDK 1.5 之后随着 Java. util. concurrent 并发包的出现，它们也有了自己对应的线程安全类，比如 HashMap 对应的线程安全类就是 ConcurrentHashMap。</p><h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="JVM-内存模型"><a href="#JVM-内存模型" class="headerlink" title="JVM 内存模型"></a>JVM 内存模型</h2><p>jdk 1.8 虚拟机：<br><img src="https://blogcdn.dyfnb.xyz/img/post/20230302141241.png" alt="jdk 1.8 JVM内存模型"></p><p>jdk 1.8 中元空间取代了方法区，元数据空间并不在虚拟机中，而是使用本地内存。</p><h2 id="JVM-各区详细"><a href="#JVM-各区详细" class="headerlink" title="JVM 各区详细"></a>JVM 各区详细</h2><p><strong>程序计数器</strong>:线程私有的(每个线程都有一个自己的程序计数器), 是一个指针. 代码运行, 执行命令. 而每个命令都是有行号的,会使用程序计数器来记录命令执行到多少行了.记录代码执行的位置<br><strong>Java 虚拟机栈</strong>:线程私有的(每个线程都有一个自己的 Java 虚拟机栈). 一个方法运行, 就会给这个方法创建一个栈帧, 栈帧入栈执行代码, 执行完毕之后出栈(弹栈)存引用变量，基本数据类型<br><strong>本地方法栈</strong>:线程私有的(每个线程都有一个自己的本地方法栈), 和 Java 虚拟机栈类似, Java 虚拟机栈加载的是普通方法,本地方法加载的是 native 修饰的方法.<br>native:在 java 中有用 native 修饰的,表示这个方法不是 java 原生的.<br><strong>堆</strong>:线程共享的(所有的线程共享一份). 存放对象的,new 的对象都存储在这个区域.还有就是常量池.<br><strong>元空间</strong>:存储.class 信息, 类的信息,方法的定义,静态变量等.而常量池放到堆里存储<br>JDK1.8 和 JDK1.7 的 jvm 内存最大的区别是, 在 1.8 中方法区是由元空间(元数据区)来实现的, 常量池.<br>1.8 不存在方法区,将方法区的实现给去掉了.而是在本地内存中,新加入元数据区(元空间).</p><h2 id="Java-类加载过程"><a href="#Java-类加载过程" class="headerlink" title="Java 类加载过程"></a>Java 类加载过程</h2><p><img src="https://blogcdn.dyfnb.xyz/img/post/20230302150433" alt="类加载过程"><br><strong>加载</strong>：是类加载过程的一个阶段，在加载阶段, 虚拟机需要完成以下三件事情:<br>（1）Java 虚拟机将.class 文件读入内存，并为之创建一个 Class 对象。<br>（2）任何类被使用时系统都会为其创建一个且仅有一个 Class 对象。<br>（3）这个 Class 对象描述了这个类创建出来的对象的所有信息，比如有哪些构造方法，都有哪些成员方法，都有哪些成员变量等。<br><strong>链接</strong>：分为三部分<br>（1）验证：确保.Class 文件字节流中包含的信息符合当前虚拟机的要求。不会危害的自身安全。Eg:这个类的父类是否继承了不允许被继承的类(被 finaI 修饰的类)<br>（2）准备：准备阶段正式为类变量分配内存以及为类变量设置初始值。注意：这时分配内存的仅仅包括类变量（被 static 修饰的变量）不包括实例变量，实例变量会再对象实例初始化时分配内存。这里所说的初始值“通常情况”下是数据类型的零值。<br>（3）解析：将方法区中的字符引用转换成直接引用<br><strong>初始化</strong>：<br>对静态的变量（static）进行赋值,包括初始化代码块。</p><p>类的加载时机：</p><ol><li>创建类的实例也就是 new 一个对象。</li><li>访问某个类的或接口的静态变量 或者给静态变量赋值、</li><li>调用某个类的静态方法</li><li>反射（Class.forName(“com.sgd.test”)）</li><li>初始化一个类的子类（首先会初始化父类）</li><li>JVM 启动时标明的启动类，即文件名和类名相同的那个类</li></ol><h2 id="Java-双亲委派模型"><a href="#Java-双亲委派模型" class="headerlink" title="Java 双亲委派模型"></a>Java 双亲委派模型</h2><p><strong>双亲委派机制</strong>：就是如果一个类加载器收到了类加载请求，它首先不会自己尝试去加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有父类加载器反馈到无法完成这个加载请求（它的搜索范围没有找到这个类），子加载器才会尝试自己去加载。</p><p>双亲委派模型的好处：</p><ul><li>避免类的重复加载</li><li>保护程序安全，防止核心 API 被随意篡改<br>image.png</li></ul><h2 id="打破双亲委派模型"><a href="#打破双亲委派模型" class="headerlink" title="打破双亲委派模型"></a>打破双亲委派模型</h2><ol><li>重写 loadclass()方法破坏双亲委派模型</li></ol><ul><li>loadclass 的作用就是通过指定的全限定名加载 class，因为双亲委派机制的实现就是通过这个方法实现的，这个方法可以指定类通过什么加载器来加载，所以如果我们改写他的规则，就相当于打破了双亲委派机制。</li></ul><ol><li>线程上下文类加载器破坏双亲委派模型</li></ol><ul><li>双亲委派模型的局限性：父类加载器无法加载子类加载器路径中的类。双亲委派模型最典型的不适用场景是 SPI 的使用。所以提供了一种线程上下文类加载器，能够使父类加载器调用子类加载器进行加载。简单来说就是接口定义在了启动类加载器中，而实现类定义在了其他类加载器中，当启动类加载器需要加载其他子类加载器路径中的类时，使用了线程上下文类加载器（默认是应用程序类加载器）来实现父类调用子类的加载器进行类的加载。</li></ul><ol><li>OSGi 实现模块化热部署</li></ol><ul><li>OSGi 实现模块化热部署的关键则是 它自定义的类加载器机制的实现。每一个程序模块（OSGi 中称为 Bundle）都有一个自己的类加载器，当需要更换一个 Bundle 时，就把 Bundle 连同类加载器一起换掉以实现代码的热替换。在 OSGi 环境下，类加载器不再是双亲委派模型中的树状结构，而是进一步发展为更加 复杂的网状结构</li></ul><h2 id="内存溢出和内存泄漏"><a href="#内存溢出和内存泄漏" class="headerlink" title="内存溢出和内存泄漏"></a>内存溢出和内存泄漏</h2><p><strong>内存溢出 out of memory</strong>：是指程序在申请内存时，没有足够的内存空间供其使用，出现 out of memory；比如申请了一个 integer,但给它存了 long 才能存下的数，那就是内存溢出。<br><strong>内存泄露 memory leak</strong>：是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。</p><p>内存泄露产生的可能原因：</p><ul><li>循环过多或死循环，产生大量对象；</li><li>静态集合类引起内存泄漏，因为静态集合的生命周期和应用一致，所以静态集合引用的对象不能被释放；</li><li>单例模式，和静态集合导致内存泄露的原因类似；</li><li>事件监听(listeners)和回调(callbacks)；</li><li>各种连接，比如数据库连接、Socket 连接、IO 等，必须显式释放(close)；</li></ul><h2 id="常用的垃圾回收算法"><a href="#常用的垃圾回收算法" class="headerlink" title="常用的垃圾回收算法"></a>常用的垃圾回收算法</h2><p>常用的垃圾回收算法有标记-清除算法、复制算法、标记-压缩算法、分代收集算法。</p><ol><li>标记-清除算法：原理就是将要所有回收的对象做标记，然后统一回收要被回收的对象。</li><li>复制算法：原理就是将内存划分为两个大小相同的两块，当其中一块被使用完毕后，会把还存活的对象复制到另一个内存中，然后把存满的内存块对象全部回收。</li><li>标记压缩算法：原理就是浆回收的对象做标记，不直接回收，而是把需要把有回收的放置到一段，然后剩下的放在另一端，把需要回收的那端回收。</li><li>分代收集算法：原理就是将对象区分为新生代和老年代两类对象，然后根据不同代的回收特点去回收。</li></ol><h2 id="如何判断一个对象是否要被回收"><a href="#如何判断一个对象是否要被回收" class="headerlink" title="如何判断一个对象是否要被回收"></a>如何判断一个对象是否要被回收</h2><p>通过可达分析法，就是通过 GC Roots 作为根节点，根节点到其他对象都有路径，如果某个对象不可达的时候，就会被标记回收，但是一次的标记不会立即实现，当第二次从 GC Roots 中再次遍历的时候，如果还是不可达，再次标记回收，就会成为要被回收的对象。</p><h2 id="Java-的引用类型"><a href="#Java-的引用类型" class="headerlink" title="Java 的引用类型"></a>Java 的引用类型</h2><ol><li><p><strong>强引用</strong>:<br>强引用就是只要强引用存在，这个对象就永远不会被回收。</p></li><li><p><strong>软引用</strong>:<br>软引用就是一些可以有，但是不必须存在的对象，当内存空间不存在的时候，就会被回收。</p></li><li><strong>弱引用</strong>:<br>弱引用就是只能生存一次垃圾回收的过程，下次垃圾回收的时候就会被回收。</li><li><strong>虚引用</strong>:<br>虚引用的目的就是对象被回收的时候，发送一个系统通知。</li></ol><h2 id="导致-full-GC-的因素"><a href="#导致-full-GC-的因素" class="headerlink" title="导致 full GC 的因素"></a>导致 full GC 的因素</h2><ol><li>系统承载高并发请求，或者处理数据量过大，导致 Young GC 很贫乏，而且每次 Young GC 过后存活对象太多，内存分配不合理，Survivor 区过小，导致对象频繁进入老年代，频繁触发 Full GC。</li><li>系统一次性加载过多数据进内存，搞出来很多大对象，导致频繁有大对象进入老年带，必然频繁触发 Full GC。</li><li>系统发生了内存泄漏，莫名其妙创建大量的对象，始终无法回收，一直占用在老年代里，必然频繁触发 Full GC。</li><li>Metaspace（永久代）因为加载类过多触发 Full GC。</li><li>误调用 System.gc()触发 Full GC。</li></ol><h2 id="JVM-调优参数"><a href="#JVM-调优参数" class="headerlink" title="JVM 调优参数"></a>JVM 调优参数</h2><p>这里只给出一些常见的性能调优的参数及其代表的含义。(大家记住 5.6 个就行, 并不需要都记住.)</p><ol><li>-Xmx3550m：设置 JVM 最大可用内存为 3550M。</li><li>-Xms3550m：设置 JVM 初始内存为 3550m。注意：此值一般设置成和-Xmx 相同， 以避免每次垃圾回收完成后 JVM 重新分配内存。</li><li><p>-Xmn2g：设置年轻代大小为 2G。整个 JVM 内存大小=年轻代大小 + 年老代大小 + 持久代大小。此值对系统性能影响较大，Sun 官方推荐配置为整个堆的 3/8。</p></li><li><p>-Xss256k：设置每个线程的栈大小。JDK5.0 以后每个线程栈大小为 1M，以前每个线程栈大小为 256K。根据应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。</p></li><li>-XX:NewRatio=4:设置年轻代（包括 Eden 和两个 Survivor 区）与年老代的比值（除去持久代）。设置为 4，则年轻代与年老代所占比值为 1：4。（该值默认为 2）</li><li>-XX:SurvivorRatio=4：设置年轻代中 Eden 区与 Survivor 区的大小比值。设置为 4， 则两个 Survivor 区与一个 Eden 区的比值为 2:4。</li></ol><h1 id="线程-amp-锁"><a href="#线程-amp-锁" class="headerlink" title="线程&amp;锁"></a>线程&amp;锁</h1><h2 id="什么是进程，线程，两者之间的区别？"><a href="#什么是进程，线程，两者之间的区别？" class="headerlink" title="什么是进程，线程，两者之间的区别？"></a>什么是进程，线程，两者之间的区别？</h2><p>（1）电脑启动一个应用就会生成一个进程，就是独立的应用程序，拥有获取系统 cpu，内存，显卡和磁盘这些资源的权利。<br>（2）线程就是进程的中的一个功能，每一个进程就是由多个线程组成，也就是说每一个进程至少有一个线程。</p><p>区别：</p><p>进程是拥有资源的基本单位，线程是被进程调度的最小基本单位<br>进程拥有自己独立的内存资源，线程没有自己独立的内存资源等，一个进程中多个线程共享这个进程获取的内存资源，Cpu 资源，显卡资源等。</p><h2 id="并发编程三要素是什么？在-Java-程序中怎么保证多线程的运行安全？"><a href="#并发编程三要素是什么？在-Java-程序中怎么保证多线程的运行安全？" class="headerlink" title="并发编程三要素是什么？在 Java 程序中怎么保证多线程的运行安全？"></a>并发编程三要素是什么？在 Java 程序中怎么保证多线程的运行安全？</h2><p>并发编程三要素（线程的安全性问题体现在）：</p><p><strong>原子性</strong>：一个或多个操作要么全部执行成功要么全部执行失败。<br><strong>可见性</strong>：一个线程对共享变量的修改，另一个线程能够立刻看到。<br><strong>有序性</strong>：程序执行的顺序按照代码的先后顺序执行，避免指令重排。</p><p>出现线程安全问题的原因：</p><ul><li>线程切换带来的原子性问题</li><li>缓存导致的可见性问题</li><li>编译优化带来的有序性问题</li></ul><p>解决办法：</p><ul><li>JDK Atomic 开头的原子类、synchronized、lock，可以解决原子性问题</li><li>volatile、synchronized、lock，可以解决可见性问题</li><li>volatile、Happens-Before 规则可以解决有序性问题</li></ul><h2 id="线程有哪几种状态以及各种状态之间的转换"><a href="#线程有哪几种状态以及各种状态之间的转换" class="headerlink" title="线程有哪几种状态以及各种状态之间的转换"></a>线程有哪几种状态以及各种状态之间的转换</h2><ol><li>第一是 new-&gt;新建状态。在生成线程对象，并没有调用该对象的 start 方法，这是线程处于创建状态。</li><li>第二是 Runnable-&gt;就绪状态。当调用了线程对象的 start 方法之后，该线程就进入了就绪状态，但是此时线程调度程序还没有把该线程设置为当前线程，此时处于就绪状态。</li><li>第三是 Running-&gt;运行状态。线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行 run 函数当中的代码。</li><li>第四是阻塞状态。阻塞状态是线程因为某种原因放弃 CPU 使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：</li><li>等待 – 通过调用线程的 wait() 方法，让线程等待某工作的完成。</li><li>超时等待 – 通过调用线程的 sleep() 或 join()或发出了 I/O 请求时，线程会进入到阻塞状态。当 sleep()状态超时、join()等待线程终止或者超时、或者 I/O 处理完毕时，线程重新转入就绪状态。</li><li>同步阻塞 – 线程在获取 synchronized 同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态。</li><li>第五是 dead-&gt;死亡状态: 线程执行完了或者因异常退出了 run()方法，该线程结束生命周期.</li></ol><h2 id="什么是上下文切换"><a href="#什么是上下文切换" class="headerlink" title="什么是上下文切换"></a>什么是上下文切换</h2><p>概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换回这个任务时，可以再加载这个任务的状态。任务从保存到再加载的过程就是一次上下文切换。</p><h2 id="守护线程和用户线程有什么区别"><a href="#守护线程和用户线程有什么区别" class="headerlink" title="守护线程和用户线程有什么区别"></a>守护线程和用户线程有什么区别</h2><ul><li>在 Java 语言中线程分为两类：用户线程和守护线程，默认情况下我们创建的线程或线程池都是用户线程，</li><li>守护线程是为用户线程服务的，当一个程序中的所有用户线程都执行完成之后程序就会结束运行，程序结束运行时不会管守护线程是否正在运行，</li><li>由此我们可以看出守护线程在 Java 体系中权重是比较低的，这就是守护线程和用户线程的区别。</li></ul><h2 id="创建线程的-4-种方式"><a href="#创建线程的-4-种方式" class="headerlink" title="创建线程的 4 种方式"></a>创建线程的 4 种方式</h2><p>（1）继承 Thread 抽象，重写其的 run 方法，在程序的运行接口中，创建这个继承 Thread 抽象类的对象，使用 start 方法开启线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QfJava</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">QfJava</span> <span class="variable">qf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QfJava</span>();</span><br><span class="line">        qf.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）实现 Runnable 接口，通过实现 Runnable 接口，在程序运行的主接口中创建相对应的对象，然后创建 Thread 对象，使用 thread 对象调用 start（）方法来开启线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QfJava</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;runnable接口&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">QfJava</span>());</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）使用 Callable 和 Future 创建线程<br>上面的两种方式都有这两个问题：</p><ol><li>无法获取子线程的返回值</li><li>run 方法不可以抛出异常<br>为了解决这两个问题，我们就需要用到 Callable 这个接口了。说到接口，上面的 Runnable 接口实现类实例是作为 Thread 类的构造函数的参数传入的，之后通过 Thread 的 start 执行 run 方法中的内容。但是 Callable 并不是 Runnable 的子接口，是个全新的接口，它的实例不能直接传入给 Thread 构造，所以需要另一个接口来转换一下。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;  i的值：&quot;</span>+ i);</span><br><span class="line">        <span class="keyword">return</span> i++; <span class="comment">//call方法可以有返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Callable</span> <span class="variable">callable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">FutureTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(callable);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(task,<span class="string">&quot;子线程&quot;</span>+ i).start();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取子线程的返回值</span></span><br><span class="line">                System.out.println(<span class="string">&quot;子线程返回值：&quot;</span>+task.get() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;  <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多线程的应用场景"><a href="#多线程的应用场景" class="headerlink" title="多线程的应用场景"></a>多线程的应用场景</h2><ol><li>比如说上课会用到的 VNC 同时共享屏幕给多个电脑；</li><li>迅雷开启多条线程一起下载；</li><li>QQ 同时和多个人一起视频；</li><li>服务器同时处理多个客户端请求等等。</li></ol><h2 id="sleep-和-wait-的区别"><a href="#sleep-和-wait-的区别" class="headerlink" title="sleep() 和 wait() 的区别"></a>sleep() 和 wait() 的区别</h2><p>两者都可以暂停线程的执行，调用方法时都会抛出 InterruptedException 异常</p><ol><li>类的不同：sleep() 是 Thread 线程类的静态方法，wait() 是 Object 类的方法。</li><li>是否释放锁：sleep() 不释放锁；wait() 释放锁。</li><li>用途不同：wait() 方法通常被用于线程间交互/通信，sleep() 通常被用于暂停线程执行。</li><li>用法不同：wait() 方法被调用后，线程不会自动苏醒，<br>需要别的线程调用同一个对象上的 notify() 或者 notifyAll() 方法。<br>或者可以使用 wait(long timeout)超时后线程会自动苏醒。<br>sleep() 方法执行完成后，线程会自动苏醒。</li></ol><p>（4）线程池创建线程</p><h2 id="线程同步和线程互斥"><a href="#线程同步和线程互斥" class="headerlink" title="线程同步和线程互斥"></a>线程同步和线程互斥</h2><ol><li>线程的同步：<br>当一个线程对共享的数据进行操作时，应使之成为一个”原子操作“，即在没有完成相关操作之前，不允许其他线程打断它，否则，就会破坏数据的完整性，必然会得到错误的处理结果，这就是线程的同步。</li><li>线程互斥：<br>线程互斥是指对于共享的进程系统资源，在各单个线程访问时的排它性。<br>当有若干个线程都要使用某一共享资源时，任何时刻最多只允许一个线程去使用，其它要使用该资源的线程必须等待，直到占用资源者释放该资源。线程互斥可以看成是一种特殊的线程同步。</li></ol><h2 id="实现-Runnable-接口比继承-Thread-类的优势"><a href="#实现-Runnable-接口比继承-Thread-类的优势" class="headerlink" title="实现 Runnable 接口比继承 Thread 类的优势"></a>实现 Runnable 接口比继承 Thread 类的优势</h2><p>（1）适合多个相同的程序代码的线程去处理同一个资源<br>（2）可以避免 java 中单继承的限制<br>（3）线程池中只能存放实现 Runnable 或者 callable 类线程，不能直接放入继承 Thread 类的线程。</p><h2 id="Runnable-和-Callable-的区别"><a href="#Runnable-和-Callable-的区别" class="headerlink" title="Runnable 和 Callable 的区别"></a>Runnable 和 Callable 的区别</h2><p>Runnable 接口 run 方法无返回值；Callable 接口 call 方法有返回值，支持泛型</p><p>Runnable 接口 run 方法只能抛出运行时异常，且无法捕获处理；Callable 接口 call 方法允许抛出异常，可以获取异常信息</p><h2 id="什么是线程池，线程池的作用？"><a href="#什么是线程池，线程池的作用？" class="headerlink" title="什么是线程池，线程池的作用？"></a>什么是线程池，线程池的作用？</h2><p>线程池就是一个管理线程的一种手段，作用就是重用创建的线程，减少创建线程销毁线程造成资源浪费，形成资源隔离，提供了定时任务，周期执行任务，多个线程同时执行等功能。</p><h2 id="常见的几种线程池？"><a href="#常见的几种线程池？" class="headerlink" title="常见的几种线程池？"></a>常见的几种线程池？</h2><p>（1）FixedThreadPool 线程池，是一种有固定的长度的线程池，线程池里边没有非核心线程，当线程池中的线程没有被调用，线程会返回线程池中等待被调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">fixedThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            fixedThreadPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在运行线程&quot;</span>);</span><br><span class="line">                        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）CacheThreadPool 这种线程池就是没有核心线程，只有非核心线程，需要的时候就创建，不需要的时候不会回到线程池中，会被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">cachedThreadPool</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            cachedThreadPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在运行&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);<span class="comment">//只要一歇着，就会被回收</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）scheduledThreadPool 这种线程池是可以设置固定长度的核心线程，也有无限制的非核心线程，一般用来执行定时任务，以及周期性任务，核心线程不会被回收，非核心线程类会被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">scheduledThreadPool</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//执行定时任务</span></span><br><span class="line">scheduledThreadPool.schedule(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;延迟10秒执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">10</span>,TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">//执行固定时间重复执行的任务</span></span><br><span class="line">scheduledThreadPool.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;每三秒执行一次&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;,<span class="number">1</span>,<span class="number">3</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>（4）SingleThreadPool:这个线程池只有一条线程来执行任务，不能设置固定长度。</p><h2 id="创建线程池的方式"><a href="#创建线程池的方式" class="headerlink" title="创建线程池的方式"></a>创建线程池的方式</h2><p>1、使用 Executors 工具类创建线程池池<br>Executors 提供了一系列工厂方法用于创先线程池，返回的线程池都实现了 ExecutorService 接口。<br>主要有 newSingleThreadExecutor，newFixedThreadPool，newCachedThreadPool，newScheduledThreadPool</p><p>使用 Executors 工具类创建线程池池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; run()方法执行中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleThreadExecutorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">runnableTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            executorService.execute(runnableTest);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;线程任务开始执行&quot;</span>);</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用 ThreadPoolExecutor 构造函数创建线程池<br>《阿里巴巴 Java 开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写程序的同学更加明确线程池的运行规则，规避资源耗尽的风险</p><p>使用 ThreadPoolExecutor 构造函数创建线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> taskNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Task</span><span class="params">(<span class="type">int</span> taskNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.taskNum = taskNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 正在执行task &quot;</span> + taskNum);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">4000L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; task &quot;</span> + taskNum + <span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">200</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;Runnable&gt;(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task</span>(i);</span><br><span class="line">            threadPoolExecutor.execute(task);</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 线程池中线程数目：&quot;</span> + threadPoolExecutor.getPoolSize() + <span class="string">&quot;，队列中等待执行的任务数目：&quot;</span> +</span><br><span class="line">                    threadPoolExecutor.getQueue().size() + <span class="string">&quot;，已执行完的任务数目：&quot;</span> + threadPoolExecutor.getCompletedTaskCount());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        threadPoolExecutor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Executors-和-ThreaPoolExecutor-创建线程池的区别"><a href="#Executors-和-ThreaPoolExecutor-创建线程池的区别" class="headerlink" title="Executors 和 ThreaPoolExecutor 创建线程池的区别"></a>Executors 和 ThreaPoolExecutor 创建线程池的区别</h2><p>《阿里巴巴 Java 开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写程序的同学更加明确线程池的运行规则，规避资源耗尽的风险</p><p>Executors 各个方法的弊端：</p><ul><li>newFixedThreadPool 和 newSingleThreadExecutor：主要问题是堆积的请求处理队列可能会耗费非常大的内存，甚至 OOM。</li><li>newCachedThreadPool 和 newScheduledThreadPool：主要问题是线程数最大数是 Integer.MAX_VALUE，可能会创建数量非常多的线程，甚至 OOM。</li></ul><p>ThreaPoolExecutor 创建线程池方式只有一种，就是走它的构造函数，参数自己指定</p><h2 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h2><p><strong>ThreadPoolExecutor.AbortPolicy</strong>（系统默认）： 丢弃任务并抛出 RejectedExecutionException 异常，让你感知到任务被拒绝了，我们可以根据业务逻辑选择重试或者放弃提交等策略</p><p><strong>ThreadPoolExecutor.DiscardPolicy</strong>： 也是丢弃任务，但是不抛出异常，相对而言存在一定的风险，因为我们提交的时候根本不知道这个任务会被丢弃，可能造成数据丢失。<strong>ThreadPoolExecutor.DiscardOldestPolicy</strong>： 丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程），通常是存活时间最长的任务，它也存在一定的数据丢失风险 ThreadPoolExecutor.CallerRunsPolicy：既不抛弃任务也不抛出异常，而是将某些任务回退到调用者，让调用者去执行它。</p><h2 id="线程池的关闭（了解）"><a href="#线程池的关闭（了解）" class="headerlink" title="线程池的关闭（了解）"></a>线程池的关闭（了解）</h2><p>关闭线程池，可以通过 shutdown 和 shutdownNow 两个方法原理：遍历线程池中的所有线程，然后依次中断<br>1、shutdownNow 首先将线程池的状态设置为 STOP,然后尝试停止所有的正在执行和未执行任务的线程，并返回等待执行任务的列表；<br>2、shutdown 只是将线程池的状态设置为 SHUTDOWN 状态，然后中断所有没有正在执行任务的线程</p><h2 id="ThreadLocal-是什么？有哪些使用场景？什么是线程局部变量？"><a href="#ThreadLocal-是什么？有哪些使用场景？什么是线程局部变量？" class="headerlink" title="ThreadLocal 是什么？有哪些使用场景？什么是线程局部变量？"></a>ThreadLocal 是什么？有哪些使用场景？什么是线程局部变量？</h2><p><strong>ThreadLocal</strong> 是一个本地线程局部变量工具类，在每个线程中都创建了一个 ThreadLocalMap 对象，简单说 ThreadLocal 就是一种以空间换时间的做法，每个线程可以访问自己内部 ThreadLocalMap 对象内的 value。通过这种方式，避免资源在多线程间共享。</p><p><strong>原理</strong>：线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java 提供 ThreadLocal 类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。</p><p><strong>经典的使用场景</strong>是为每个线程分配一个 JDBC 连接 Connection。这样就可以保证每个线程的都在各自的 Connection 上进行数据库的操作，不会出现 A 线程关了 B 线程正在使用的 Connection；还有 Session 管理 等问题。</p><h2 id="同步锁、死锁、乐观锁、悲观锁"><a href="#同步锁、死锁、乐观锁、悲观锁" class="headerlink" title="同步锁、死锁、乐观锁、悲观锁"></a>同步锁、死锁、乐观锁、悲观锁</h2><h3 id="同步锁"><a href="#同步锁" class="headerlink" title="同步锁"></a>同步锁</h3><p><strong>同步锁</strong>：当多个线程同时访问同一个数据时，很容易出现问题。为了避免这种情况出现，我们要保证线程同步互斥，就是指并发执行的多个线程，在同一时间内只允许一个线程访问共享数 据。Java 中可以使用 synchronized 关键字来取得一个对象的同步锁。</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p><strong>死锁</strong>：何为死锁，就是两个线程以上去争夺同一资源，或者是线程执行顺序不当，导致占有资源的线程一直占有资源，而其他线程一直处在等待的状态。</p><h4 id="形成死锁的四个必要条件"><a href="#形成死锁的四个必要条件" class="headerlink" title="形成死锁的四个必要条件"></a>形成死锁的四个必要条件</h4><ol><li>互斥条件：该资源任意一个时刻只由一个线程占用。</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件:线程已获得的资源在末使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</li><li>循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</li></ol><h4 id="如何避免线程死锁"><a href="#如何避免线程死锁" class="headerlink" title="如何避免线程死锁"></a>如何避免线程死锁</h4><p>破坏任一条件就可以解除死锁</p><ol><li>破坏“不可剥夺”条件：一个进程不能获得所需要的全部资源时便处于等待状态，等待期间他占有的资源将被隐式的释放重新加入到 系统的资源列表中，可以被其他的进程使用，而等待的进程只有重新获得自己原有的资源以及新申请的资源才可以重新启动，执行。</li><li>破坏”请求与保持条件“：第一种方法静态分配即每个进程在开始执行时就申请他所需要的全部资源。第二种是动态分配即每个进程在申请所需要的资源时他本身不占用系统资源。</li><li>破坏“循环等待”条件：采用资源有序分配。其基本思想是将系统中的所有资源顺序编号，将紧缺的，稀少的采用较大的编号，在申请资源时必须按照编号的顺序进行，一个线程只有获得较小编号的资源才能申请较大编号的资源。<br>简而言之：<br>（1）一次性把资源全分配好<br>（2）等待期间，把手里的资源释放掉，只有手里资源满足时，再唤醒线程<br>（3）将资源编号，按稀缺程度从小到大，稀缺资源会大编号。各线程必须按编号申请资源。</li></ol><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p><strong>乐观锁</strong>：总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和 CAS 算法实现。CAS 就是乐观锁。</p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p><strong>悲观锁</strong>：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时 候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程）。synchronized 就是悲观锁。</p><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p><strong>synchronized</strong> 提供的是同步锁的概念，是阻塞的悲观锁，synchronized 能够修饰代码块，方法，用来防止多个线程同时执行，只有一个持有锁的线程把 synchronized 中代码执行完成后，其他线程才可以执行这段被修饰的代码块或者方法，保证了线程的可见性和原子性、有序性。</p><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p><strong>volatile</strong> 关键字只能修饰变量，修饰的范围较小。</p><ol><li>保证共享数据的可见性，在多线程中，Volatile 关键修饰的共享变量，当一个线程对这个变量进行修改的时候，其他线程对于这个值的变化是可见的。<br>不使用 Volatile 时候，多线程共享数据的时候使用 Volatile 修饰变量的时候<br>线程 1 对数值修改后会把数据的变化直接在缓存 1 和声明的地方直接改变，这个时候线程 2 再去读取数据的时候就是新的数据，也就保证了共享数据的可见性。</li><li>禁止指令重新排序，在多线程中 Volatile 关键字修饰的共享变量，其初始化顺序不能够发生重新排序，只能是 123，如果不加 Volatile 关键字的话，因为 JVM 对于初始化变量进行优化了，321,132 等顺序也能创建对象成功。</li></ol><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p><strong>CAS</strong> 就是比较并替换的意思，在多线程中是乐观锁。CAS 中有三个值 A 内存地址 V 旧的值 B 新的值，会先判断 V 预期旧的值和内存地址 A 现有的值是不是一致的，如果不一致就表示这个值被其他线程修改了，这个线程重新对 B 进行循环加 1 再次执行 CAS 操作，如果 V 预期旧的值和内存地址 A 现有的值是一致的，就直接用 B 的值替换现有值。<br>CAS 有 3 个操作数，内存值 V，旧的预期值 A，要修改的新值 B。当且仅当预期值 A 和内存值 V 相同时，将内存值 V 修改为 B，否则什么都不做。<br>CAS 优点：<br>可以保证单个共享变量的原子操作。</p><h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><p>Lock 锁基于 Java 实现的锁，Lock 是一个接口类，常用的实现类有 ReentrantLock、ReentrantReadWriteLock，都是依赖与 AQS 类实现的。AQS 类结构中主要包含一个基于链表实现的等待队列 CLH，用于存储所有阻塞的线程；另外一个就是 state 变量，来表示加锁状态。</p><h2 id="synchronized-和-Lock-有什么区别"><a href="#synchronized-和-Lock-有什么区别" class="headerlink" title="synchronized 和 Lock 有什么区别"></a>synchronized 和 Lock 有什么区别</h2><ul><li>首先 synchronized 是 java 内置关键 字，在 jvm 层面 ，Lock 是个 java 类 ；</li><li>synchronized 无法判断是否获取锁的状态，Lock 可以判断是否获取到锁；</li><li>synchronized 会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock 需在 finally 中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；</li><li>用 synchronized 关键字的两个线程 1 和线程 2，如果当前线程 1 获得锁，线程 2 线程等待。如果线程 1 阻塞，线程 2 则会一直等待下去，而 Lock 锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；</li><li><p>synchronized 的锁可重入、不可中断、非公平，而 Lock 锁可重入、可判断、可公平</p></li><li><p>Lock 锁适合大量同步的代码的同步问题，synchronized 锁适合代码少量的同步问题。</p></li></ul><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><h2 id="什么是-Spring-IOC-容器？"><a href="#什么是-Spring-IOC-容器？" class="headerlink" title="什么是 Spring IOC 容器？"></a>什么是 Spring IOC 容器？</h2><p>控制反转即 IoC (Inversion of Control)，它把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的“控制反转”概念就是对对象组件控制权的转移，从程序代码本身转移到了外部容器。</p><p>Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。)</p><h2 id="什么是-Spring-的依赖注入-Dependency-Injection-？"><a href="#什么是-Spring-的依赖注入-Dependency-Injection-？" class="headerlink" title="什么是 Spring 的依赖注入(Dependency Injection)？"></a>什么是 Spring 的依赖注入(Dependency Injection)？</h2><p>控制反转 IoC 是一个很大的概念，可以有不同的实现方式。其主要实现方式有两种：依赖注入和依赖查找</p><p><strong>依赖注入</strong>：相对于 IoC 而言，依赖注入(DI)更加准确地描述了 IoC 的设计理念。所谓依赖注入（Dependency Injection），即组件之间的依赖关系由容器在应用系统运行期来决定，也就是由容器动态地将某种依赖关系的目标对象实例注入到应用系统中的各个关联的组件之中。组件不做定位查询，只提供普通的 Java 方法，让容器去决定依赖关系。</p><p>依赖查找（Dependency Lookup）：容器提供回调接口和上下文环境给组件。EJB 和 Apache Avalon 都使用这种方式。<br>依赖查找也有两种类型：依赖拖拽（DP）和上下文依赖查找(CDL)。</p><h2 id="SpringIOC-注入的几种方式？"><a href="#SpringIOC-注入的几种方式？" class="headerlink" title="SpringIOC 注入的几种方式？"></a>SpringIOC 注入的几种方式？</h2><p>Spring bean 的装配就是 Spring IOC 的注入，Bean 的装配方式有基于 XML 的装配，基于注解的装配和自动装配，其底层都是通过反射来实现创造方法。<br>基于 XML 的装配中，当注入一个 java 集合的时候，有以下三种标签<List>，<Map>,<set></p><p>（1）构造器注入（根据 index 索引对应实体类中构造方法的顺序），也就是在 Student 中有一个构造方法中形式参数的顺序分别是（id，name，age，sex，List<String> scoreList）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wgz.spring.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaoming&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;F&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&quot;语文&quot;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&quot;数学&quot;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）setter 方法注入，在 Student 实体类中有对应的属性的 setter 方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wgz.spring.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaoming&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;F&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>&quot;语文&quot;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>&quot;数学&quot;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）接口注入</p><p><strong>Spring 中@Autowired 和@Resource 的区别</strong></p><p>@Autowired 第一步是通过类型去查看 bean，如果只有一个就装配<br>第二步是如果按照类型查找到多个就通过变量名去查找，如果查找到就装配，不然就执行第三步<br>第三步通过添加@Qualifier(“bean 的名字”)通过添加这个注解，通过 bean 名字来装配</p><p>@Resource 第一步是通过变量名去查询，如果查找到就装配<br>否则就按照类型去查找，如果查找到一个就装配，如果查找到多个就执行第三步<br>第三步就是通过@Resource（”bean 名字”）来根据 bean 名字查找并装配</p><h2 id="Spring-事务失效的八种场景"><a href="#Spring-事务失效的八种场景" class="headerlink" title="Spring 事务失效的八种场景"></a>Spring 事务失效的八种场景</h2><p><strong>1. 抛出检查异常导致事务不能正确回滚</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">        <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">            accountMapper.update(to, amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>原因：Spring 默认只会回滚非检查异常</p></li><li><p>解法：配置 rollbackFor 属性</p><ul><li><code>@Transactional(rollbackFor = Exception.class)</code></li></ul></li></ul><p><strong>2. 业务方法内自己 try-catch 异常导致事务不能正确回滚</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">            <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">                accountMapper.update(to, amount);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>原因：事务通知只有捉到了目标抛出的异常，才能进行后续的回滚处理，如果目标自己处理掉异常，事务通知无法知悉</p></li><li><p>解法 1：异常原样抛出</p><ul><li>在 catch 块添加 <code>throw new RuntimeException(e);</code></li></ul></li><li><p>解法 2：手动设置 TransactionStatus.setRollbackOnly()</p><ul><li>在 catch 块添加 <code>TransactionInterceptor.currentTransactionStatus().setRollbackOnly();</code></li></ul></li></ul><p><strong>3. aop 切面顺序导致导致事务不能正确回滚</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">        <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">            accountMapper.update(to, amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Around(&quot;execution(* transfer(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        LoggerUtils.get().debug(<span class="string">&quot;log:&#123;&#125;&quot;</span>, pjp.getTarget());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>原因：事务切面优先级最低，但如果自定义的切面优先级和他一样，则还是自定义切面在内层，这时若自定义切面没有正确抛出异常…</p></li><li><p>解法 1、2：同情况 2 中的解法:1、2</p></li><li>解法 3：调整切面顺序，在 MyAspect 上添加 <code>@Order(Ordered.LOWEST_PRECEDENCE - 1)</code> （不推荐）</li></ul><p><strong>4. 非 public 方法导致的事务失效</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">        <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">            accountMapper.update(to, amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>原因：Spring 为方法创建代理、添加事务通知、前提条件都是该方法是 public 的</p></li><li><p>解法 1：改为 public 方法</p></li><li>解法 2：添加 bean 配置如下（不推荐）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> TransactionAttributeSource <span class="title function_">transactionAttributeSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnnotationTransactionAttributeSource</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. 父子容器导致的事务失效</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04.tx.app.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">        <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">            accountMapper.update(to, amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04.tx.app.controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> Service5 service;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        service.transfer(from, to, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App 配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;day04.tx.app.service&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="comment">// ... 有事务相关配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Web 配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;day04.tx.app&quot;)</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">    <span class="comment">// ... 无事务配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在配置了父子容器，WebConfig 对应子容器，AppConfig 对应父容器，发现事务依然失效</p><ul><li><p>原因：子容器扫描范围过大，把未加事务配置的 service 扫描进来</p></li><li><p>解法 1：各扫描各的，不要图简便</p></li><li><p>解法 2：不要用父子容器，所有 bean 放在同一容器</p></li></ul><p><strong>6. 调用本类方法导致传播行为失效</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        LoggerUtils.get().debug(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        bar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        LoggerUtils.get().debug(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>原因：本类方法调用不经过代理，因此无法增强</p></li><li><p>解法 1：依赖注入自己（代理）来调用</p></li><li><p>解法 2：通过 AopContext 拿到代理对象，来调用</p></li><li><p>解法 3：通过 CTW，LTW 实现功能增强</p></li></ul><p>解法 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service6</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Service6 proxy; <span class="comment">// 本质上是一种循环依赖</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        LoggerUtils.get().debug(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">System.out.println(proxy.getClass());</span><br><span class="line">proxy.bar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        LoggerUtils.get().debug(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法 2，还需要在 AppConfig 上添加 <code>@EnableAspectJAutoProxy(exposeProxy = true)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        LoggerUtils.get().debug(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        ((Service6) AopContext.currentProxy()).bar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        LoggerUtils.get().debug(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7. @Transactional 没有保证原子行为</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Service7.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">        logger.debug(<span class="string">&quot;更新前查询余额为: &#123;&#125;&quot;</span>, fromBalance);</span><br><span class="line">        <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">            accountMapper.update(to, amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBalance</span><span class="params">(<span class="type">int</span> accountNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountMapper.findBalanceBy(accountNo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码实际上是有 bug 的，假设 from 余额为 1000，两个线程都来转账 1000，可能会出现扣减为负数的情况</p><ul><li>原因：事务的原子性仅涵盖 insert、update、delete、select … for update 语句，select 方法并不阻塞</li></ul><p><strong>8. @Transactional 方法导致的 synchronized 失效</strong></p><p>针对上面的问题，能否在方法上加 synchronized 锁来解决呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Service7.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">        logger.debug(<span class="string">&quot;更新前查询余额为: &#123;&#125;&quot;</span>, fromBalance);</span><br><span class="line">        <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">            accountMapper.update(to, amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBalance</span><span class="params">(<span class="type">int</span> accountNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountMapper.findBalanceBy(accountNo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是不行，原因如下：</p><ul><li><p>synchronized 保证的仅是目标方法的原子性，环绕目标方法的还有 commit 等操作，它们并未处于 sync 块内</p></li><li><p>解法 1：synchronized 范围应扩大至代理方法调用</p></li><li>解法 2：使用 select … for update 替换 select</li></ul><h2 id="什么是-AOP"><a href="#什么是-AOP" class="headerlink" title="什么是 AOP"></a>什么是 AOP</h2><p>OOP(Object-Oriented Programming)面向对象编程，允许开发者定义纵向的关系，但并不适用于定义横向的关系，导致了大量重复代码，而不利于各个模块的重用。</p><p>AOP(Aspect-Oriented Programming)，一般称为面向切面编程，AOP 是 OOP 的延续，是软件开发中的一个热点，也是 Spring 框架中的一个重要内容，是函数式编程的一种衍生范型。利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h2 id="Spring-AOP-and-AspectJ-AOP-有什么区别？AOP-有哪些实现方式？"><a href="#Spring-AOP-and-AspectJ-AOP-有什么区别？AOP-有哪些实现方式？" class="headerlink" title="Spring AOP and AspectJ AOP 有什么区别？AOP 有哪些实现方式？"></a>Spring AOP and AspectJ AOP 有什么区别？AOP 有哪些实现方式？</h2><p>AOP 实现的关键在于代理模式，AOP 代理主要分为静态代理和动态代理。静态代理的代表为 AspectJ；动态代理则以 Spring AOP 为代表。</p><p>（1）AspectJ 是静态代理的增强，所谓静态代理，就是 AOP 框架会在编译阶段生成 AOP 代理类，因此也称为编译时增强，他会在编译阶段将 AspectJ(切面)织入到 Java 字节码中，运行的时候就是增强之后的 AOP 对象。</p><p>（2）Spring AOP 使用的动态代理，所谓的动态代理就是说 AOP 框架不会去修改字节码，而是每次运行时在内存中临时为方法生成一个 AOP 对象，这个 AOP 对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。</p><h2 id="JDK-动态代理和-CGLIB-动态代理的区别"><a href="#JDK-动态代理和-CGLIB-动态代理的区别" class="headerlink" title="JDK 动态代理和 CGLIB 动态代理的区别"></a>JDK 动态代理和 CGLIB 动态代理的区别</h2><p>Spring AOP 中的动态代理主要有两种方式，JDK 动态代理和 CGLIB 动态代理：</p><ul><li>JDK 动态代理只提供接口的代理，不支持类的代理。核心 InvocationHandler 接口和 Proxy 类，InvocationHandler 通过 invoke()方法反射来调用目标类中的代码，动态地将横切逻辑和业务编织在一起；接着，Proxy 利用 InvocationHandler 动态创建一个符合某一接口的的实例, 生成目标类的代理对象。</li><li>cglib 代理：基于父类的动态代理技术，如果代理类没有实现 InvocationHandler 接口，那么 Spring AOP 会选择使用 CGLIB 来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成指定类的一个子类对象，并覆盖其中特定方法并添加增强代码，从而实现 AOP。CGLIB 是通过继承的方式做的动态代理，因此如果某个类被标记为 final，那么它是无法使用 CGLIB 做动态代理的。</li></ul><p>静态代理与动态代理区别在于生成 AOP 代理对象的时机不同，相对来说 AspectJ 的静态代理方式具有更好的性能，但是 AspectJ 需要特定的编译器进行处理，而 Spring AOP 则无需特定的编译器处理。</p><h2 id="Bean-的生命周期"><a href="#Bean-的生命周期" class="headerlink" title="Bean 的生命周期"></a>Bean 的生命周期</h2><ol><li>实例化一个 Bean，也就是我们通常说的 new</li><li>按照 Spring 上下文对实例化的 Bean 进行配置，也就是 IOC 注入</li><li>如果这个 Bean 实现 dao 了 BeanNameAware 接口，会调用它实现的 setBeanName(String beanId)方法，此处传递的是 Spring 配置文件中 Bean 的 ID</li><li>如果这个 Bean 实现了 BeanFactoryAware 接口，会调用它实现的 setBeanFactory()， 传递的是 Spring 工厂本身（可以用这个方法获取到其他 Bean）</li><li>如果这个 Bean 实现了 ApplicationContextAware 接口，会调用 setApplicationContext(ApplicationContext)方法，传入 Spring 上下文，该方式同样可以实现步骤 4，但比 4 更好，以为 ApplicationContext 是 BeanFactory 的子接口，有更多的实现方法</li><li>如果这个 Bean 关联了 BeanPostProcessor 接口，将会调用 postProcessBeforeInitialization(Object obj, String s)方法，BeanPostProcessor 经常被用作是 Bean 内容的更改，并且由于这个是在 Bean 初始化结束时调用 After 方法，也可用于内存或缓存技术</li><li>如果这个 Bean 在 Spring 配置文件中配置了 init-method 属性会自动调用其配置的初始化方法</li><li>如果这个 Bean 关联了 BeanPostProcessor 接口，将会调用 postAfterInitialization(Object obj, String s)方法</li></ol><p>注意：以上工作完成以后就可以用这个 Bean 了，那这个 Bean 是一个 single 的，所以一般情况下我们调用同一个 ID 的 Bean 会是在内容地址相同的实例</p><ol><li>当 Bean 不再需要时，会经过清理阶段，如果 Bean 实现了 DisposableBean 接口，会调用其实现的 destroy 方法</li><li>最后，如果这个 Bean 的 Spring 配置中配置了 destroy-method 属性，会自动调用其配置的销毁方法</li></ol><h2 id="Bean-的循环依赖"><a href="#Bean-的循环依赖" class="headerlink" title="Bean 的循环依赖"></a>Bean 的循环依赖</h2><ul><li>单例 set 方法（包括成员变量）循环依赖，Spring 会利用三级缓存解决，无需额外配置<ul><li>一级缓存存放成品对象</li><li>二级缓存存放发生了循环依赖时的产品对象（可能是原始 bean，也可能是代理 bean)</li><li>三级缓存存放工厂对象，发生循环依赖时，会调用工厂获取产品</li></ul><ul><li>Spring 期望在初始化时创建代理，但如果发生了循环依赖，会由工厂提前创建代理，后续初始化时就不必重复创建代理</li><li>二级缓存的意义在于，如果提前创建了代理对象，在最后的阶段需要从二级缓存中获取此代理对象，作为最终结果</li></ul></li></ul><ul><li>构造方法及多例循环依赖解决办法<ul><li>@Lazy</li><li>@Scope</li><li>ObjectFactory &amp; ObjectProviderProvider</li></ul></li></ul><h2 id="Spring-MVC-的执行流程"><a href="#Spring-MVC-的执行流程" class="headerlink" title="Spring MVC 的执行流程"></a>Spring MVC 的执行流程</h2><ol><li>用户发送请求给 DispacherServlet</li><li>DispacherServlet 根据 URL 找到相对应的处理器映射器</li><li>处理器映射器生成相对应的处理器对象和拦截器返还给 DispacherServlet</li><li>DisPacherServlet 发送请求给处理器适配器</li><li>处理器适配器找到相对应的处理器</li><li>处理器处理后的返还给处理器适配器 ModelAndView</li><li>处理器适配器再把 ModelAndView 返还给 DispacherServlet</li><li>modelAndView 传递给视图解析器进行解析</li><li>视图解析器返回 view</li><li>DispacherServlet 通过 view 对前端视图进行渲染</li><li>用户看到相对应的 view<br>拦截器 Interceptor 与过滤器 Filter 的区别</li></ol><h2 id="拦截器和过滤器的区别"><a href="#拦截器和过滤器的区别" class="headerlink" title="拦截器和过滤器的区别"></a>拦截器和过滤器的区别</h2><div class="table-container"><table><thead><tr><th>类型</th><th>过滤器 Filter</th><th>拦截器 interceptor</th></tr></thead><tbody><tr><td>规范</td><td>Filter 是在 Servlet 规范中定义的，是 Servlet 容器支持的</td><td>拦截器是在 Spring 容器内的，是 Spring 框架支持的</td></tr><tr><td>使用范围</td><td>过滤器只能用于 Web 程序中</td><td>拦截器既可以用于 Web 程序，也可以用于 Application、Swing 程序中</td></tr><tr><td>原理</td><td>过滤器是基于函数回调</td><td>拦截器是基于 java 的反射机制</td></tr><tr><td>使用的资源</td><td>过滤器不能使用 Spring 资源</td><td>拦截器是一个 Spring 的组件，归 Spring 管理，配置在 Spring 文件中，因此能使用 Spring 里的任何资源、对象，例如 Service 对象、数据源、事务管理等，可以通过 loC 注入到拦截器</td></tr><tr><td>深度</td><td>Filter 在只在 Servlet 前后起作用</td><td>拦截器能够深入到方法前后、异常抛出前后等，因此拦截器的使用具有更大的弹性</td></tr></tbody></table></div><h2 id="Spring-中使用了那些设计模式"><a href="#Spring-中使用了那些设计模式" class="headerlink" title="Spring 中使用了那些设计模式"></a>Spring 中使用了那些设计模式</h2><ol><li>单例模式，在 Spring 中 bean 的默认作用域是 singleton 创建 bean 的时候，创建的 bean 只能是一个</li><li>工厂模式：在 Spring 使用工厂模式通过 beanFactory 或者 ApplicationText 创建对象</li><li>代理模式：在 Spring Aop 中面向切面的编程，底层就是动态代理模式</li><li>观察者模式：Spring 中事件驱动，表示一种对象与对象之间具有依赖关系，当一个对象发生变化的时候，这个对象所依赖的对象也会做出反应</li><li>适配器模式：在 SpingMVC 中处理器适配器根据根据处理器对象和拦截器对象找到相对应的处理器</li><li>控制反转和依赖注入，DI（Dependency Inject，依赖注入)，是实现控制反转的一种设计思想，依赖注入就是将实例变量传入到一个对象中去。</li><li>模板模式：Spring 处理数据库的精髓类 JdbcTemplate，它使用了模板的设计模式，即将流程固定化，比如数据库连接的获取，数据库连接的关闭等，然后将变化的部分交由子类或者回调函数实现。</li></ol><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h3 id="MyBatis-是什么？"><a href="#MyBatis-是什么？" class="headerlink" title="MyBatis 是什么？"></a>MyBatis 是什么？</h3><p>MyBatis 是一款优秀的持久层框架，一个半 ORM（对象关系映射）框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</p><h3 id="为什么说-Mybatis-是半自动-ORM-映射工具？它与全自动的区别在哪里？"><a href="#为什么说-Mybatis-是半自动-ORM-映射工具？它与全自动的区别在哪里？" class="headerlink" title="为什么说 Mybatis 是半自动 ORM 映射工具？它与全自动的区别在哪里？"></a>为什么说 Mybatis 是半自动 ORM 映射工具？它与全自动的区别在哪里？</h3><p>ORM（Object Relational Mapping），对象关系映射，是一种为了解决关系型数据库数据与简单 Java 对象（POJO）的映射关系的技术。</p><p>Hibernate 属于全自动 ORM 映射工具，使用 Hibernate 查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。</p><p>Mybatis 在查询关联对象或关联集合对象时，需要手动编写 sql 来完成，所以，称之为半自动 ORM 映射工具。</p><h3 id="Mybatis-优缺点"><a href="#Mybatis-优缺点" class="headerlink" title="Mybatis 优缺点"></a>Mybatis 优缺点</h3><p>优点</p><p>与传统的数据库访问技术相比，ORM 有以下优点：<br>简单灵活去耦合，减少代码量，可以和 spring 很好的集成</p><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个 jar 文件+配置几个 sql 映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis 不会对应用程序或者数据库的现有设计强加任何影响。sql 写在 xml 里，便于统一管理和优化。通过 sql 语句可以满足操作数据库的所有需求。</li><li>解除 sql 与程序代码的耦合：通过提供 DAO 层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql 和代码的分离，提高了可维护性。</li><li>提供 xml 标签，支持编写动态 sql。</li><li>与 JDBC 相比，减少了 50%以上的代码量，消除了 JDBC 大量冗余的代码，不需要手动开关连接</li><li>很好的与各种数据库兼容（因为 MyBatis 使用 JDBC 来连接数据库，所以只要 JDBC 支持的数据库 MyBatis 都支持）</li><li>提供映射标签，支持对象与数据库的字段映射；提供对象关系映射标签，支持对象关系组件维护</li><li>能够与 Spring 很好的集成</li></ul><p>缺点</p><ul><li>SQL 语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写 SQL 语句的功底有一定要求</li><li>SQL 语句依赖于数据库，导致数据库移植性差，不能随意更换数据库</li></ul><h3 id="Mybatis-中-和-的区别是什么"><a href="#Mybatis-中-和-的区别是什么" class="headerlink" title="Mybatis 中#{}和${}的区别是什么"></a>Mybatis 中#{}和${}的区别是什么</h3><p>（1）#{}在 Mybatis 相当于？号只是一个占位符 ${}在mybatis书写的sql语句中会把解析为对象，一般是用在动态对象。<br>（2）#{}可以有效的防止sql注入，${}不能防止 sql 注入<br>总结： 1.在传递数据的时候，最好用#可以防止 SQL 注入 2.在拼接 SQL 语句的时候，最好用$因为是原生</p><h3 id="MyBatis-的一级、二级缓存"><a href="#MyBatis-的一级、二级缓存" class="headerlink" title="MyBatis 的一级、二级缓存"></a>MyBatis 的一级、二级缓存</h3><ol><li><p>一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，MyBatis 默认打开一级缓存。</p></li><li><p>二级缓存与一级缓存机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同之处在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现 Serializable 序列化接口(可用来保存对象的状态)，可在它的映射文件中配置<cache/> 标签；</p></li><li><p>对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存 Namespaces)进行了 C/U/D 操作后，默认该作用域下所有缓存将被清理掉。</p></li></ol><h1 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h1><h2 id="数据库三大范式是什么"><a href="#数据库三大范式是什么" class="headerlink" title="数据库三大范式是什么"></a>数据库三大范式是什么</h2><ul><li>第一范式：要求任何一张表必须有主键，每一个字段原子性不可再分。</li><li>第二范式：建立在第一范式的基础之上，要求所有非主键字段完全依赖主键， 不要产生部分依赖。</li><li>第三范式：建立在第二范式的基础之上，要求所有非主键字段直接依赖主键， 不要产生传递依赖。</li></ul><p>面试最后加上这句话，精彩了</p><p>数据库设计三范式是理论上的。</p><p>实践和理论有的时候有偏差。 有的时候可能会存在冗余，但是为了减少表的连接次数，这样做也是合理的， 并且对于开发人员来说，sql 语句的编写难度也会降低。 最终的目的都是为了满足客户的需求，有的时候会拿冗余换执行速度。 因为在 sql 当中，表和表之间连接次数越多，效率越低。（笛卡尔积）</p><h2 id="SQL-的几种连接查询方式（内连接、外连接、全连接、联合查询）"><a href="#SQL-的几种连接查询方式（内连接、外连接、全连接、联合查询）" class="headerlink" title="SQL 的几种连接查询方式（内连接、外连接、全连接、联合查询）"></a>SQL 的几种连接查询方式（内连接、外连接、全连接、联合查询）</h2><h3 id="内连接（inner-join）"><a href="#内连接（inner-join）" class="headerlink" title="内连接（inner join）"></a>内连接（inner join）</h3><p>典型的联接运算，使用像 = 或 &lt;&gt; 之类的比较运算符）。包括相等联接和自然联接。</p><p>内联接使用比较运算符根据每个表共有的列的值匹配两个表中的行。例如，检索 students 和 courses 表中学生标识号相同的所有行。<br>查出的是两张表的交集，两张表都有的才查出来<br>SQL：</p><p>select * from 表 A inner join 表 B on 判断条件;</p><p>select * from 表 A, 表 B where 判断条件;</p><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><ol><li>左外连接（left join）以左表为主表（查询全部）， 右表为辅表（没有的显示 null）</li></ol><p>SQL：select * from 表 A left join 表 B on 判断条件;</p><ol><li>右外连接（right join）</li></ol><p>以右表为主表（查询全部）， 左表为辅表（没有的显示 null）</p><p>SQL：select * from 表 A right join 表 B on 判断条件;</p><h3 id="全连接（full-join）"><a href="#全连接（full-join）" class="headerlink" title="全连接（full join）"></a>全连接（full join）</h3><p>两个表的所有数据都展示出来</p><p>SQL：select * from 表 A full join 表 B on 判断条件;</p><h3 id="联合-合并-查询（union）"><a href="#联合-合并-查询（union）" class="headerlink" title="联合(合并)查询（union）"></a>联合(合并)查询（union）</h3><p>MySQL 不识别 FULL join，所以可以通过 union 来实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span>, ad.<span class="operator">*</span> <span class="keyword">from</span> test_a <span class="keyword">as</span> a <span class="keyword">left</span> <span class="keyword">join</span> test_a_description <span class="keyword">as</span> ad <span class="keyword">on</span> a.id<span class="operator">=</span>ad.parent_id</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span>, ad.<span class="operator">*</span> <span class="keyword">from</span> test_a <span class="keyword">as</span> a <span class="keyword">right</span> <span class="keyword">join</span> test_a_description <span class="keyword">as</span> ad <span class="keyword">on</span> a.id<span class="operator">=</span>ad.parent_id;</span><br></pre></td></tr></table></figure><p>五、区别分析<br>外连接：外连不但返回符合连接和查询条件的数据行，还返回不符合条件的一些行。\<br>外连接分三类：左外连接（LEFT OUTER JOIN）、右外连接（RIGHT OUTER JOIN）和全外连接（FULL OUTER JOIN）</p><p>三者的共同点是都返回符合连接条件和查询条件（即：内连接）的数据行。不同点如下：</p><p>左外连接：还返回左表中不符合连接条件单符合查询条件的数据行。</p><p>右外连接：还返回右表中不符合连接条件单符合查询条件的数据行。</p><p>全外连接：还返回左表中不符合连接条件单符合查询条件的数据行，并且还返回右表中不符合连接条件单符合查询条件的数据行。全外连接实际是上左外连接和右外连接的数学合集（去掉重复），即“全外 = 左外 UNION 右外”。</p><p>说明：左表就是在“（LEFT OUTER JOIN）”关键字左边的表。右表当然就是右边的了。在三种类型的外连接中，OUTER 关键字是可省略的。</p><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 引擎是 MySQL 5.1 及之前版本的默认引擎，它的特点是：</p><ul><li>不支持行锁，读取时对需要读到的所有表加锁，写入时则对表加排它锁</li><li>不支持事务</li><li>不支持外键</li><li>不支持崩溃后的安全恢复在表有读取查询的同时，支持往表中插入新纪录</li><li>支持 BLOB 和 TEXT 的前 500 个字符索引，支持全文索引</li><li>支持延迟更新索引，极大提升写入性能</li><li>对于不会进行修改的表，支持压缩表，极大减少磁盘空间占用</li></ul><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 在 MySQL 5.5 后成为默认索引，它的特点是：</p><ul><li>支持行锁，采用 MVCC 来支持高并发</li><li>支持事务</li><li>支持外键</li><li>支持崩溃后的安全恢复</li><li>不支持全文索引<br>总体来讲，MyISAM 适合 SELECT 密集型的表，而 InnoDB 适合 INSERT 和 UPDATE 密集型-</li></ul><h3 id="MySQL-存储引擎-MyISAM-与-InnoDB-区别"><a href="#MySQL-存储引擎-MyISAM-与-InnoDB-区别" class="headerlink" title="MySQL 存储引擎 MyISAM 与 InnoDB 区别"></a>MySQL 存储引擎 MyISAM 与 InnoDB 区别</h3><div class="table-container"><table><thead><tr><th></th><th>Innodb</th><th>MyISAM</th></tr></thead><tbody><tr><td>存储结构</td><td>每张表都保存在同一个数据文件中</td><td>每张表被存放在三个文件：表定义文件、数据文件、索引文件</td></tr><tr><td>数据和索引存储方式</td><td>数据和索引是集中存储的，查询时做到覆盖索引会非常高效</td><td>数据和索引是分开存储的，索引的叶子节点存储的是行数据地址，需要再寻址一次才能得到数据</td></tr><tr><td>记录存储顺序</td><td>按主键大小有序插入</td><td>按记录插入顺序保存</td></tr><tr><td>索引</td><td>聚簇索引</td><td>非聚簇索引</td></tr><tr><td>索引的实现方式</td><td>B+树索引，Innodb 是索引组织表</td><td>B+树索引，myisam 是堆表</td></tr><tr><td>全文索引</td><td>不支持</td><td>支持</td></tr><tr><td>哈希索引</td><td>支持不支持</td></tr><tr><td>外键</td><td>支持</td><td>不支持</td></tr><tr><td>事务</td><td>支持不支持</td></tr><tr><td>锁粒度（锁是避免资源争用的一个机制，MySQL 锁对用户几乎是透明的）</td><td>行级锁定、表级锁定，锁定力度越小并发能力越高</td><td>表级锁定</td></tr><tr><td>SELECT</td><td></td><td>MyISAM 更优</td></tr><tr><td>select count(*)</td><td></td><td>myisam 更快，因为 myisam 内部维护了一个计数器，可以直接调取。</td></tr><tr><td>INSERT、UPDATE、DELETE</td><td>InnoDB 更优</td></tr></tbody></table></div><p><strong>MyISAM</strong>：适用于管理非事务表，它提供高速存储和检索， 以及全文搜索能力的场景。比如博客系统、新闻门户网站。<br><strong>InnoDB</strong>：适用于更新操作频繁，或者要保证数据的完整性，并发量高，支持事务和外键的场景。比如 OA 自动化办公系统。<br>如果没有特别的需求，使用默认的 Innodb 即可。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="什么是索引？"><a href="#什么是索引？" class="headerlink" title="什么是索引？"></a>什么是索引？</h3><p>索引是一种数据结构，是数据库管理系统中一个排序的数据结构，以协助快速查询数据库表中数据。索引的实现通常使用 B+树或 hash 表。<br>更通俗的说，索引就相当于目录。为了方便查找书中的内容，通过对内容建立索引形成目录。</p><h3 id="索引有哪些优缺点？"><a href="#索引有哪些优缺点？" class="headerlink" title="索引有哪些优缺点？"></a>索引有哪些优缺点？</h3><p>索引的优点</p><ul><li>可以大大加快数据的检索速度，这也是创建索引的最主要的原因。</li><li>通过使用索引，可以在查询的过程中，使用优化器，提高系统的性能。</li></ul><p>索引的缺点</p><ul><li>时间方面：创建索引和维护索引要耗费时间，具体地，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，会降低增/删/改的执行效率；</li><li>空间方面：索引需要占物理空间。</li></ul><h3 id="索引有哪几种类型？"><a href="#索引有哪几种类型？" class="headerlink" title="索引有哪几种类型？"></a>索引有哪几种类型？</h3><p><strong>主键索引</strong>：数据列不允许重复，不允许为 NULL，一个表只能有一个主键。</p><p><strong>唯一索引</strong>：数据列不允许重复，允许为 NULL 值，一个表允许多个列创建唯一索引。</p><ul><li>可以通过 ALTER TABLE table_name ADD UNIQUE (column); 创建唯一索引</li><li>可以通过 ALTER TABLE table_name ADD UNIQUE (column1,column2); 创建唯一组合索引</li></ul><p><strong>普通索引</strong>：基本的索引类型，没有唯一性的限制，允许为 NULL 值，一个表允许多个列创建普通索引。</p><ul><li>可以通过 ALTER TABLE table_name ADD INDEX index_name (column);创建普通索引</li><li>可以通过 ALTER TABLE table_name ADD INDEX index_name(column1, column2, column3);创建组合索引</li></ul><p><strong>全文索引</strong>：是目前搜索引擎使用的一种关键技术，MyISAM 存储引擎才有全文索引。</p><ul><li>可以通过 ALTER TABLE table_name ADD FULLTEXT (column);创建全文索引</li></ul><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis-有哪些数据类型"><a href="#Redis-有哪些数据类型" class="headerlink" title="Redis 有哪些数据类型"></a>Redis 有哪些数据类型</h2><p>Redis 主要有 5 种数据类型，包括 String，List，Hash，Set，Zset，满足大部分的使用要求<br>三种特殊数据类型<br>Geospatial(地理位置)，<br>Hyperloglog(基数统计)<br>BitMaps(位图)</p><h2 id="Redis-有哪些优缺点"><a href="#Redis-有哪些优缺点" class="headerlink" title="Redis 有哪些优缺点"></a>Redis 有哪些优缺点</h2><p><strong>优点</strong></p><ul><li>读写性能优异， Redis 能读的速度是 110000 次/s，写的速度是 81000 次/s。</li><li>支持数据持久化，支持 AOF 和 RDB 两种持久化方式。</li><li>数据结构丰富，除了支持 string 类型的 value 外还支持 hash、set、zset、list 等数据结构。</li><li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。</li><li>支持事务，Redis 的所有操作都是原子性的，同时 Redis 还支持对几个操作合并后的原子性执行。</li></ul><p><strong>缺点</strong></p><ul><li>数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此 Redis 适合的场景主要局限在较小数据量的高性能操作和运算上。</li><li>Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费</li><li>Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的 IP 才能恢复。</li><li>主机宕机，宕机前有部分数据未能及时同步到从机，切换 IP 后还会引入数据不一致的问题，降低了系统的可用性。</li></ul><h2 id="Redis-为什么这么快"><a href="#Redis-为什么这么快" class="headerlink" title="Redis 为什么这么快"></a>Redis 为什么这么快</h2><ol><li>完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是 O(1)；</li><li>数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的；</li><li>采用单线程，避免了不必要的上下文切换和竞争，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</li><li>使用 I/O 多路复用模型，非阻塞 IO；</li></ol><h2 id="Redis-的应用场景"><a href="#Redis-的应用场景" class="headerlink" title="Redis 的应用场景"></a>Redis 的应用场景</h2><ol><li>计数器 常规计数：微博数，粉丝数等。</li><li>缓存</li><li>会话缓存</li><li>全页缓存（FPC）</li><li>排行榜应用</li><li>查找表</li><li>消息队列(发布/订阅功能)</li></ol><h2 id="Redis-持久化机制"><a href="#Redis-持久化机制" class="headerlink" title="Redis 持久化机制"></a>Redis 持久化机制</h2><p>Redis 提供两种持久化机制 RDB（默认） 和 AOF 机制:</p><p><strong>RDB 持久化</strong>：是 Redis DataBase 缩写，快照<br>RDB 是 Redis 默认的持久化方式。按照一定的时间间隔将内存的数据以快照的形式保存到硬盘中，对应产生的数据文件为 dump.rdb。通过配置文件中的 save 参数来定义快照的周期。</p><p><strong>AOF 持久化</strong>：Append Only File 缩写<br>将 Redis 执行的每条写命令记录到单独的 aof 日志文件中，当重启 Redis 服务时，会从持久化的日志文件中恢复数据。<br>当两种方式同时开启时，数据恢复时，Redis 会优先选择 AOF 恢复。</p><h2 id="缓存异常"><a href="#缓存异常" class="headerlink" title="缓存异常"></a>缓存异常</h2><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩是指缓存同一时间大面积的失效，导致所有的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p><p>解决方案</p><ol><li>缓存数据过期时间随机：过期时间设置随机，防止同一时间大量数据过期现象发生。</li><li>热点数据不设置过期时间，主动刷新缓存：缓存设置成永不过期，在更新或删除 DB 中的数据时，也主动地把缓存中的数据更新或删除掉。</li><li>检查更新：缓存依然保持设置过期时间，每次 get 缓存的时候，都和数据的过期时间和当前时间进行一下对比，当间隔时间小于一个阈值的时候，主动更新缓存。</li><li>使用锁：通过互斥锁或者队列，控制读数据库和写缓存的线程数量。</li></ol><h3 id="缓存穿透-查不到"><a href="#缓存穿透-查不到" class="headerlink" title="缓存穿透(查不到)"></a>缓存穿透(查不到)</h3><p>缓存穿透是指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p><p>解决方案</p><ol><li>接口层增加逻辑校验，如用户鉴权校验，id 做基础校验，id&lt;=0 的直接拦截；</li><li>‘缓存空对象’一次请求若在’缓存和数据库中都没找到’，就在缓存中放一个’空对象用于处理后续’这个请求。</li><li>采用’布隆过滤器’，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力</li></ol><h3 id="缓存击穿（量太大，缓存过期）"><a href="#缓存击穿（量太大，缓存过期）" class="headerlink" title="缓存击穿（量太大，缓存过期）"></a>缓存击穿（量太大，缓存过期）</h3><p>微博热搜，服务器宕机(60 秒过期，60.1 秒回复，这 0.1 秒的间隔 ==&gt; 瞬间全部砸在 mysql 服务器上)<br>概念<br>这里需要注意和缓存击穿的区别，缓存击穿，是指一个 key 非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个 key 在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p><p>当某个 key 在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p><p>解决方案</p><ol><li>设置热点数据永不过期这样就不会出现热点数据过期的情况，但是当 Redis 内存空间满的时候也会清理部分数据，而且此种方案会占用空间，一旦热点数据多了起来，就会占用部分空间。</li><li>加互斥锁(分布式锁)在访问 key 之前，采用 SETNX（set if not exists）来设置另一个短期 key 来锁住当前 key 的访问，访问结束再删除该短期 key。保证同时刻只有一个线程访问。这样对锁的要求就十分高。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JAVA-基础&quot;&gt;&lt;a href=&quot;#JAVA-基础&quot; class=&quot;headerlink&quot; title=&quot;JAVA 基础&quot;&gt;&lt;/a&gt;JAVA 基础&lt;/h1&gt;&lt;h2 id=&quot;JDK、JRE、JVM-的区别&quot;&gt;&lt;a href=&quot;#JDK、JRE、JVM-的区别&quot; c</summary>
      
    
    
    
    <category term="面试" scheme="https://blog.dyfnb.xyz/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="java" scheme="https://blog.dyfnb.xyz/tags/java/"/>
    
    <category term="面试" scheme="https://blog.dyfnb.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel微服务保护</title>
    <link href="https://blog.dyfnb.xyz/posts/869739d7.html"/>
    <id>https://blog.dyfnb.xyz/posts/869739d7.html</id>
    <published>2022-12-12T06:33:50.000Z</published>
    <updated>2022-12-11T16:29:30.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sentinel-介绍"><a href="#Sentinel-介绍" class="headerlink" title="Sentinel 介绍"></a>Sentinel 介绍</h1><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。 Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p><a href="https://github.com/alibaba/Sentinel">Sentinel</a> 具有以下特征:</p><p><strong>丰富的应用场景</strong>： Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、实时熔断下游不可用应用等。</p><p><strong>完备的实时监控</strong>： Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</p><p><strong>广泛的开源生态</strong>： Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</p><p><strong>完善的 SPI 扩展点</strong>： Sentinel 提供简单易用、完善的 SPI 扩展点。您可以通过实现扩展点，快速的定制逻辑。例如定制规则管理、适配数据源等。</p><h2 id="服务保护技术对比"><a href="#服务保护技术对比" class="headerlink" title="服务保护技术对比"></a>服务保护技术对比</h2><div class="table-container"><table><thead><tr><th></th><th><strong>Sentinel</strong></th><th><strong>Hystrix</strong></th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离</td><td>线程池隔离/信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于慢调用比例或异常比例</td><td>基于失败比率</td></tr><tr><td>实时指标实现</td><td>滑动窗口</td><td>滑动窗口（基于 RxJava）</td></tr><tr><td>规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td></tr><tr><td>流量整形</td><td>支持慢启动、匀速排队模式</td><td>不支持</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td></tr><tr><td>控制台</td><td>开箱即用，可配置规则、查看秒级监控、机器发现等</td><td>不完善</td></tr><tr><td>常见框架的适配</td><td>Servlet、Spring Cloud、Dubbo、gRPC 等</td><td>Servlet、Spring Cloud Netflix</td></tr></tbody></table></div><h1 id="雪崩问题"><a href="#雪崩问题" class="headerlink" title="雪崩问题"></a>雪崩问题</h1><p>微服务中，服务间调用关系错综复杂，一个微服务往往依赖于多个其它微服务。如果服务提供者 I 发生了故障，当前的应用的部分业务因为依赖于服务 I，因此也会被阻塞。此时，其它不依赖于服务 I 的业务似乎不受影响。但是，依赖服务 I 的业务请求被阻塞，用户不会得到响应，则 tomcat 的这个线程不会释放，于是越来越多的用户请求到来，越来越多的线程会阻塞，服务器支持的线程和并发数有限，请求一直阻塞，会导致服务器资源耗尽，从而导致所有其它服务都不可用，那么当前服务也就不可用了。那么，依赖于当前服务的其它服务随着时间的推移，最终也都会变的不可用，形成级联失败，雪崩就发生了。</p><p><strong>雪崩问题</strong>：微服务之间相互调用，因为调用链中的一个服务故障，引起整个链路都无法访问的情况。</p><h2 id="解决雪崩问题的常见方法"><a href="#解决雪崩问题的常见方法" class="headerlink" title="解决雪崩问题的常见方法"></a>解决雪崩问题的常见方法</h2><p>解决雪崩问题的常见方式有四种：</p><ul><li>超时处理：设定超时时间，请求超过一定时间没有响应就返回错误信息，不会无休止等待</li><li>舱壁模式：限定每个业务能使用的线程数，避免耗尽整个 tomcat 的资源，因此也叫线程隔离。</li><li>熔断降级：由断路器统计业务执行的异常比例，如果超出阈值则会熔断该业务，拦截访问该业务的一切请求。</li><li>流量控制：限制业务访问的 QPS(每秒的访问次数)，避免服务因流量的突增而故障。</li></ul><h1 id="安装-Sentinel"><a href="#安装-Sentinel" class="headerlink" title="安装 Sentinel"></a>安装 Sentinel</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>sentinel 官方提供了 UI 控制台，方便我们对系统做限流设置。大家可以在<a href="https://github.com/alibaba/Sentinel/releases">GitHub</a>下载相应版本的 Sentinel。</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/y1AnZOpNMA.png" alt="Sentinel"></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>将 jar 包放到任意非中文目录，执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.8.4.jar</span><br></pre></td></tr></table></figure><p>如果要修改 Sentinel 的默认端口、账户、密码，可以通过下列配置：</p><div class="table-container"><table><thead><tr><th><strong>配置项</strong></th><th><strong>默认值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>server.port</td><td>8080</td><td>服务端口</td></tr><tr><td>sentinel.dashboard.auth.username</td><td>sentinel</td><td>默认用户名</td></tr><tr><td>sentinel.dashboard.auth.password</td><td>sentinel</td><td>默认密码</td></tr></tbody></table></div><p>例如，修改端口：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port=8090 -jar sentinel-dashboard-1.8.4.jar</span><br></pre></td></tr></table></figure><p>也可以前往 Sentinel 的<a href="https://github.com/alibaba/Sentinel/wiki/%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE%E9%A1%B9">官方文档</a>查看其启动配置项</p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>访问 <a href="http://ip:8080">http://ip:8080</a> 页面，就可以看到 sentinel 的控制台了：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221209161003.png" alt="image-20210715190827846"></p><p>需要输入账号和密码，默认都是：sentinel</p><h1 id="微服务整合-Sentinel"><a href="#微服务整合-Sentinel" class="headerlink" title="微服务整合 Sentinel"></a>微服务整合 Sentinel</h1><h2 id="引入-Sentinel-依赖"><a href="#引入-Sentinel-依赖" class="headerlink" title="引入 Sentinel 依赖"></a>引入 Sentinel 依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sentinel--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置-Sentinel"><a href="#配置-Sentinel" class="headerlink" title="配置 Sentinel"></a>配置 Sentinel</h2><p>在 application.yml 文件中配置 sentinel 控制台地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span> <span class="comment">#指定sentinel组件与sentinel dashboard组件通信端口，默认8719</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.5</span><span class="string">:8080</span> <span class="comment">#指定sentinel dashboard web 地址</span></span><br><span class="line">        <span class="attr">client-ip:</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.5</span> <span class="comment">#指定和控制台通信的IP，若不配置，会自动选择一个IP注册</span></span><br></pre></td></tr></table></figure><h2 id="触发-sentinel-的监控"><a href="#触发-sentinel-的监控" class="headerlink" title="触发 sentinel 的监控"></a>触发 sentinel 的监控</h2><p>访问任意端点(Controller)，才能触发 sentinel 的监控；然后再访问 sentinel 的控制台，查看效果：<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221209191538.png" alt="监控"></p><h1 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h1><h2 id="簇点链路"><a href="#簇点链路" class="headerlink" title="簇点链路"></a>簇点链路</h2><p>当请求进入微服务时，首先会访问 DispatcherServlet，然后进入 Controller、Service、Mapper，这样的一个调用链就叫做<strong>簇点链路</strong>。簇点链路中被监控的每一个接口就是一个<strong>资源</strong>。</p><p>默认情况下 sentinel 会监控 SpringMVC 的每一个端点（Endpoint，也就是 controller 中的方法），因此 SpringMVC 的每一个端点（Endpoint）就是调用链路中的一个资源。<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221209192551.png" alt="簇点链路"><br>流控、熔断等都是针对簇点链路中的资源来设置的，因此我们可以点击对应资源后面的按钮来设置规则：</p><ul><li>流控：流量控制</li><li>降级：降级熔断</li><li>热点：热点参数限流，是限流的一种</li><li>授权：请求的权限控制</li></ul><h2 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h2><p>为<code>/order/getByCount</code>资源设置流控规则<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221209194835.png" alt="流控规则"></p><ul><li>针对来源：从哪儿发来的请求需要被流控，default(一切请求)</li><li>QPS：并发量</li><li>单机阈值：QPS 上限(每秒最多处理的请求数量，超出的请求将会被拦截并报错)</li></ul><p>点击高级选项，可以选择三种<strong>流控模式</strong>：</p><ul><li>直接：统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认的模式</li><li>关联：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</li><li>链路：统计从指定链路访问到本资源的请求，触发阈值时，对指定链路限流</li></ul><h3 id="关联模式"><a href="#关联模式" class="headerlink" title="关联模式"></a>关联模式</h3><p><strong>关联模式</strong>：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</p><p><strong>配置规则</strong>：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221209195804.png" alt="关联模式"></p><p><strong>语法说明</strong>：当/add 资源访问量触发阈值时，就会对/order/getByCount 资源限流，避免影响/add 资源。</p><p><strong>使用场景</strong>：比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。业务需求是优先支付和更新订单的业务，因此当修改订单业务触发阈值时，需要对查询订单业务限流。</p><h3 id="链路模式"><a href="#链路模式" class="headerlink" title="链路模式"></a>链路模式</h3><p><strong>链路模式</strong>：只针对从指定链路访问到本资源的请求做统计，判断是否超过阈值。</p><p><strong>配置示例</strong>：</p><p>例如有两条请求链路：</p><ul><li><p>/test1 —&gt; /common</p></li><li><p>/test2 —&gt; /common</p></li></ul><p>如果只希望统计从/test2 进入到/common 的请求，则可以这样配置：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221209200315.png" alt="链路模式"></p><p><strong>注意</strong>：Sentinel 默认会将 Controller 方法做 context 整合，导致链路模式的流控失效，需要修改 application.yml，添加配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">web-context-unify:</span> <span class="literal">false</span> <span class="comment">#关闭context整合</span></span><br></pre></td></tr></table></figure><p><strong>实战案例</strong></p><p><strong>使用场景</strong>：有查询订单和创建订单业务，两者都需要查询商品。针对从查询订单进入到查询商品的请求统计，并设置限流。</p><h2 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h2><p>流控效果是指请求达到流控阈值时应该采取的措施，包括三种：</p><ul><li>快速失败：达到阈值后，新的请求会被立即拒绝并抛出 FlowException 异常。是默认的处理方式。</li><li>Warm up：预热模式，对超出阈值的请求同样是拒绝并抛出异常。但这种模式阈值会动态变化，从一个较小值逐渐增加到最大阈值。</li><li>排队等待：让所有的请求按照先后次序排队执行，两个请求的间隔不能小于指定时长</li></ul><h3 id="Warm-up"><a href="#Warm-up" class="headerlink" title="Warm up"></a>Warm up</h3><p>阈值一般是一个微服务能承担的最大 QPS，但是一个服务刚刚启动时，一切资源尚未初始化（<strong>冷启动</strong>），如果直接将 QPS 跑到最大值，可能导致服务瞬间宕机。</p><p>Warm up 也叫<strong>预热模式</strong>，是应对服务冷启动的一种方案。请求阈值初始值是 maxThreshold(最大阈值) / coldFactor(冷启动因子)，持续指定时长后，逐渐提高到 maxThreshold 值。而 coldFactor 的默认值是 3.<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221209202455.png" alt="Warm up"></p><h3 id="排队等待"><a href="#排队等待" class="headerlink" title="排队等待"></a>排队等待</h3><p>当请求超过 QPS 阈值时，快速失败和 warm up 会拒绝新的请求并抛出异常。</p><p>而排队等待则是让所有请求进入一个队列中，然后按照阈值允许的时间间隔依次执行。后来的请求必须等待前面执行完成，如果请求预期的等待时间超出最大时长，则会被拒绝。</p><p>工作原理</p><p>例如：QPS = 5，意味着每 200ms 处理一个队列中的请求；timeout = 2000，意味着<strong>预期等待时长</strong>超过 2000ms 的请求会被拒绝并抛出异常。</p><p>那什么叫做预期等待时长呢？</p><p>比如现在一下子来了 12 个请求，因为每 200ms 执行一个请求，那么：</p><ul><li>第 6 个请求的<strong>预期等待时长</strong> = 200 * （6 - 1） = 1000ms</li><li>第 12 个请求的预期等待时长 = 200 * （12-1） = 2200ms</li></ul><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221209202656.png" alt="排队等待"></p><h2 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流</h2><p><strong>热点参数限流</strong>是<strong>分别统计参数值相同的请求</strong>，判断是否超过 QPS 阈值。</p><p>配置示例：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221211142051.png" alt="热点参数限流"></p><p>代表的含义是：对 /order/add 这个资源的 0 号参数（第一个参数）做统计，每 1 秒<strong>相同参数值</strong>的请求数不能超过 5</p><h3 id="热点参数的高级配置"><a href="#热点参数的高级配置" class="headerlink" title="热点参数的高级配置"></a>热点参数的高级配置</h3><p><strong>注意事项</strong>：热点参数限流对默认的 SpringMVC 资源无效，需要利用@SentinelResource 注解标记资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(&quot;add&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Stock <span class="title function_">add</span><span class="params">(Integer count)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stockClient.add(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置热点参数限流的高级选项：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221211142659.png" alt="热点参数的高级配置"></p><p>结合上一个配置，这里的含义是对 0 号的 int 类型参数限流，每 1 秒相同参数的 QPS 不能超过 5，有两个例外：</p><p>•如果参数值是 100，则每 1 秒允许的 QPS 为 10</p><p>•如果参数值是 200，则每 1 秒允许的 QPS 为 15</p><h1 id="隔离和降级"><a href="#隔离和降级" class="headerlink" title="隔离和降级"></a>隔离和降级</h1><p>限流是一种预防措施，虽然限流可以尽量避免因高并发而引起的服务故障，但服务还会因为其它原因而故障。</p><p>而要将这些故障控制在一定范围，避免雪崩，就要靠<strong>线程隔离</strong>（舱壁模式）和<strong>熔断降级</strong>手段了。</p><p><strong>线程隔离</strong>：调用者在调用服务提供者时，给每个调用的请求分配独立线程池，出现故障时，最多消耗这个线程池内资源，避免把调用者的所有资源耗尽。</p><p><strong>熔断降级</strong>：是在调用方这边加入断路器，统计对服务提供者的调用，如果调用的失败比例过高，则熔断该业务，不允许访问该服务的提供者了。</p><p>不管是线程隔离还是熔断降级，都是对<strong>客户端</strong>（调用方）的保护。需要在<strong>调用方</strong> 发起远程调用时做线程隔离、或者服务熔断。</p><p>而我们的微服务远程调用都是基于 Feign 来完成的，因此我们需要将 Feign 与 Sentinel 整合，在 Feign 里面实现线程隔离和服务熔断。</p><h2 id="FeignClient-整合-Sentinel"><a href="#FeignClient-整合-Sentinel" class="headerlink" title="FeignClient 整合 Sentinel"></a>FeignClient 整合 Sentinel</h2><p>SpringCloud 中，微服务调用都是通过 Feign 来实现的，因此做客户端保护必须整合 Feign 和 Sentinel。</p><h3 id="修改配置，开启-sentinel-功能"><a href="#修改配置，开启-sentinel-功能" class="headerlink" title="修改配置，开启 sentinel 功能"></a>修改配置，开启 sentinel 功能</h3><p>修改 OrderService 的 application.yml 文件，开启 Feign 的 Sentinel 功能：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对sentinel的支持</span></span><br></pre></td></tr></table></figure><h3 id="编写失败降级逻辑"><a href="#编写失败降级逻辑" class="headerlink" title="编写失败降级逻辑"></a>编写失败降级逻辑</h3><p>业务失败后，不能直接报错，而应该返回用户一个友好提示或者默认结果，这个就是失败降级逻辑。</p><p>给 FeignClient 编写失败后的降级逻辑</p><p>① 方式一：FallbackClass，无法对远程调用的异常做处理</p><p>② 方式二：FallbackFactory，可以对远程调用的异常做处理，我们选择这种</p><p><strong>步骤一</strong>：在 feing-api 项目中定义类，实现 FallbackFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StockClientFallBackFactory</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;StockClient&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> StockClient <span class="title function_">create</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StockClient</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Stock <span class="title function_">getStockById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">                <span class="type">Stock</span> <span class="variable">stock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stock</span>();</span><br><span class="line">                stock.setName(<span class="string">&quot;4090显卡&quot;</span>);</span><br><span class="line">                stock.setCount(<span class="number">10</span>);</span><br><span class="line">                stock.setId(id);</span><br><span class="line">                System.err.println(<span class="string">&quot;失败降级！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> stock;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>步骤二</strong>：在 feing-api 项目中的 DefaultFeignConfiguration 类中将 StockClientFallBackFactory 注册为一个 Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> StockClientFallBackFactory <span class="title function_">stockClientFallBackFactory</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StockClientFallBackFactory</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>步骤三</strong>：在 feing-api 项目中的 UserClient 接口中使用 UserClientFallbackFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;stockService&quot;,fallbackFactory = StockClientFallBackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StockClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/stock/getStockById&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Stock <span class="title function_">getStockById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启后，访问一次订单查询业务，然后查看 sentinel 控制台，可以看到新的簇点链路：<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221211151111.png" alt="降级"></p><h2 id="线程隔离（舱壁模式）"><a href="#线程隔离（舱壁模式）" class="headerlink" title="线程隔离（舱壁模式）"></a>线程隔离（舱壁模式）</h2><h3 id="线程隔离的实现方式"><a href="#线程隔离的实现方式" class="headerlink" title="线程隔离的实现方式"></a>线程隔离的实现方式</h3><p>线程隔离有两种方式实现：</p><ul><li><p>线程池隔离</p></li><li><p>信号量隔离（Sentinel 默认采用）</p></li></ul><p>如图：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210716123036937.png" alt="image-20210716123036937"></p><p><strong>线程池隔离</strong>：给每个服务调用业务分配一个线程池，利用线程池本身实现隔离效果</p><p><strong>信号量隔离</strong>：不创建线程池，而是计数器模式，记录业务使用的线程数量，达到信号量上限时，禁止新的请求。</p><p>两者的优缺点：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210716123240518.png" alt="image-20210716123240518"></p><h3 id="sentinel-的线程隔离"><a href="#sentinel-的线程隔离" class="headerlink" title="sentinel 的线程隔离"></a>sentinel 的线程隔离</h3><p><strong>用法说明</strong>：</p><p>在添加限流规则时，可以选择两种阈值类型：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221211153700.png" alt="image-20210716123411217"></p><ul><li>QPS：就是每秒的请求数，在快速入门中已经演示过</li><li>线程数：是该资源能使用用的 tomcat 线程数的最大值。也就是通过限制线程数量，实现<strong>线程隔离</strong>（舱壁模式，sentinel 默认的线程隔离方式是<strong>信号量隔离</strong>）。</li></ul><h2 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h2><p>熔断降级是解决雪崩问题的重要手段。其思路是由<strong>断路器</strong>统计服务调用的异常比例、慢请求比例，如果超出阈值则会<strong>熔断</strong>该服务。即拦截访问该服务的一切请求；而当服务恢复时，断路器会放行访问该服务的请求。</p><p>断路器控制熔断和放行是通过状态机来完成的：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221211154706.png" alt="image-20210716130958518"></p><p>状态机包括三个状态：</p><ul><li>closed：关闭状态，断路器放行所有请求，并开始统计异常比例、慢请求比例。超过阈值则切换到 open 状态</li><li>open：打开状态，服务调用被<strong>熔断</strong>，访问被熔断服务的请求会被拒绝，快速失败，直接走降级逻辑。Open 状态 5 秒后会进入 half-open 状态</li><li>half-open：半开状态，放行一次请求，根据执行结果来判断接下来的操作。<ul><li>请求成功：则切换到 closed 状态</li><li>请求失败：则切换到 open 状态</li></ul></li></ul><p>断路器熔断策略有三种：慢调用、异常比例、异常数</p><h3 id="慢调用"><a href="#慢调用" class="headerlink" title="慢调用"></a>慢调用</h3><p><strong>慢调用</strong>：业务的响应时长（RT）大于指定时长的请求认定为慢调用请求。在指定时间内，如果请求数量超过设定的最小数量，慢调用比例大于设定的阈值，则触发熔断。<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221211155235.png" alt="慢调用"><br>解读：RT 超过 500ms 的调用是慢调用，统计最近 10000ms 内的请求，如果请求量超过 10 次，并且慢调用比例不低于 0.5，则触发熔断，熔断时长为 5 秒。然后进入 half-open 状态，放行一次请求做测试。</p><h3 id="异常比例和异常数"><a href="#异常比例和异常数" class="headerlink" title="异常比例和异常数"></a>异常比例和异常数</h3><p><strong>异常比例或异常数</strong>：统计指定时间内的调用，如果调用次数超过指定请求数，并且出现异常的比例达到设定的比例阈值（或超过指定异常数），则触发熔断。</p><p>异常比例：<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221211155601.png" alt="异常比例"><br>解读：统计最近 1000ms 内的请求，如果请求量超过 10 次，并且异常比例不低于 0.4，则触发熔断。<br>异常数：<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221211155754.png" alt="异常数"><br>解读：统计最近 1000ms 内的请求，如果请求量超过 10 次，并且异常比例不低于 2 次，则触发熔断。</p><h1 id="授权规则"><a href="#授权规则" class="headerlink" title="授权规则"></a>授权规则</h1><p>授权规则可以对请求方来源做判断和控制。</p><h2 id="授权规则-1"><a href="#授权规则-1" class="headerlink" title="授权规则"></a>授权规则</h2><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><p>授权规则可以对调用方的来源做控制，有白名单和黑名单两种方式。</p><ul><li>白名单：来源（origin）在白名单内的调用者允许访问</li><li>黑名单：来源（origin）在黑名单内的调用者不允许访问</li></ul><p>点击左侧菜单的授权，可以看到授权规则：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221211160919.png" alt="授权规则"></p><ul><li>资源名：就是受保护的资源，例如/order/{orderId}</li><li>流控应用：是来源者的名单，<ul><li>如果是勾选白名单，则名单中的来源被许可访问。</li><li>如果是勾选黑名单，则名单中的来源被禁止访问。</li></ul></li></ul><p>我们允许请求从 gateway 到 order-service，不允许浏览器访问 order-service，那么白名单中就要填写<strong>网关的来源名称（origin）</strong>。</p><h3 id="获取-origin"><a href="#获取-origin" class="headerlink" title="获取 origin"></a>获取 origin</h3><p>Sentinel 是通过 RequestOriginParser 这个接口的 parseOrigin 来获取请求的来源的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RequestOriginParser</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从请求request对象中获取origin，获取方式自定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">parseOrigin</span><span class="params">(HttpServletRequest request)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的作用就是从 request 对象中，获取请求者的 origin 值并返回。</p><p>默认情况下，sentinel 不管请求者从哪里来，返回值永远是 default，也就是说一切请求的来源都被认为是一样的值 default。</p><p>因此，我们需要自定义这个接口的实现，让<strong>不同的请求，返回不同的 origin</strong>。</p><h4 id="自定义-parseOrigin"><a href="#自定义-parseOrigin" class="headerlink" title="自定义 parseOrigin"></a>自定义 parseOrigin</h4><p>定义一个 RequestOriginParser 的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderOriginParser</span> <span class="keyword">implements</span> <span class="title class_">RequestOriginParser</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parseOrigin</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求头</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">origin</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;origin&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.非空判断</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(origin)) &#123;</span><br><span class="line">            origin = <span class="string">&quot;blank&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> origin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="给网关添加请求头"><a href="#给网关添加请求头" class="headerlink" title="给网关添加请求头"></a>给网关添加请求头</h4><p>既然获取请求 origin 的方式是从 reques-header 中获取 origin 值，我们必须让<strong>所有从 gateway 路由到微服务的请求都带上 origin 头</strong>。</p><p>这个需要利用之前学习的一个 GatewayFilter 来实现，AddRequestHeaderGatewayFilter。</p><p>修改 gateway 服务中的 application.yml，添加一个 defaultFilter：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=origin,gateway</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># ...略</span></span><br></pre></td></tr></table></figure><p>这样，从 gateway 路由的所有请求都会带上 origin 头，值为 gateway。而从其它地方到达微服务的请求则没有这个头。</p><h4 id="配置授权规则"><a href="#配置授权规则" class="headerlink" title="配置授权规则"></a>配置授权规则</h4><p>添加一个授权规则，放行 origin 值为 gateway 的请求。<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221211161939.png" alt="配置授权规则"></p><h2 id="自定义异常结果"><a href="#自定义异常结果" class="headerlink" title="自定义异常结果"></a>自定义异常结果</h2><p>默认情况下，发生限流、降级、授权拦截时，都会抛出异常到调用方。异常结果都是 flow limmiting（限流）。这样不够友好，无法得知是限流还是降级还是授权拦截。</p><h3 id="异常类型"><a href="#异常类型" class="headerlink" title="异常类型"></a>异常类型</h3><p>而如果要自定义异常时的返回结果，需要实现 BlockExceptionHandler 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BlockExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求被限流、降级、授权拦截时抛出的异常：BlockException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法有三个参数：</p><ul><li>HttpServletRequest request：request 对象</li><li>HttpServletResponse response：response 对象</li><li>BlockException e：被 sentinel 拦截时抛出的异常</li></ul><p>这里的 BlockException 包含多个不同的子类：</p><div class="table-container"><table><thead><tr><th><strong>异常</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>FlowException</td><td>限流异常</td></tr><tr><td>ParamFlowException</td><td>热点参数限流的异常</td></tr><tr><td>DegradeException</td><td>降级异常</td></tr><tr><td>AuthorityException</td><td>授权规则异常</td></tr><tr><td>SystemBlockException</td><td>系统规则异常</td></tr></tbody></table></div><h3 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h3><p>定义一个自定义异常处理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">BlockExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;未知异常&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">429</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FlowException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;请求被限流了&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParamFlowException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;请求被热点参数限流&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DegradeException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;请求被降级了&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AuthorityException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;没有权限访问&quot;</span>;</span><br><span class="line">            status = <span class="number">401</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        response.setStatus(status);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;&#123;\&quot;msg\&quot;: &quot;</span> + msg + <span class="string">&quot;, \&quot;status\&quot;: &quot;</span> + status + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化</h1><p>sentinel 的所有规则都是内存存储，重启后所有规则都会丢失。在生产环境下，我们必须确保这些规则的持久化，避免丢失。</p><h2 id="规则管理模式"><a href="#规则管理模式" class="headerlink" title="规则管理模式"></a>规则管理模式</h2><p>规则是否能持久化，取决于规则管理模式，sentinel 支持三种规则管理模式：</p><ul><li>原始模式：Sentinel 的默认模式，将规则保存在内存，重启服务会丢失。</li><li>pull 模式</li><li>push 模式</li></ul><h3 id="pull-模式"><a href="#pull-模式" class="headerlink" title="pull 模式"></a>pull 模式</h3><p>pull 模式：控制台将配置的规则推送到 Sentinel 客户端，而客户端会将配置规则保存在本地文件或数据库中。以后会定时去本地文件或数据库中查询，更新本地规则。<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221211165009.png" alt="pull 模式"></p><ul><li>优点：简单，无任何依赖；规则持久化</li><li>缺点：不保证一致性；实时性不保证，拉取过于频繁也可能会有性能问题。</li></ul><h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写持久化代码，实现-com-alibaba-csp-sentinel-init-InitFunc"><a href="#编写持久化代码，实现-com-alibaba-csp-sentinel-init-InitFunc" class="headerlink" title="编写持久化代码，实现 com.alibaba.csp.sentinel.init.InitFunc"></a>编写持久化代码，实现 com.alibaba.csp.sentinel.init.InitFunc</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FileDataSourceInit for : 自定义Sentinel存储文件数据源加载类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDataSourceInit</span> <span class="keyword">implements</span> <span class="title class_">InitFunc</span> &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">          <span class="comment">// TIPS: 如果你对这个路径不喜欢，可修改为你喜欢的路径</span></span><br><span class="line">          <span class="type">String</span> <span class="variable">ruleDir</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.home&quot;</span>) + <span class="string">&quot;/sentinel/rules&quot;</span>;</span><br><span class="line">          <span class="type">String</span> <span class="variable">flowRulePath</span> <span class="operator">=</span> ruleDir + <span class="string">&quot;/flow-rule.json&quot;</span>;</span><br><span class="line">          <span class="type">String</span> <span class="variable">degradeRulePath</span> <span class="operator">=</span> ruleDir + <span class="string">&quot;/degrade-rule.json&quot;</span>;</span><br><span class="line">          <span class="type">String</span> <span class="variable">systemRulePath</span> <span class="operator">=</span> ruleDir + <span class="string">&quot;/system-rule.json&quot;</span>;</span><br><span class="line">          <span class="type">String</span> <span class="variable">authorityRulePath</span> <span class="operator">=</span> ruleDir + <span class="string">&quot;/authority-rule.json&quot;</span>;</span><br><span class="line">          <span class="type">String</span> <span class="variable">hotParamFlowRulePath</span> <span class="operator">=</span> ruleDir + <span class="string">&quot;/param-flow-rule.json&quot;</span>;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">this</span>.mkdirIfNotExits(ruleDir);</span><br><span class="line">          <span class="built_in">this</span>.createFileIfNotExits(flowRulePath);</span><br><span class="line">          <span class="built_in">this</span>.createFileIfNotExits(degradeRulePath);</span><br><span class="line">          <span class="built_in">this</span>.createFileIfNotExits(systemRulePath);</span><br><span class="line">          <span class="built_in">this</span>.createFileIfNotExits(authorityRulePath);</span><br><span class="line">          <span class="built_in">this</span>.createFileIfNotExits(hotParamFlowRulePath);</span><br><span class="line">          <span class="comment">// 流控规则</span></span><br><span class="line">          ReadableDataSource&lt;String, List&lt;FlowRule&gt;&gt; flowRuleRDS = <span class="keyword">new</span> <span class="title class_">FileRefreshableDataSource</span>&lt;&gt;(</span><br><span class="line">                  flowRulePath,</span><br><span class="line">                  flowRuleListParser</span><br><span class="line">          );</span><br><span class="line">          <span class="comment">// 将可读数据源注册至FlowRuleManager</span></span><br><span class="line">          <span class="comment">// 这样当规则文件发生变化时，就会更新规则到内存</span></span><br><span class="line">          FlowRuleManager.register2Property(flowRuleRDS.getProperty());</span><br><span class="line">          WritableDataSource&lt;List&lt;FlowRule&gt;&gt; flowRuleWDS = <span class="keyword">new</span> <span class="title class_">FileWritableDataSource</span>&lt;&gt;(</span><br><span class="line">                  flowRulePath,</span><br><span class="line">                  <span class="built_in">this</span>::encodeJson</span><br><span class="line">          );</span><br><span class="line">          <span class="comment">// 将可写数据源注册至transport模块的WritableDataSourceRegistry中</span></span><br><span class="line">          <span class="comment">// 这样收到控制台推送的规则时，Sentinel会先更新到内存，然后将规则写入到文件中</span></span><br><span class="line">          WritableDataSourceRegistry.registerFlowDataSource(flowRuleWDS);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 降级规则</span></span><br><span class="line">          ReadableDataSource&lt;String, List&lt;DegradeRule&gt;&gt; degradeRuleRDS = <span class="keyword">new</span> <span class="title class_">FileRefreshableDataSource</span>&lt;&gt;(</span><br><span class="line">                  degradeRulePath,</span><br><span class="line">                  degradeRuleListParser</span><br><span class="line">          );</span><br><span class="line">          DegradeRuleManager.register2Property(degradeRuleRDS.getProperty());</span><br><span class="line">          WritableDataSource&lt;List&lt;DegradeRule&gt;&gt; degradeRuleWDS = <span class="keyword">new</span> <span class="title class_">FileWritableDataSource</span>&lt;&gt;(</span><br><span class="line">                  degradeRulePath,</span><br><span class="line">                  <span class="built_in">this</span>::encodeJson</span><br><span class="line">          );</span><br><span class="line">          WritableDataSourceRegistry.registerDegradeDataSource(degradeRuleWDS);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 系统规则</span></span><br><span class="line">          ReadableDataSource&lt;String, List&lt;SystemRule&gt;&gt; systemRuleRDS = <span class="keyword">new</span> <span class="title class_">FileRefreshableDataSource</span>&lt;&gt;(</span><br><span class="line">                  systemRulePath,</span><br><span class="line">                  systemRuleListParser</span><br><span class="line">          );</span><br><span class="line">          SystemRuleManager.register2Property(systemRuleRDS.getProperty());</span><br><span class="line">          WritableDataSource&lt;List&lt;SystemRule&gt;&gt; systemRuleWDS = <span class="keyword">new</span> <span class="title class_">FileWritableDataSource</span>&lt;&gt;(</span><br><span class="line">                  systemRulePath,</span><br><span class="line">                  <span class="built_in">this</span>::encodeJson</span><br><span class="line">          );</span><br><span class="line">          WritableDataSourceRegistry.registerSystemDataSource(systemRuleWDS);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 授权规则</span></span><br><span class="line">          ReadableDataSource&lt;String, List&lt;AuthorityRule&gt;&gt; authorityRuleRDS = <span class="keyword">new</span> <span class="title class_">FileRefreshableDataSource</span>&lt;&gt;(</span><br><span class="line">                  flowRulePath,</span><br><span class="line">                  authorityRuleListParser</span><br><span class="line">          );</span><br><span class="line">          AuthorityRuleManager.register2Property(authorityRuleRDS.getProperty());</span><br><span class="line">          WritableDataSource&lt;List&lt;AuthorityRule&gt;&gt; authorityRuleWDS = <span class="keyword">new</span> <span class="title class_">FileWritableDataSource</span>&lt;&gt;(</span><br><span class="line">                  authorityRulePath,</span><br><span class="line">                  <span class="built_in">this</span>::encodeJson</span><br><span class="line">          );</span><br><span class="line">          WritableDataSourceRegistry.registerAuthorityDataSource(authorityRuleWDS);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 热点参数规则</span></span><br><span class="line">          ReadableDataSource&lt;String, List&lt;ParamFlowRule&gt;&gt; hotParamFlowRuleRDS = <span class="keyword">new</span> <span class="title class_">FileRefreshableDataSource</span>&lt;&gt;(</span><br><span class="line">                  hotParamFlowRulePath,</span><br><span class="line">                  hotParamFlowRuleListParser</span><br><span class="line">          );</span><br><span class="line">          ParamFlowRuleManager.register2Property(hotParamFlowRuleRDS.getProperty());</span><br><span class="line">          WritableDataSource&lt;List&lt;ParamFlowRule&gt;&gt; paramFlowRuleWDS = <span class="keyword">new</span> <span class="title class_">FileWritableDataSource</span>&lt;&gt;(</span><br><span class="line">                  hotParamFlowRulePath,</span><br><span class="line">                  <span class="built_in">this</span>::encodeJson</span><br><span class="line">          );</span><br><span class="line">          ModifyParamFlowRulesCommandHandler.setWritableDataSource(paramFlowRuleWDS);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 流控规则对象转换</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">private</span> Converter&lt;String, List&lt;FlowRule&gt;&gt; flowRuleListParser = source -&gt; JSON.parseObject(</span><br><span class="line">              source,</span><br><span class="line">              <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;List&lt;FlowRule&gt;&gt;() &#123;</span><br><span class="line">              &#125;</span><br><span class="line">      );</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 降级规则对象转换</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">private</span> Converter&lt;String, List&lt;DegradeRule&gt;&gt; degradeRuleListParser = source -&gt; JSON.parseObject(</span><br><span class="line">              source,</span><br><span class="line">              <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;List&lt;DegradeRule&gt;&gt;() &#123;</span><br><span class="line">              &#125;</span><br><span class="line">      );</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 系统规则对象转换</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">private</span> Converter&lt;String, List&lt;SystemRule&gt;&gt; systemRuleListParser = source -&gt; JSON.parseObject(</span><br><span class="line">              source,</span><br><span class="line">              <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;List&lt;SystemRule&gt;&gt;() &#123;</span><br><span class="line">              &#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 授权规则对象转换</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">private</span> Converter&lt;String, List&lt;AuthorityRule&gt;&gt; authorityRuleListParser = source -&gt; JSON.parseObject(</span><br><span class="line">              source,</span><br><span class="line">              <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;List&lt;AuthorityRule&gt;&gt;() &#123;</span><br><span class="line">              &#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 热点规则对象转换</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">private</span> Converter&lt;String, List&lt;ParamFlowRule&gt;&gt; hotParamFlowRuleListParser = source -&gt; JSON.parseObject(</span><br><span class="line">              source,</span><br><span class="line">              <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;List&lt;ParamFlowRule&gt;&gt;() &#123;</span><br><span class="line">              &#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 创建目录</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mkdirIfNotExits</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">          <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">          <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">              file.mkdirs();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 创建文件</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createFileIfNotExits</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">          <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">          <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">              file.createNewFile();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> &lt;T&gt; String <span class="title function_">encodeJson</span><span class="params">(T t)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> JSON.toJSONString(t);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="启用上述代码"><a href="#启用上述代码" class="headerlink" title="启用上述代码"></a>启用上述代码</h4><p>resource 目录下创建 resources/META-INF/services 目录并创建文件 com.alibaba.csp.sentinel.init.InitFunc ，内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.sxzhongf.sharedcenter.configuration.sentinel.datasource.FileDataSourceInit</span><br></pre></td></tr></table></figure><h3 id="push-模式"><a href="#push-模式" class="headerlink" title="push 模式"></a>push 模式</h3><p>push 模式：控制台将配置规则推送到远程配置中心，例如 Nacos。Sentinel 客户端监听 Nacos，获取配置变更的推送消息，完成本地配置更新。<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221211165028.png" alt="push 模式"></p><ul><li>优点：规则持久化；一致性；快速</li><li>缺点：引入第三方依赖</li></ul><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>引入 sentinel 监听 nacos 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置-nacos-地址"><a href="#配置-nacos-地址" class="headerlink" title="配置 nacos 地址"></a>配置 nacos 地址</h4><p>在 application.yml 文件中配置 nacos 地址及监听的配置信息：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">flow:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">orderservice-flow-rules</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">SENTINEL_GROUP</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span> <span class="comment"># 还可以是：degrade、authority、param-flow</span></span><br></pre></td></tr></table></figure><h4 id="修改-sentinel-dashboard-源码"><a href="#修改-sentinel-dashboard-源码" class="headerlink" title="修改 sentinel-dashboard 源码"></a>修改 sentinel-dashboard 源码</h4><p>1、解压</p><p>下载 sentinel 源码包解压，并用 IDEA 打开这个项目<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221211171129.png" alt="sentinel 源码"><br><img src="https://blogcdn.dyfnb.xyz/img/post/20221211194128.png" alt="sentinel项目结构"></p><p>2、修改 nacos 依赖<br>在 sentinel-dashboard 源码的 pom 文件中，nacos 的依赖默认的 scope 是 test，只能在测试时使用，这里要去除：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221211194406.png" alt="nacos 依赖"></p><p>将 sentinel-datasource-nacos 依赖的 scope 去掉：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、添加 nacos 支持</p><p>在 sentinel-dashboard 的 test 包下，已经编写了对 nacos 的支持，我们需要将其拷贝到 main 下。</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221211194617.png" alt="添加 nacos 支持"></p><p>4、修改 nacos 地址</p><p>然后，还需要修改测试代码中的 NacosConfig 类：<br>修改其中的 nacos 地址，让其读取 application.properties 中的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;nacos&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosConfig</span> &#123;</span><br><span class="line">    <span class="comment">// nacos地址</span></span><br><span class="line">    <span class="keyword">private</span> String addr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddr</span><span class="params">(String addr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Converter&lt;List&lt;FlowRuleEntity&gt;, String&gt; <span class="title function_">flowRuleEntityEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON::toJSONString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Converter&lt;String, List&lt;FlowRuleEntity&gt;&gt; <span class="title function_">flowRuleEntityDecoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s -&gt; JSON.parseArray(s, FlowRuleEntity.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConfigService <span class="title function_">nacosConfigService</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> ConfigFactory.createConfigService(addr); <span class="comment">// 使用读取到的nacos地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 sentinel-dashboard 的 application.properties 中添加 nacos 地址配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos.addr</span>=<span class="string">1.15.110.202:8848</span></span><br></pre></td></tr></table></figure><p>5、配置 nacos 数据源</p><p>修改 com.alibaba.csp.sentinel.dashboard.controller.v2 包下的 FlowControllerV2 类,让添加的 Nacos 数据源生效：：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;flowRuleNacosProvider&quot;)</span></span><br><span class="line"><span class="keyword">private</span> DynamicRuleProvider&lt;List&lt;FlowRuleEntity&gt;&gt; ruleProvider;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;flowRuleNacosPublisher&quot;)</span></span><br><span class="line"><span class="keyword">private</span> DynamicRulePublisher&lt;List&lt;FlowRuleEntity&gt;&gt; rulePublisher;</span><br></pre></td></tr></table></figure><p>6\修改前端页面</p><p>接下来，还要修改前端页面，添加一个支持 nacos 的菜单。</p><p>修改 src/main/webapp/resources/app/scripts/directives/sidebar/目录下的 sidebar.html 文件：<br>将其中的这部分注释打开：<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221211200130.png" alt="打开注释"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ui-sref-active</span>=<span class="string">&quot;active&quot;</span> <span class="attr">ng-if</span>=<span class="string">&quot;entry.appType==0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">&quot;dashboard.flow(&#123;app: entry.app&#125;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-filter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>流控规则-Nacos<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7、重新编译、打包项目</p><p>运行 IDEA 中的 maven 插件，编译和打包修改好的 Sentinel-Dashboard：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221211200804.png" alt="编译、打包"></p><p>8、重新启动 Sentinel<br>启动方式跟官方一样：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure><p>如果要修改 nacos 地址，需要添加参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar -Dnacos.addr=localhost:8848 sentinel-dashboard.jar</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Sentinel-介绍&quot;&gt;&lt;a href=&quot;#Sentinel-介绍&quot; class=&quot;headerlink&quot; title=&quot;Sentinel 介绍&quot;&gt;&lt;/a&gt;Sentinel 介绍&lt;/h1&gt;&lt;p&gt;随着微服务的流行，服务和服务之间的稳定性变得越来越重要。 Senti</summary>
      
    
    
    
    <category term="笔记" scheme="https://blog.dyfnb.xyz/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="java" scheme="https://blog.dyfnb.xyz/tags/java/"/>
    
    <category term="spring cloud" scheme="https://blog.dyfnb.xyz/tags/spring-cloud/"/>
    
    <category term="sentinel" scheme="https://blog.dyfnb.xyz/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Gateway网关</title>
    <link href="https://blog.dyfnb.xyz/posts/a96479bf.html"/>
    <id>https://blog.dyfnb.xyz/posts/a96479bf.html</id>
    <published>2022-12-05T08:51:33.000Z</published>
    <updated>2022-12-05T14:02:39.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gateway-是什么"><a href="#Gateway-是什么" class="headerlink" title="Gateway 是什么"></a>Gateway 是什么</h2><p><strong>Spring Cloud Gateway</strong> 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。<br><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210714210131152.png" alt="gateway"></p><h2 id="网关的作用"><a href="#网关的作用" class="headerlink" title="网关的作用"></a>网关的作用</h2><p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p><p><strong>路由和负载均衡</strong>：一切请求都必须先经过 gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p><p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p><h2 id="搭建-Gateway-网关服务"><a href="#搭建-Gateway-网关服务" class="headerlink" title="搭建 Gateway 网关服务"></a>搭建 Gateway 网关服务</h2><h3 id="创建-Gateway-服务，引入依赖"><a href="#创建-Gateway-服务，引入依赖" class="headerlink" title="创建 Gateway 服务，引入依赖"></a>创建 Gateway 服务，引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos服务发现依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写基础配置和路由规则"><a href="#编写基础配置和路由规则" class="headerlink" title="编写基础配置和路由规则"></a>编写基础配置和路由规则</h3><p>创建 application.yml 文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment"># 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">1.15</span><span class="number">.110</span><span class="number">.102</span><span class="string">:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">stockService</span> <span class="comment"># 路由id，自定义，只要唯一即可</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/stock/**</span> <span class="comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span></span><br></pre></td></tr></table></figure><p>我们将符合<code>Path</code> 规则的一切请求，都代理到 <code>uri</code>参数指定的地址。</p><p>本例中，我们将 <code>/stock/**</code>开头的请求，代理到<code>lb://stockService</code>，lb 是负载均衡，根据服务名拉取服务列表，实现负载均衡。</p><h3 id="网关路由的流程图"><a href="#网关路由的流程图" class="headerlink" title="网关路由的流程图"></a>网关路由的流程图</h3><p>整个访问的流程如下：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210714211742956.png" alt="image-20210714211742956"></p><p>总结：</p><p>网关搭建步骤：</p><ol><li>创建项目，引入 nacos 服务发现和 gateway 依赖</li><li>配置 application.yml，包括服务基本信息、nacos 地址、路由</li></ol><p>路由配置包括：</p><ol><li>路由 id：路由的唯一标示</li><li>路由目标（uri）：路由的目标地址，http 代表固定地址，lb 代表根据服务名负载均衡</li><li>路由断言（predicates）：判断路由的规则，</li><li>路由过滤器（filters）：对请求或响应做处理</li></ol><h2 id="路由断言工厂"><a href="#路由断言工厂" class="headerlink" title="路由断言工厂"></a>路由断言工厂</h2><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被 Predicate Factory 读取并处理，转变为路由判断的条件</p><p>例如<code>Path=/user/**</code>是按照路径匹配，这个规则是由</p><p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p><p>处理的，像这样的断言工厂在 SpringCloudGateway 还有十几个:</p><div class="table-container"><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>- After=2037-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>- Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>- Between=2037-01-20T17:42:47.789-07:00[America/Denver], 2037-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些 cookie</td><td>- Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些 header</td><td>- Header=X-Request-Id, \d+</td></tr><tr><td>Host</td><td>请求必须是访问某个 host（域名）</td><td>- Host=<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method=GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path=/red/{segment},/blue/**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query=name, Jack 或者- Query=name</td></tr><tr><td>RemoteAddr</td><td>请求者的 ip 必须是指定范围</td><td>- RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight</td><td>权重处理</td></tr></tbody></table></div><p>我们只需要掌握 Path 这种路由工程就可以了。</p><h2 id="过滤器工厂"><a href="#过滤器工厂" class="headerlink" title="过滤器工厂"></a>过滤器工厂</h2><p>GatewayFilter 是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210714212312871.png" alt="image-20210714212312871"></p><h3 id="路由过滤器的种类"><a href="#路由过滤器的种类" class="headerlink" title="路由过滤器的种类"></a>路由过滤器的种类</h3><p>Spring 提供了 31 种不同的路由过滤器工厂。例如：</p><div class="table-container"><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table></div><h3 id="请求头过滤器"><a href="#请求头过滤器" class="headerlink" title="请求头过滤器"></a>请求头过滤器</h3><p>下面我们以 AddRequestHeader 为例来讲解。</p><blockquote><p><strong>需求</strong>：给所有进入 userservice 的请求添加一个请求头：Truth=itcast is freaking awesome!</p></blockquote><p>只需要修改 gateway 服务的 application.yml 文件，添加路由过滤即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment"># 过滤器</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">There</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span> <span class="comment"># 添加请求头</span></span><br></pre></td></tr></table></figure><p>当前过滤器写在 userservice 路由下，因此仅仅对访问 userservice 的请求有效。</p><h3 id="默认过滤器"><a href="#默认过滤器" class="headerlink" title="默认过滤器"></a>默认过滤器</h3><p>如果要对所有的路由都生效，则可以将过滤器工厂写到 default 下。格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">There</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span></span><br></pre></td></tr></table></figure><h3 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h3><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p><ul><li>参数中是否有 authorization，</li><li>authorization 参数值是否为 admin</li></ul><p>如果同时满足则放行，否则拦截</p><p>实现：</p><p>在 gateway 中定义一个过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Order(-1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span><br><span class="line">        <span class="comment">// 2.获取authorization参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.校验</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(auth)) &#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.拦截</span></span><br><span class="line">        <span class="comment">// 4.1.禁止访问，设置状态码</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line">        <span class="comment">// 4.2.结束处理</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤器执行顺序"><a href="#过滤器执行顺序" class="headerlink" title="过滤器执行顺序"></a>过滤器执行顺序</h3><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p><p>请求路由后，会将当前路由过滤器和 DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210714214228409.png" alt="image-20210714214228409"></p><p>排序的规则是什么呢？</p><ul><li>每一个过滤器都必须指定一个 int 类型的 order 值，<strong>order 值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter 通过实现 Ordered 接口，或者添加@Order 注解来指定 order 值，由我们自己指定</li><li>路由过滤器和 defaultFilter 的 order 由 Spring 指定，默认是按照声明顺序从 1 递增。</li><li>当过滤器的 order 值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter 的顺序执行。</li></ul><p>详细内容，可以查看源码：</p><p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载 defaultFilters，然后再加载某个 route 的 filters，然后合并。</p><p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据 order 排序，组织过滤器链</p><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><h3 id="什么是跨域问题"><a href="#什么是跨域问题" class="headerlink" title="什么是跨域问题"></a>什么是跨域问题</h3><p>当一个请求 url 的协议,域名,端口三者之间任意一个与当前的 url 不同都即为跨域</p><div class="table-container"><table><thead><tr><th>当前页面</th><th>url 被请求页面</th><th>url 是否跨域</th><th>原因</th></tr></thead><tbody><tr><td><code>http://www.test.com/</code></td><td><code>http://www.test.com/index.html</code></td><td>否</td><td>同源（协议、域名、端口号相同）</td></tr><tr><td><code>http://www.test.com/</code></td><td><code>https://www.test.com/index.html</code></td><td>跨域</td><td>协议不同（http/https）</td></tr><tr><td><code>http://www.test.com/</code></td><td><code>http://www.baidu.com/</code></td><td>跨域</td><td>主域名不同（test/baidu）</td></tr><tr><td><code>http://www.test.com/</code></td><td><code>http://blog.test.com/</code></td><td>跨域</td><td>子域名不同（www/blog）</td></tr><tr><td><code>http://www.test.com:8080/</code></td><td><code>http://www.test.com:7001/</code></td><td>跨域</td><td>端口号不同（8080/7001）</td></tr></tbody></table></div><p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域 ajax 请求，请求被浏览器拦截的问题</p><h3 id="CORS-跨域问题解决"><a href="#CORS-跨域问题解决" class="headerlink" title="CORS 跨域问题解决"></a>CORS 跨域问题解决</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>使用 @CrossOrgin 注解<br>如果只是想部分接口跨域，且不想使用配置来管理的话，可以使用这种方式</p><p>在 Controller 使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在具体接口上使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>在 MVC 或 SpringBoot 的工程下，创建一个 CORS 配置类，实现 WebMvcConfigurer 接口，重写 addCorsMappings() 方法，案例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标注这个类是一个配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//实现 WebMvcConfigurer 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)  <span class="comment">//设置允许跨域访问的路径</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)  <span class="comment">//设置允许跨域访问的源</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;GET&quot;</span>)  <span class="comment">//允许跨域请求的方法</span></span><br><span class="line">                .maxAge(<span class="number">168000</span>)  <span class="comment">//预检间隔时间</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)  <span class="comment">//允许头部设置</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>);  <span class="comment">//是否发送 cookie</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h4><p>使用 Filter 过滤器来过滤服务请求，向请求端设置 Response Header(响应头部)的 Access-Control-Allow-Origin 属性声明允许跨域访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;CorsFilter &quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) res;</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpRequest</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line">        <span class="comment">// OPTIONS method response</span></span><br><span class="line">        <span class="keyword">if</span> (httpRequest.getMethod().equals(<span class="string">&quot;OPTIONS&quot;</span>)) &#123;</span><br><span class="line">            ((HttpServletResponse) res).sendError(HttpServletResponse.SC_OK);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gateway-解决跨域问题"><a href="#Gateway-解决跨域问题" class="headerlink" title="Gateway 解决跨域问题"></a>Gateway 解决跨域问题</h3><p>在 gateway 服务的 application.yml 文件中，添加下面的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 。。。</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&quot;[/**]&quot;</span><span class="string">:</span> <span class="comment"># 拦截一切请求</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:8090&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Gateway-是什么&quot;&gt;&lt;a href=&quot;#Gateway-是什么&quot; class=&quot;headerlink&quot; title=&quot;Gateway 是什么&quot;&gt;&lt;/a&gt;Gateway 是什么&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Spring Cloud Gateway&lt;/stro</summary>
      
    
    
    
    <category term="笔记" scheme="https://blog.dyfnb.xyz/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="java" scheme="https://blog.dyfnb.xyz/tags/java/"/>
    
    <category term="spring cloud" scheme="https://blog.dyfnb.xyz/tags/spring-cloud/"/>
    
    <category term="gateway" scheme="https://blog.dyfnb.xyz/tags/gateway/"/>
    
  </entry>
  
  <entry>
    <title>Feign远程调用</title>
    <link href="https://blog.dyfnb.xyz/posts/d9eec1b3.html"/>
    <id>https://blog.dyfnb.xyz/posts/d9eec1b3.html</id>
    <published>2022-12-05T06:58:09.000Z</published>
    <updated>2022-12-05T14:04:23.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Feign"><a href="#什么是-Feign" class="headerlink" title="什么是 Feign"></a>什么是 Feign</h2><p><strong>Feign</strong>：<a href="https://github.com/OpenFeign/feign">Feign</a> 是一个声明式的 http 客户端，<br>其作用就是帮助我们优雅的实现 http 请求的发送，解决利用 RestTemplate 发起远程调用时的<span class='p blue'>代码可读性差，编程体验不统一、参数复杂URL难以维护</span>的问题</p><h2 id="Fegin-的使用"><a href="#Fegin-的使用" class="headerlink" title="Fegin 的使用"></a>Fegin 的使用</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>在需要进行服务调用的服务中添加 feign 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="开启-Feign-功能"><a href="#开启-Feign-功能" class="headerlink" title="开启 Feign 功能"></a>开启 Feign 功能</h3><p>在启动类上添加<code>@EnableFeignClients</code>注解开启 Feign 的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写-Feign-客户端"><a href="#编写-Feign-客户端" class="headerlink" title="编写 Feign 客户端"></a>编写 Feign 客户端</h3><p>新建服务接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;stockService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StockClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/stock/reduct&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reduct</span><span class="params">(<span class="meta">@RequestParam(&quot;count&quot;)</span> Integer count)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端主要是基于 SpringMVC 的注解来声明远程调用的信息，比如：</p><ul><li>服务名：stockService</li><li>请求方式：GET</li><li>请求路径：/stock/reduct</li><li>请求参数：Integer count</li><li>返回值类型：String</li></ul><p>这样，Feign 就可以帮助我们发送 http 请求，无需自己使用 RestTemplate 来发送了。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在 OrderController 中注入 stockService 服务客户端，使用 Feign 客户端代替 RestTemplate：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StockClient stockClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(Integer count)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stockClient.reduct(count);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello add older&quot;</span>+result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p>Feign 可以支持很多的自定义配置，如下表所示：</p><div class="table-container"><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><strong>feign.Logger.Level</strong></td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http 远程调用的结果做解析，例如解析 json 字符串为 java 对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过 http 请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是 SpringMVC 的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用 Ribbon 的重试</td></tr></tbody></table></div><p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean 覆盖默认 Bean 即可。</p><h3 id="配置文件方式自定义配置"><a href="#配置文件方式自定义配置" class="headerlink" title="配置文件方式自定义配置"></a>配置文件方式自定义配置</h3><p>基于配置文件修改 feign 的日志级别可以针对单个服务：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">userservice:</span> <span class="comment"># 针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#  日志级别</span></span><br></pre></td></tr></table></figure><p>也可以针对所有服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#  日志级别</span></span><br></pre></td></tr></table></figure><p>日志的级别分为四种：</p><ul><li>NONE：不记录任何日志信息，这是默认值。</li><li>BASIC：仅记录请求的方法，URL 以及响应状态码和执行时间</li><li>HEADERS：在 BASIC 的基础上，额外记录了请求和响应的头信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><h3 id="Java-代码方式自定义配置"><a href="#Java-代码方式自定义配置" class="headerlink" title="Java 代码方式自定义配置"></a>Java 代码方式自定义配置</h3><p>基于 Java 代码来修改日志级别，先声明一个类，然后声明一个 Logger.Level 的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfiguration</span>  &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLogLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.BASIC; <span class="comment">// 日志级别为BASIC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要<strong>全局生效</strong>，将其放到启动类的@EnableFeignClients 这个注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration .class)</span></span><br></pre></td></tr></table></figure><p>如果是<strong>局部生效</strong>，则把它放到对应的@FeignClient 这个注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration .class)</span></span><br></pre></td></tr></table></figure><h2 id="Feign-的性能优化"><a href="#Feign-的性能优化" class="headerlink" title="Feign 的性能优化"></a>Feign 的性能优化</h2><p>Feign 底层发起 http 请求，依赖于其它的框架。其底层客户端实现包括：</p><ul><li>URLConnection：默认实现，不支持连接池</li><li>Apache HttpClient ：支持连接池</li><li>OKHttp：支持连接池</li></ul><p>因此提高 Feign 的性能主要手段就是使用<strong>连接池</strong>代替默认的 URLConnection。</p><h3 id="Apache-的-HttpClient-来代替默认的-URLConnection"><a href="#Apache-的-HttpClient-来代替默认的-URLConnection" class="headerlink" title="Apache 的 HttpClient 来代替默认的 URLConnection"></a>Apache 的 HttpClient 来代替默认的 URLConnection</h3><h4 id="引入-Apache-的-HttpClient-依赖："><a href="#引入-Apache-的-HttpClient-依赖：" class="headerlink" title="引入 Apache 的 HttpClient 依赖："></a>引入 Apache 的 HttpClient 依赖：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--httpClient的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置连接池"><a href="#配置连接池" class="headerlink" title="配置连接池"></a>配置连接池</h4><p>在 application.yml 中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># default全局的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span> <span class="comment"># 日志级别，BASIC就是基本的请求和响应信息</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对HttpClient的支持</span></span><br><span class="line">    <span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment"># 最大的连接数</span></span><br><span class="line">    <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment"># 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>一样的代码可以通过继承来共享：<br>1）定义一个 API 接口，利用定义方法，并基于 SpringMVC 注解做声明。<br>2）Feign 客户端和 Controller 都集成改接口<br><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210714190640857.png" alt="image-20210714190640857"></p><p>优点：</p><ul><li>简单</li><li>实现了代码共享</li></ul><p>缺点：</p><ul><li>服务提供方、服务消费方紧耦合</li><li>参数列表中的注解映射并不会继承，因此 Controller 中必须再次声明方法、参数列表、注解</li></ul><h3 id="抽取"><a href="#抽取" class="headerlink" title="抽取"></a>抽取</h3><p>将 Feign 的 Client 抽取为独立模块，并且把接口有关的 POJO、默认的 Feign 配置都放到这个模块中，提供给所有消费者使用。<br>例如，将 UserClient、User、Feign 的默认配置都抽取到一个 feign-api 包中，所有微服务引用该依赖包，即可直接使用。<br><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210714214041796.png" alt="image-20210714214041796"></p><h4 id="解决扫描包问题"><a href="#解决扫描包问题" class="headerlink" title="解决扫描包问题"></a>解决扫描包问题</h4><p>方式一：</p><p>指定 Feign 应该扫描的包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;cn.edu.feign.clients&quot;)</span></span><br></pre></td></tr></table></figure><p>方式二：</p><p>指定需要加载的 Client 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(clients = &#123;StockClient.class&#125;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是-Feign&quot;&gt;&lt;a href=&quot;#什么是-Feign&quot; class=&quot;headerlink&quot; title=&quot;什么是 Feign&quot;&gt;&lt;/a&gt;什么是 Feign&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Feign&lt;/strong&gt;：&lt;a href=&quot;https://gi</summary>
      
    
    
    
    <category term="笔记" scheme="https://blog.dyfnb.xyz/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="feign" scheme="https://blog.dyfnb.xyz/tags/feign/"/>
    
    <category term="java" scheme="https://blog.dyfnb.xyz/tags/java/"/>
    
    <category term="spring cloud" scheme="https://blog.dyfnb.xyz/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>Nacos注册配置中心</title>
    <link href="https://blog.dyfnb.xyz/posts/e0850bda.html"/>
    <id>https://blog.dyfnb.xyz/posts/e0850bda.html</id>
    <published>2022-12-04T07:41:48.000Z</published>
    <updated>2022-12-04T13:29:28.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Nacos"><a href="#什么是-Nacos" class="headerlink" title="什么是 Nacos"></a>什么是 Nacos</h2><p><strong>Nacos</strong>：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。<a href="https://nacos.io/">Nacos</a>是阿里巴巴的产品，现在是<a href="https://spring.io/projects/spring-cloud">SpringCloud</a>中的一个组件。相比<a href="https://github.com/Netflix/eureka">Eureka</a>功能更加丰富，在国内受欢迎程度较高。</p><h2 id="安装-Nacos"><a href="#安装-Nacos" class="headerlink" title="安装 Nacos"></a>安装 Nacos</h2><h3 id="下载-Nacos"><a href="#下载-Nacos" class="headerlink" title="下载 Nacos"></a>下载 Nacos</h3><p>在 Nacos 的 GitHub 页面，提供有下载链接，可以下载编译好的 Nacos 服务端或者源代码：</p><p>GitHub 主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>GitHub 的 Release 下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204143728.png" alt="下载nacos"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>将这个包解压到任意非中文目录下，如图：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204143931.png" alt="nacos文件列表"></p><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul><h3 id="端口配置"><a href="#端口配置" class="headerlink" title="端口配置"></a>端口配置</h3><p>Nacos 的默认端口是 8848，如果你电脑上的其它进程占用了 8848 端口，请先尝试关闭该进程。</p><p><strong>如果无法关闭占用 8848 端口的进程</strong>，也可以进入 nacos 的 conf 目录，修改配置文件中的端口：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204144130.png" alt="nacos配置文件"></p><p>修改其中的内容：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204144247.png" alt="端口"><br><strong>注意</strong>：Nacos2.X 版本相比 1.X 新增了 gRPC 的通信方式，因此需要增加 2 个端口，新增端口是在配置的主端口(server.port)基础上，进行一定偏移量自动生成。</p><div class="table-container"><table><thead><tr><th style="text-align:center">端口</th><th style="text-align:center">偏移量</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">9848</td><td style="text-align:center">1000</td><td style="text-align:center">客户端 gRPC 请求服务端端口，用于客户端向服务端发起连接和请求</td></tr><tr><td style="text-align:center">9849</td><td style="text-align:center">1001</td><td style="text-align:center">服务端 gRPC 请求服务端端口，用于服务间同步等</td></tr></tbody></table></div><p>如果使用的是服务器部署 2.X 版本的 Nacos，除了需要开启 8848 端口外，还需要开启<span class='p blue'>9848</span>和<span class='p blue'>9848</span>两个端口</p><h2 id="数据源存储方式"><a href="#数据源存储方式" class="headerlink" title="数据源存储方式"></a>数据源存储方式</h2><p>nacos 默认存储在内存，也可以更换数据源将数据存储在 mysql 中<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221203174303.png" alt="nacos持久化"></p><h2 id="Nacos-的启动和关闭"><a href="#Nacos-的启动和关闭" class="headerlink" title="Nacos 的启动和关闭"></a>Nacos 的启动和关闭</h2><p>Linux/Unix/Mac<br>启动命令(standalone 代表着单机模式运行，非集群模式):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果您使用的是ubuntu系统，或者运行脚本报错提示符号找不到，可尝试如下运行：</span></span><br><span class="line"></span><br><span class="line">bash startup.sh -m standalone</span><br></pre></td></tr></table></figure><p>Linux/Unix/Mac 关闭命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh shutdown.sh</span><br></pre></td></tr></table></figure><p>docker 运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nacos -e MODE=standalone -p 8848:8848 -d nacos/nacos-server:v2.1.1</span><br></pre></td></tr></table></figure><p>Windows<br>启动命令(standalone 代表着单机模式运行，非集群模式):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure><p>Windows 关闭<br>双击 shutdown.cmd 运行文件或者运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown.cmd</span><br></pre></td></tr></table></figure><p>进入 nacos 主页:ip:8848/nacos/index.html</p><p>输入用户名：nacos，密码：nacos 即可登陆</p><h2 id="SpringCloud-版本适配"><a href="#SpringCloud-版本适配" class="headerlink" title="SpringCloud 版本适配"></a>SpringCloud 版本适配</h2><h3 id="毕业版本依赖关系"><a href="#毕业版本依赖关系" class="headerlink" title="毕业版本依赖关系"></a>毕业版本依赖关系</h3><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204150144.png" alt="版本适配"></p><h3 id="组件版本关系"><a href="#组件版本关系" class="headerlink" title="组件版本关系"></a>组件版本关系</h3><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204150314.png" alt="组件版本适配"></p><p>具体的版本适配关系可前往<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">GitHub</a>查看</p><h2 id="Nacos-注册中心"><a href="#Nacos-注册中心" class="headerlink" title="Nacos 注册中心"></a>Nacos 注册中心</h2><p>Nacos 注册中心：用来管理所有的微服务，解决微服务之间错综复杂的调用关系和难以维护的问题</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>在父工程中引入 spring-cloud-alibaba 版本管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-cloud-alibaba 版本管理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要将服务注册在 nacos 上的子工程中引入 nacos 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos 服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在项目中配置-nacos"><a href="#在项目中配置-nacos" class="headerlink" title="在项目中配置 nacos"></a>在项目中配置 nacos</h3><p>在配置文件中配置服务名称与 nacos 服务地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderService</span> <span class="comment"># order 服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">1.15</span><span class="number">.110</span><span class="number">.102</span><span class="string">:8848</span> <span class="comment"># nacos 服务地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span> <span class="comment"># nacos 用户名</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">public</span> <span class="comment"># 命名空间默认public</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">SH</span> <span class="comment"># 集群名称配置</span></span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>进入 nacos 服务列表页就可以看到已注册到 nacos 上的服务<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221204143147.png" alt="服务列表"><br><img src="https://blogcdn.dyfnb.xyz/img/post/20221204153331.png" alt="服务详情"></p><h3 id="服务调用和负载均衡"><a href="#服务调用和负载均衡" class="headerlink" title="服务调用和负载均衡"></a>服务调用和负载均衡</h3><p>我们要去 nacos 中拉取 stockService 服务的实例列表，并且实现负载均衡。不过这些动作不用我们去做，只需要添加一些注解即可。<br>在 orderService 的配置类中，给 RestTemplate 这个 Bean 添加一个@LoadBalanced 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span> <span class="comment">// 负载均衡注解</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改访问的 url 路径，用服务名代替 ip、端口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://stockService/stock/reduct/&quot;</span>, String.class,<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Nacos-负载均衡"><a href="#Nacos-负载均衡" class="headerlink" title="Nacos 负载均衡"></a>Nacos 负载均衡</h3><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此 Nacos 中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。<br>在 orderService 的 application.yml 文件中，添加负载均衡规则：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stockService:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># nacos负载均衡规则 优先调用本地集群的stockService服务，在本地集群中的多个服务采用随机规则进行负载均衡，当本地集群的stockService服务挂掉才调用其它集群的stockService服务（只在权重相同时有效）</span></span><br></pre></td></tr></table></figure><h3 id="权重配置"><a href="#权重配置" class="headerlink" title="权重配置"></a>权重配置</h3><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。<br>但默认情况下 NacosRule 是同集群内随机挑选，不会考虑机器的性能问题。<br>因此，Nacos 提供了权重配置来控制访问频率，权重越大则访问频率越高(权重配置早 0~1 之间)。</p><p>在 nacos 控制台，找到 user-service 的实例列表，点击编辑，即可修改权重：<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221204165038.png" alt="修改权重"><br>在弹出的编辑窗口，修改权重：<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221204165140.png" alt="修改权重" style="zoom:70%;" /><br><strong>注意</strong>：如果权重修改为 0，则该实例永远不会被访问</p><h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><p>Nacos 提供了 namespace 来实现环境隔离功能。</p><ul><li>nacos 中可以有多个 namespace</li><li>namespace 下可以有 group、service 等</li><li>不同 namespace 之间相互隔离，例如不同 namespace 的服务互相不可见</li></ul><h4 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h4><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204171354.png" alt="创建命名空间"></p><h4 id="配置服务的命名空间"><a href="#配置服务的命名空间" class="headerlink" title="配置服务的命名空间"></a>配置服务的命名空间</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">1.15</span><span class="number">.110</span><span class="number">.102</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="comment"># 命名空间，填ID</span></span><br></pre></td></tr></table></figure><h2 id="Nacos-配置中心"><a href="#Nacos-配置中心" class="headerlink" title="Nacos 配置中心"></a>Nacos 配置中心</h2><h3 id="新建配置"><a href="#新建配置" class="headerlink" title="新建配置"></a>新建配置</h3><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204174012.png" alt="新建配置"><br><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210714164856664.png" alt="新建配置"><br><strong>注意</strong>：项目的核心配置，需要热更新的配置才有放到 nacos 管理的必要。基本不会变更的一些配置还是保存在微服务本地比较好。</p><h3 id="服务拉取配置"><a href="#服务拉取配置" class="headerlink" title="服务拉取配置"></a>服务拉取配置</h3><p>微服务要拉取 nacos 中管理的配置，并且与本地的 application.yml 配置合并，才能完成项目启动。</p><p>但如果尚未读取 application.yml，又如何得知 nacos 地址呢？</p><p>因此 spring 引入了一种新的配置文件：bootstrap.yaml 文件，会在 application.yml 之前被读取，流程如下：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/L0iFYNF.png" alt="img"></p><h4 id="引入-nacos-config-依赖"><a href="#引入-nacos-config-依赖" class="headerlink" title="引入 nacos-config 依赖"></a>引入 nacos-config 依赖</h4><p>首先，在 user-service 服务中，引入 nacos-config 的客户端依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos配置管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加-bootstrap-yaml"><a href="#添加-bootstrap-yaml" class="headerlink" title="添加 bootstrap.yaml"></a>添加 bootstrap.yaml</h4><p>然后，在 orderService 中添加一个 bootstrap.yaml 文件，内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderService</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">1.15</span><span class="number">.110</span><span class="number">.102</span><span class="string">:8848</span> <span class="comment"># Nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br></pre></td></tr></table></figure><p>这里会根据 spring.cloud.nacos.server-addr 获取 nacos 地址，再根据</p><p><code>$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</code>作为文件 id，来读取配置。</p><h4 id="读取-nacos-配置"><a href="#读取-nacos-配置" class="headerlink" title="读取 nacos 配置"></a>读取 nacos 配置</h4><p>在 orderService 中的 OrderController 中添加业务逻辑，读取 pattern.dateformat 配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(Integer count)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h3><p><strong>配置热更新</strong>：修改 nacos 中的配置后，微服务中无需重启即可让配置生效，也就是<strong>配置热更新</strong>。</p><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>在@Value 注入的变量所在类上添加注解@RefreshScope：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(Integer count)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>使用@ConfigurationProperties 注解代替@Value 注解。</p><p>在 orderService 服务中，添加一个类，读取 patterrn.dateformat 属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Format</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDateformat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dateformat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDateformat</span><span class="params">(String dateformat)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dateformat = dateformat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ===============================================</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Format format;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(Integer count)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(format.getDateformat()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多环境配置共享"><a href="#多环境配置共享" class="headerlink" title="多环境配置共享"></a>多环境配置共享</h3><p>其实微服务启动时，会去 nacos 读取多个配置文件，例如：</p><ul><li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：orderService-dev.yaml</p></li><li><p><code>[spring.application.name].yaml</code>，例如：orderService.yaml</p></li></ul><p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享。<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221204201706.png" alt="多环境配置共享"></p><h4 id="配置共享的优先级"><a href="#配置共享的优先级" class="headerlink" title="配置共享的优先级"></a>配置共享的优先级</h4><p>当 nacos、服务本地同时出现相同属性时，优先级有高低之分：<br><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210714174623557.png" alt="配置共享的优先级"></p><h2 id="Nacos-集群部署"><a href="#Nacos-集群部署" class="headerlink" title="Nacos 集群部署"></a>Nacos 集群部署</h2><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><p>新建 nacos 数据库，而后导入 conf 目录下的 nacos-mysql.sql 文件<br><img src="https://blogcdn.dyfnb.xyz/img/post/20221204204144.png" alt="执行sql"></p><h3 id="配置-nacos"><a href="#配置-nacos" class="headerlink" title="配置 nacos"></a>配置 nacos</h3><p>nacos 的 conf 目录，修改配置文件 cluster.conf.example，重命名为 cluster.conf：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221204204225.png" alt="image-20210409212459292"></p><p>然后添加内容，配置集群中每一个节点的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ip:端口 --&gt;</span><br><span class="line">127.0.0.1:8845</span><br><span class="line">127.0.0.1.8846</span><br><span class="line">127.0.0.1.8847</span><br></pre></td></tr></table></figure><p>然后修改 application.properties 文件，添加数据库配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>将 nacos 文件夹复制三份，分别命名为：nacos1、nacos2、nacos3</p><p>然后分别修改三个文件夹中的 application.properties，</p><p>nacos1:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8845</span></span><br></pre></td></tr></table></figure><p>nacos2:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8846</span></span><br></pre></td></tr></table></figure><p>nacos3:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8847</span></span><br></pre></td></tr></table></figure><p>然后分别启动三个 nacos 节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">startup.cmd</span><br></pre></td></tr></table></figure><h2 id="Nacos-与-Eureka-的区别"><a href="#Nacos-与-Eureka-的区别" class="headerlink" title="Nacos 与 Eureka 的区别"></a>Nacos 与 Eureka 的区别</h2><p>Nacos 的服务实例分为两种类型：</p><ul><li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p></li><li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p></li></ul><p>配置一个服务实例为永久实例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 设置为非临时实例</span></span><br></pre></td></tr></table></figure><p>Nacos 和 Eureka 整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210714001728017.png" alt="image-20210714001728017"></p><ul><li><p>Nacos 与 eureka 的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos 与 Eureka 的区别</p><ul><li>Nacos 支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos 支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos 集群默认采用 AP 方式，当集群中存在非临时实例时，采用 CP 模式；Eureka 采用 AP 方式</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是-Nacos&quot;&gt;&lt;a href=&quot;#什么是-Nacos&quot; class=&quot;headerlink&quot; title=&quot;什么是 Nacos&quot;&gt;&lt;/a&gt;什么是 Nacos&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Nacos&lt;/strong&gt;：一个更易于构建云原生应用的动态服务发现</summary>
      
    
    
    
    <category term="笔记" scheme="https://blog.dyfnb.xyz/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="docker" scheme="https://blog.dyfnb.xyz/tags/docker/"/>
    
    <category term="linux" scheme="https://blog.dyfnb.xyz/tags/linux/"/>
    
    <category term="java" scheme="https://blog.dyfnb.xyz/tags/java/"/>
    
    <category term="nacos" scheme="https://blog.dyfnb.xyz/tags/nacos/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习</title>
    <link href="https://blog.dyfnb.xyz/posts/6782be63.html"/>
    <id>https://blog.dyfnb.xyz/posts/6782be63.html</id>
    <published>2022-12-02T08:42:58.000Z</published>
    <updated>2022-12-03T11:01:09.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-docker"><a href="#什么是-docker" class="headerlink" title="什么是 docker"></a>什么是 docker</h3><p>Docker 是一个开源的应用容器引擎，是虚拟化的一种轻量级替代技术。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口，开销很低。docker 解决了服务器昂贵的问题，生产环境和测试环境不一致的问题。</p><h3 id="Docker-和虚拟机的区别"><a href="#Docker-和虚拟机的区别" class="headerlink" title="Docker 和虚拟机的区别"></a>Docker 和虚拟机的区别</h3><p>Docker 和虚拟机的差异：</p><ul><li>docker 是一个系统进程；虚拟机是在操作系统中的操作系统</li><li>docker 体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</li></ul><h3 id="安装和卸载"><a href="#安装和卸载" class="headerlink" title="安装和卸载"></a>安装和卸载</h3><p>卸载 docker，运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure><p>安装 docker，使用 <span class='p blue'>yum</span> 命令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><h4 id="什么是镜像"><a href="#什么是镜像" class="headerlink" title="什么是镜像"></a>什么是镜像</h4><p><strong>镜像：</strong>Docker 将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为<strong>镜像</strong>，镜像名称一般分两部分组成：[repository]:[tag]，没有指定 tag 时，默认是 latest，代表最新版本的镜像。</p><h4 id="镜像常用命令"><a href="#镜像常用命令" class="headerlink" title="镜像常用命令"></a>镜像常用命令</h4><p>1、拉取镜像，拉取镜像时先去镜像仓库搜索 nginx 镜像，比如<a href="https://hub.docker.com/">DockerHub</a>，根据查看到的镜像名称，拉取自己需要的镜像，命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [镜像名]:[版本号]</span><br></pre></td></tr></table></figure><p>2、查看拉取到的镜像，命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-a :列出本地所有的镜像（含历史映像层）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-q :只显示镜像ID。</span></span><br><span class="line">docker images [OPTIONS]</span><br></pre></td></tr></table></figure><p>3、导出镜像，命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker save -o [保存的目标文件名称] [镜像名称]</span></span><br><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure><p>4、从指定文件中加载镜像，命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker save -o [目标文件名称]</span></span><br><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure><p>5、删除镜像，命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f :强制删除该镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker rmi [OPTIONS] [镜像名称]</span></span><br><span class="line">docker rmi -f nginx:latest</span><br></pre></td></tr></table></figure><p>6、推送镜像，命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、重新tag本地镜像docker tag nginx:latest [私有仓库地址]/[名称]:[版本号]</span></span><br><span class="line">docker tag nginx:latest 192.168.150.101:8080/nginx:1.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、推送镜像，docker push [私有仓库地址]/[名称]:[版本号]</span></span><br><span class="line">docker push 192.168.150.101:8080/nginx:1.0</span><br></pre></td></tr></table></figure><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h4 id="什么是容器"><a href="#什么是容器" class="headerlink" title="什么是容器"></a>什么是容器</h4><p><strong>容器：</strong>镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是 Docker 会给容器进程做隔离，对外不可见。</p><h4 id="容器常用命令"><a href="#容器常用命令" class="headerlink" title="容器常用命令"></a>容器常用命令</h4><p>1、创建并运行一个容器，处于运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run \ # 创建并运行一个容器，处于运行状态</span><br><span class="line"> --name containerName \ # 给容器起一个名字</span><br><span class="line"> -p 80:80 \ # 将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</span><br><span class="line"> -d # 后台运行容器</span><br><span class="line"> nginx # 镜像名称</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、让一个运行的容器暂停</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pause</span><br></pre></td></tr></table></figure><p>3、让一个容器从暂停状态恢复运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker unpause</span><br></pre></td></tr></table></figure><p>4、停止一个运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop</span><br></pre></td></tr></table></figure><p>5、让一个停止的容器再次运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start</span><br></pre></td></tr></table></figure><p>6、删除一个容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f :强制删除该容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker <span class="built_in">rm</span> [OPTIONS] [容器名]</span></span><br><span class="line">docker rm -f mynginx</span><br></pre></td></tr></table></figure><p>7、查看容器运行日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f : 跟踪日志输出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t : 显示时间戳</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--<span class="built_in">tail</span> :仅列出最新N条容器日志</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--since：显示某个日期至今的所有日志</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker logs [OPTIONS] [容器名]</span></span><br><span class="line">docker logs -f mynginx</span><br></pre></td></tr></table></figure><p>8、进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker <span class="built_in">exec</span> ：进入容器内部，执行一个命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mn ：要进入的容器的名称</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bash：进入容器后执行的命令，bash是一个linux终端交互命令</span></span><br><span class="line">docker exec -it mn bash</span><br></pre></td></tr></table></figure><p>进入 html 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/nginx/html</span><br></pre></td></tr></table></figure><p>修改 index.html 文件<br>容器内没有 vi 命令，无法直接修改，我们用下面的命令来修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i -e &#x27;s#Welcome to nginx#Hello World#g&#x27; -e &#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27; index.html</span><br></pre></td></tr></table></figure><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><h4 id="什么是数据卷"><a href="#什么是数据卷" class="headerlink" title="什么是数据卷"></a>什么是数据卷</h4><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录。一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。这样，我们操作宿主机的/var/lib/docker/volumes/html 目录，就等于操作容器内的/usr/share/nginx/html 目录了</p><h4 id="数据卷常用命令"><a href="#数据卷常用命令" class="headerlink" title="数据卷常用命令"></a>数据卷常用命令</h4><p>1、创建一个 volume</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker volume create [数据卷名称]</span></span><br><span class="line">docker volume create html</span><br></pre></td></tr></table></figure><p>2、显示一个或多个 volume 的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker volume inspect [数据卷名称、数据卷名称...]</span></span><br><span class="line">docker volume inspect html</span><br></pre></td></tr></table></figure><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221202200957.png" alt="数据卷信息"><br>3、列出所有的 volume</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><p><img src="https://blogcdn.dyfnb.xyz/img/post/20221202201701.png" alt=""><br>4、删除未使用的 volume</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure><p>5、删除一个或多个指定的 volume</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker volume <span class="built_in">rm</span> [数据卷名称、数据卷名称...]</span></span><br><span class="line">docker volume rm html</span><br></pre></td></tr></table></figure><p>6、使用<span class='p blue'>-v</span>参数挂载数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v volume名称:容器内目录</span></span><br><span class="line">docker run \</span><br><span class="line"> --name mn \</span><br><span class="line"> -v html:/usr/share/nginx/html \ # 挂载数据卷到容器内的HTML目录</span><br><span class="line"> -p 80:80 \</span><br><span class="line"> -d \</span><br><span class="line"> nginx</span><br></pre></td></tr></table></figure><p>进入 html 数据卷所在位置，并修改 HTML 内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看html数据卷的位置</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入该目录</span></span><br><span class="line">cd /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改文件</span></span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure><p>7、使用<span class='p blue'>-v</span>参数挂载本地目录<br>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p><ul><li>带数据卷模式：宿主机目录 —&gt; 数据卷 —-&gt; 容器内目录</li><li>直接挂载模式：宿主机目录 —-&gt; 容器内目录<br><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210731175155453.png" alt="image-20210731175155453"></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v [宿主机目录]:[容器内目录]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v [宿主机文件]:[容器内文件]</span></span><br><span class="line">docker run \</span><br><span class="line"> --name mysql \</span><br><span class="line"> -e MYSQL_ROOT_PASSWORD=123456 # -e 配置环境变量 设置MySQL密码</span><br><span class="line"> -p 3306:3306 \</span><br><span class="line"> -v /ee/data:/var/lib/mysql # 挂载/ee/data目录到数据库的数据目录上</span><br><span class="line"> -v /ee/conf/hmy.cnf:/etc/mysql/conf.d # 挂载/ee/conf/hmy.cnf文件挂载到数据库的/etc/mysql/conf.d目录上</span><br><span class="line"> -d \</span><br><span class="line"> mysql</span><br></pre></td></tr></table></figure><h3 id="Dockerfile-自定义镜像"><a href="#Dockerfile-自定义镜像" class="headerlink" title="Dockerfile 自定义镜像"></a>Dockerfile 自定义镜像</h3><h4 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h4><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><p>我们以 MySQL 为例，来看看镜像的组成结构：</p><p><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210731175806273.png" alt="镜像结构"><br>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p><h4 id="Dockerfile-语法"><a href="#Dockerfile-语法" class="headerlink" title="Dockerfile 语法"></a>Dockerfile 语法</h4><p>1 什么是 Dockerfile<br>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。我们只需要告诉 Docker，我们的镜像的组成，需要哪些 BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来 Docker 会帮助我们构建镜像。而描述上述信息的文件就是 Dockerfile 文件。<br>Dockerfile 就是一个文本文件，其中包含一个个的指令(Instruction)，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层 Layer。<br><img src="https://blogcdn.dyfnb.xyz/img/post/image-20210731180321133.png" alt="Dockerfile"><br>官网文档：<a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><p>2、创建<span class='p blue'>Dockerfile</span>文件，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定基础镜像</span></span><br><span class="line">FROM ubuntu:16.04</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置环境变量，JDK的安装目录</span></span><br><span class="line">ENV JAVA_DIR=/usr/local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝jdk和java项目的包</span></span><br><span class="line">COPY ./jdk8.tar.gz $JAVA_DIR/</span><br><span class="line">COPY ./docker-demo.jar /tmp/app.jar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装JDK</span></span><br><span class="line">RUN cd $JAVA_DIR \</span><br><span class="line"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span><br><span class="line"> &amp;&amp; mv ./jdk1.8.0_144 ./java8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置环境变量</span></span><br><span class="line">ENV JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line">ENV PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暴露端口</span></span><br><span class="line">EXPOSE 8090</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">入口，java项目的启动命令</span></span><br><span class="line">ENTRYPOINT java -jar /tmp/app.jar</span><br></pre></td></tr></table></figure><p>使用 Dockerfile 构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker build -t 镜像名:镜像tag  Dockerfile所在的目录</span></span><br><span class="line">docker build -t javaweb:1.0 . # . 就是Dockerfile所在的目录（当前目录）</span><br></pre></td></tr></table></figure><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h3><h4 id="什么是-Docker-Compose"><a href="#什么是-Docker-Compose" class="headerlink" title="什么是 Docker Compose"></a>什么是 Docker Compose</h4><p><strong>Docker Compose</strong>可以基于 Compose 文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！Docker Compose 可以基于 Compose 文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p><h4 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h4><p>命令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令安装下载速度较慢</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>上传文件安装：<br>将下载好的<span class='p blue'>dcoker-compose</span>文件上传到<span class='p blue'>/usr/local/bin/</span>目录下<br>修改文件权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改权限为可执行文件</span></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>Base 自动补全命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure><p>如果这里出现错误，需要修改自己的 hosts 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;199.232.68.133 raw.githubusercontent.com&quot; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h4 id="创建文件，部署微服务项目，输入："><a href="#创建文件，部署微服务项目，输入：" class="headerlink" title="创建文件，部署微服务项目，输入："></a>创建<span class='p blue'>docker-compose.yml</span>文件，部署微服务项目，输入：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.2&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  nacos: # nacos作为注册中心和配置中心</span><br><span class="line">    image: nacos/nacos-server # 基于nacos/nacos-server镜像构建</span><br><span class="line">    environment: # 环境变量</span><br><span class="line">      MODE: standalone # 单点模式启动</span><br><span class="line">    ports: # 端口映射，这里暴露了8848端口</span><br><span class="line">      - &quot;8848:8848&quot;</span><br><span class="line">  mysql: # 数据库</span><br><span class="line">    image: mysql:5.7.25 # 基于mysql:5.7.25镜像构建</span><br><span class="line">    environment: # 环境变量</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 123 # 设置数据库密码</span><br><span class="line">    volumes: # 数据卷挂载，这里挂载了mysql的data、conf目录</span><br><span class="line">      - &quot;$PWD/mysql/data:/var/lib/mysql&quot;</span><br><span class="line">      - &quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span><br><span class="line">  userservice: # 基于Dockerfile构建的userservice服务</span><br><span class="line">    build: ./user-service</span><br><span class="line">  orderservice: # 基于Dockerfile构建的orderservice服务</span><br><span class="line">    build: ./order-service</span><br><span class="line">  gateway: # 基于Dockerfile构建的gateway服务</span><br><span class="line">    build: ./gateway</span><br><span class="line">    ports: # 暴露10010端口</span><br><span class="line">      - &quot;10010:10010&quot;</span><br></pre></td></tr></table></figure><h4 id="docker-compos-常用命令"><a href="#docker-compos-常用命令" class="headerlink" title="docker-compos 常用命令"></a>docker-compos 常用命令</h4><p>启动并运行所有的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-d 在后台运行服务容器,一般推荐生产环境下使用该选项</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--no-color 不使用颜色来区分不同的服务的控制台输出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--no-deps 不启动服务所链接的容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--force-recreate 强制重新创建容器，不能与--no-recreate 同时使用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--no-recreate 如果容器已经存在了，则不重新创建，不能与 --force-recreate 同时使用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--no-build 不自动构建缺失的服务镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t, --<span class="built_in">timeout</span> TIMEOUT 停止容器时候的超时（默认为 10 秒）</span></span><br><span class="line">docker-compose up [OPTIONS]</span><br></pre></td></tr></table></figure><p>停止用 up 命令所启动的容器并移除网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><p>查看服务容器的日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f：跟踪日志</span></span><br><span class="line">docker-compose logs [OPTIONS] [SERVICE...]</span><br></pre></td></tr></table></figure><p>重启项目中的服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure><p>停止已经处于运行状态的容器，但不删除它，通过 docker-compose start 可以再次启动这些容器，如果不指定 service 则默认停止所有的容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OPTIONS说明：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t, --<span class="built_in">timeout</span> TIMEOUT 停止容器时候的超时（默认为 10 秒）</span></span><br><span class="line">docker-compose stop [OPTIONS] [SERVICE...]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是-docker&quot;&gt;&lt;a href=&quot;#什么是-docker&quot; class=&quot;headerlink&quot; title=&quot;什么是 docker&quot;&gt;&lt;/a&gt;什么是 docker&lt;/h3&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，是虚拟化的一种轻量级替代技术。Doc</summary>
      
    
    
    
    <category term="笔记" scheme="https://blog.dyfnb.xyz/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="docker" scheme="https://blog.dyfnb.xyz/tags/docker/"/>
    
    <category term="linux" scheme="https://blog.dyfnb.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>hexo添加PWA支持</title>
    <link href="https://blog.dyfnb.xyz/posts/df72f53f.html"/>
    <id>https://blog.dyfnb.xyz/posts/df72f53f.html</id>
    <published>2022-12-01T08:17:04.000Z</published>
    <updated>2022-12-01T10:49:15.987Z</updated>
    
    <content type="html"><![CDATA[<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：<div class="tag link"><a class="link-card" title="Butterfly 主题的 PWA 实现方案" href="https://akilar.top/posts/8f31c3d0/"><div class="left"><img src="https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg"/></div><div class="right"><p class="text">Butterfly 主题的 PWA 实现方案</p><p class="url">https://akilar.top/posts/8f31c3d0/</p></div></a></div></h4><h4 id="安装必要插件"><a href="#安装必要插件" class="headerlink" title="安装必要插件"></a>安装必要插件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gulp-cli # 全局安装gulp命令集</span><br><span class="line">npm install workbox-build gulp --save # 安装workbox和gulp插件</span><br><span class="line"></span><br><span class="line"># 压缩html插件</span><br><span class="line">npm install gulp-htmlclean --save-dev</span><br><span class="line">npm install --save gulp-htmlmin</span><br><span class="line"># 压缩css插件</span><br><span class="line">npm install gulp-clean-css --save-dev</span><br><span class="line"># 压缩js插件</span><br><span class="line"># 使用terser压缩js</span><br><span class="line">npm install gulp-terser --save-dev</span><br><span class="line">npm install --save-dev gulp-babel @babel/core @babel/preset-env</span><br><span class="line"># 压缩图片插件</span><br><span class="line">npm install --save-dev gulp-imagemin</span><br><span class="line"># 压缩字体插件(font-min仅支持压缩ttf格式的字体包)</span><br><span class="line">npm install gulp-fontmin --save-dev</span><br></pre></td></tr></table></figure><h4 id="在-中添加以下代码"><a href="#在-中添加以下代码" class="headerlink" title="在  中添加以下代码"></a>在 <span class='p blue'>package.json</span> 中添加以下代码</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h4 id="创建"><a href="#创建" class="headerlink" title="创建 "></a>创建 <span class='p blue'>gulpfile.js</span></h4><p>在根目录下创建 <span class='p blue'>gulpfile.js</span> 文件，打开 <span class='p blue'>[Blogroot]/gulpfile.js</span>，输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gulp <span class="keyword">from</span> <span class="string">&quot;gulp&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> cleanCSS <span class="keyword">from</span> <span class="string">&quot;gulp-clean-css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> htmlmin <span class="keyword">from</span> <span class="string">&quot;gulp-htmlmin&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> htmlclean <span class="keyword">from</span> <span class="string">&quot;gulp-htmlclean&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> workbox <span class="keyword">from</span> <span class="string">&quot;workbox-build&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> fontmin <span class="keyword">from</span> <span class="string">&quot;gulp-fontmin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若使用terser压缩js</span></span><br><span class="line"><span class="keyword">import</span> terser <span class="keyword">from</span> <span class="string">&quot;gulp-terser&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pwa</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;generate-service-worker&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> workbox.<span class="title function_">injectManifest</span>(&#123;</span><br><span class="line">    <span class="attr">swSrc</span>: <span class="string">&quot;./sw-template.js&quot;</span>,</span><br><span class="line">    <span class="attr">swDest</span>: <span class="string">&quot;./public/sw.js&quot;</span>,</span><br><span class="line">    <span class="attr">globDirectory</span>: <span class="string">&quot;./public&quot;</span>,</span><br><span class="line">    <span class="attr">globPatterns</span>: [</span><br><span class="line">      <span class="comment">// 缓存所有以下类型的文件，极端不推荐</span></span><br><span class="line">      <span class="comment">// &quot;**/*.&#123;html,css,js,json,woff2,xml&#125;&quot;</span></span><br><span class="line">      <span class="comment">// 推荐只缓存404，主页和主要样式和脚本。</span></span><br><span class="line">      <span class="string">&quot;404.html&quot;</span>,</span><br><span class="line">      <span class="string">&quot;index.html&quot;</span>,</span><br><span class="line">      <span class="string">&quot;js/main.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;css/index.css&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">modifyURLPrefix</span>: &#123;</span><br><span class="line">      <span class="string">&quot;&quot;</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// minify js - gulp-tester</span></span><br><span class="line"><span class="comment">// 若使用terser压缩js</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;compress&quot;</span>, <span class="function">() =&gt;</span></span><br><span class="line">  gulp</span><br><span class="line">    .<span class="title function_">src</span>([</span><br><span class="line">      <span class="string">&quot;./public/**/*.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;!./public/**/*.min.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;!./public/js/custom/galmenu.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;!./public/js/custom/gitcalendar.js&quot;</span>,</span><br><span class="line">    ])</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">terser</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public&quot;</span>))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;minify-css&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&quot;./public/**/*.css&quot;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">cleanCSS</span>(&#123;</span><br><span class="line">        <span class="attr">compatibility</span>: <span class="string">&quot;ie11&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录内 html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;minify-html&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&quot;./public/**/*.html&quot;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">//清除 HTML 註释</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">//压缩 HTML</span></span><br><span class="line">        <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除 &lt;script&gt; 的 type=&quot;text/javascript&quot;</span></span><br><span class="line">        <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除 &lt;style&gt; 和 &lt;link&gt; 的 type=&quot;text/css&quot;</span></span><br><span class="line">        <span class="attr">minifyJS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 JS</span></span><br><span class="line">        <span class="attr">minifyCSS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 CSS</span></span><br><span class="line">        <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩字体</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">minifyFont</span>(<span class="params">text, cb</span>) &#123;</span><br><span class="line">  gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&quot;./public/fonts/*.ttf&quot;</span>) <span class="comment">//原字体所在目录</span></span><br><span class="line">    .<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">fontmin</span>(&#123;</span><br><span class="line">        <span class="attr">text</span>: text,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./public/fontsdest/&quot;</span>)) <span class="comment">//压缩后的输出目录</span></span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;mini-font&quot;</span>, <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> buffers = [];</span><br><span class="line">  gulp</span><br><span class="line">    .<span class="title function_">src</span>([<span class="string">&quot;./public/**/*.html&quot;</span>]) <span class="comment">//HTML文件所在目录请根据自身情况修改</span></span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="keyword">function</span> (<span class="params">file</span>) &#123;</span><br><span class="line">      buffers.<span class="title function_">push</span>(file.<span class="property">contents</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> text = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(buffers).<span class="title function_">toString</span>(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">      <span class="title function_">minifyFont</span>(text, cb);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(</span><br><span class="line">  <span class="string">&quot;default&quot;</span>,</span><br><span class="line">  gulp.<span class="title function_">series</span>(</span><br><span class="line">    <span class="string">&quot;generate-service-worker&quot;</span>,</span><br><span class="line">    gulp.<span class="title function_">parallel</span>(<span class="string">&quot;compress&quot;</span>, <span class="string">&quot;minify-html&quot;</span>, <span class="string">&quot;minify-css&quot;</span>, <span class="string">&quot;mini-font&quot;</span>)</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建 "></a>创建 <span class='p blue'>sw-template.js</span></h4><p>在根目录下创建一个<span class='p blue'>sw-template.js</span>文件,打开<span class='p blue'>[Blogroot]/sw-template.js</span>,输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处sw.js文件可自行去github上下载</span></span><br><span class="line">importScripts(</span><br><span class="line">  <span class="string">`https://storage.googleapis.com/workbox-cdn/releases/5.1.4/workbox-sw.js`</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">core</span>.<span class="title function_">setCacheNameDetails</span>(&#123;</span><br><span class="line">  <span class="attr">prefix</span>: <span class="string">&quot;忆语&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">core</span>.<span class="title function_">skipWaiting</span>();</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">core</span>.<span class="title function_">clientsClaim</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册成功后要立即缓存的资源列表</span></span><br><span class="line"><span class="comment">// 具体缓存列表在gulpfile.js中配置，见下文</span></span><br><span class="line">workbox.<span class="property">precaching</span>.<span class="title function_">precacheAndRoute</span>(self.<span class="property">__WB_MANIFEST</span>, &#123;</span><br><span class="line">  <span class="attr">directoryIndex</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空过期缓存</span></span><br><span class="line">workbox.<span class="property">precaching</span>.<span class="title function_">cleanupOutdatedCaches</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片资源（可选，不需要就注释掉）</span></span><br><span class="line"><span class="comment">// workbox.routing.registerRoute(</span></span><br><span class="line"><span class="comment">//   /\.(?:png|jpg|jpeg|gif|bmp|webp|svg|ico)$/,</span></span><br><span class="line"><span class="comment">//   new workbox.strategies.CacheFirst(&#123;</span></span><br><span class="line"><span class="comment">//     cacheName: &#x27;images&#x27;,</span></span><br><span class="line"><span class="comment">//     plugins: [</span></span><br><span class="line"><span class="comment">//       new workbox.expiration.ExpirationPlugin(&#123;</span></span><br><span class="line"><span class="comment">//         maxEntries: 1000,</span></span><br><span class="line"><span class="comment">//         maxAgeSeconds: 60 * 60 * 24 * 30,</span></span><br><span class="line"><span class="comment">//       &#125;),</span></span><br><span class="line"><span class="comment">//       new workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span></span><br><span class="line"><span class="comment">//         statuses: [0, 200],</span></span><br><span class="line"><span class="comment">//       &#125;),</span></span><br><span class="line"><span class="comment">//     ],</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字体文件（可选，不需要就注释掉）</span></span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">  <span class="regexp">/\.(?:eot|ttf|woff|woff2)$/</span>,</span><br><span class="line">  <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">CacheFirst</span>(&#123;</span><br><span class="line">    <span class="attr">cacheName</span>: <span class="string">&quot;fonts&quot;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> workbox.<span class="property">expiration</span>.<span class="title class_">ExpirationPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">maxEntries</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="attr">maxAgeSeconds</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> workbox.<span class="property">cacheableResponse</span>.<span class="title class_">CacheableResponsePlugin</span>(&#123;</span><br><span class="line">        <span class="attr">statuses</span>: [<span class="number">0</span>, <span class="number">200</span>],</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 谷歌字体（可选，不需要就注释掉）</span></span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">  <span class="regexp">/^https:\/\/fonts\.googleapis\.com/</span>,</span><br><span class="line">  <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">StaleWhileRevalidate</span>(&#123;</span><br><span class="line">    <span class="attr">cacheName</span>: <span class="string">&quot;google-fonts-stylesheets&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">  <span class="regexp">/^https:\/\/fonts\.gstatic\.com/</span>,</span><br><span class="line">  <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">CacheFirst</span>(&#123;</span><br><span class="line">    <span class="attr">cacheName</span>: <span class="string">&quot;google-fonts-webfonts&quot;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> workbox.<span class="property">expiration</span>.<span class="title class_">ExpirationPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">maxEntries</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="attr">maxAgeSeconds</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> workbox.<span class="property">cacheableResponse</span>.<span class="title class_">CacheableResponsePlugin</span>(&#123;</span><br><span class="line">        <span class="attr">statuses</span>: [<span class="number">0</span>, <span class="number">200</span>],</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsdelivr的CDN资源（可选，不需要就注释掉）</span></span><br><span class="line"><span class="comment">// workbox.routing.registerRoute(</span></span><br><span class="line"><span class="comment">//   /^https:\/\/cdn\.jsdelivr\.net/,</span></span><br><span class="line"><span class="comment">//   new workbox.strategies.CacheFirst(&#123;</span></span><br><span class="line"><span class="comment">//     cacheName: &#x27;static-libs&#x27;,</span></span><br><span class="line"><span class="comment">//     plugins: [</span></span><br><span class="line"><span class="comment">//       new workbox.expiration.ExpirationPlugin(&#123;</span></span><br><span class="line"><span class="comment">//         maxEntries: 1000,</span></span><br><span class="line"><span class="comment">//         maxAgeSeconds: 60 * 60 * 24 * 30,</span></span><br><span class="line"><span class="comment">//       &#125;),</span></span><br><span class="line"><span class="comment">//       new workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span></span><br><span class="line"><span class="comment">//         statuses: [0, 200],</span></span><br><span class="line"><span class="comment">//       &#125;),</span></span><br><span class="line"><span class="comment">//     ],</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"></span><br><span class="line">workbox.<span class="property">googleAnalytics</span>.<span class="title function_">initialize</span>();</span><br></pre></td></tr></table></figure><h4 id="创建-2"><a href="#创建-2" class="headerlink" title="创建"></a>创建<span class='p blue'>pwanotice.pug</span></h4><p>在<span class='p blue'>[Blogroot]\themes\butterfly\layout\includes\third-party\</span>目录下新建<span class='p blue'>pwanotice.pug</span>文件，打开<span class='p blue'>[Blogroot]\themes\butterfly\layout\includes\third-party\pwanotice.pug</span>,输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#app-refresh.<span class="property">app</span>-<span class="title function_">refresh</span>(style=<span class="string">&#x27;position: fixed;top: -2.2rem;left: 0;right: 0;z-index: 99999;padding: 0 1rem;font-size: 15px;height: 2.2rem;transition: all 0.3s ease;&#x27;</span>)</span><br><span class="line">  .<span class="property">app</span>-refresh-<span class="title function_">wrap</span>(style=<span class="string">&#x27; display: flex;color: #fff;height: 100%;align-items: center;justify-content: center;&#x27;</span>)</span><br><span class="line">    label ✨ 有新文章啦！ 👉</span><br><span class="line">    <span class="title function_">a</span>(href=<span class="string">&#x27;javascript:void(0)&#x27;</span> onclick=<span class="string">&#x27;location.reload()&#x27;</span>)</span><br><span class="line">      <span class="title function_">span</span>(style=<span class="string">&#x27;color: #fff;text-decoration: underline;cursor: pointer;&#x27;</span>) 🍗点击食用🍔</span><br><span class="line">script.</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.<span class="property">serviceWorker</span>.<span class="property">controller</span>) &#123;</span><br><span class="line">  navigator.<span class="property">serviceWorker</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;controllerchange&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">showNotification</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  navigator.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&#x27;/sw.js&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">showNotification</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> snackbarBg =</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;light&#x27;</span> ?</span><br><span class="line">  <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span>.<span class="property">bgLight</span> :</span><br><span class="line">  <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span>.<span class="property">bgDark</span></span><br><span class="line">  <span class="keyword">var</span> snackbarPos = <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span>.<span class="property">position</span></span><br><span class="line">  <span class="title class_">Snackbar</span>.<span class="title function_">show</span>(&#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&#x27;✨ 有新文章啦！ 👉&#x27;</span>,</span><br><span class="line">  <span class="attr">backgroundColor</span>: snackbarBg,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">500000</span>,</span><br><span class="line">  <span class="attr">pos</span>: snackbarPos,</span><br><span class="line">  <span class="attr">actionText</span>: <span class="string">&#x27;🍗点击食用🍔&#x27;</span>,</span><br><span class="line">  <span class="attr">actionTextColor</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">  <span class="attr">onActionClick</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  location.<span class="title function_">reload</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> showBg =</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;light&#x27;</span> ?</span><br><span class="line">  <span class="string">&#x27;#3b70fc&#x27;</span> :</span><br><span class="line">  <span class="string">&#x27;#1f1f1f&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> cssText = <span class="string">`top: 0; background: <span class="subst">$&#123;showBg&#125;</span>;`</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app-refresh&#x27;</span>).<span class="property">style</span>.<span class="property">cssText</span> = cssText</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改<span class='p blue'>additional-js.pug</span></h4><p>修改<span class='p blue'>[Blogroot]\themes\butterfly\layout\includes\additional-js.pug</span>,在文件底部添加以下内容，注意缩进。butterfly_v3.6.0 取消了缓存配置，转为完全默认，需要将<span class='p blue'>{cache:theme.fragment_cache}</span>改为<span class='p blue'>{cache: true}</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.<span class="property">pwa</span>.<span class="property">enable</span></span><br><span class="line">  !=<span class="title function_">partial</span>(<span class="string">&#x27;includes/third-party/pwanotice&#x27;</span>, &#123;&#125;, &#123;<span class="attr">cache</span>: <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="将图标包移入相应的目录"><a href="#将图标包移入相应的目录" class="headerlink" title="将图标包移入相应的目录"></a>将图标包移入相应的目录</h4><p>例如我是<span class='p blue'>/img/siteicon/</span>，所以放到<span class='p blue'>[Blogroot]/source/img/siteicon/</span>目录下。</p><h4 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建<span class='p blue'>manifest.json</span>文件</h4><p>在 <span class='p blue'>[Blogroot]/source</span>目录下新建<span class='p blue'>manifest.json</span>文件，此时还不能直接用，需要添加一些内容，以下是我的<span class='p blue'>manifest.json</span>配置内容，权且作为参考，其中的 <span class='p blue'>theme_color</span> 建议用取色器取设计的图标的主色调，同时务必配置 <span class='p blue'>start_url</span> 和 <span class='p blue'>name</span> 的配置项，这关系到你之后能否看到浏览器的应用安装按钮。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;忆语&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;忆语&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;theme_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#3b70fc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;background_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#3b70fc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standalone&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/16.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;16x16&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/32.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;32x32&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/48.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;48x48&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/64.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;64x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/128.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;128x128&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/144.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;144x144&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/512.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;512x512&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;splash_pages&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h4><p>打开主题配置文件<span class='p blue'>[Blogroot]/_config.butterfly.yml</span>,找到 PWA 配置项。添加图标路径。这里的 <span class='p blue'>theme_color</span> 建议改成你图标的主色调，包括 <span class='p blue'>manifest.json</span> 中的 <span class='p blue'>theme_color</span> 也是如此。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pwa:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">manifest:</span> <span class="string">/manifest.json</span></span><br><span class="line">  <span class="attr">theme_color:</span> <span class="string">&quot;#3b70fc&quot;</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/img/siteicon/128.png</span></span><br><span class="line">  <span class="attr">favicon_32_32:</span> <span class="string">/img/siteicon/32.png</span></span><br><span class="line">  <span class="attr">favicon_16_16:</span> <span class="string">/img/siteicon/16.png</span></span><br><span class="line">  <span class="attr">mask_icon:</span> <span class="string">/img/siteicon/128.png</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;参考：&quot;&gt;&lt;a href=&quot;#参考：&quot; class=&quot;headerlink&quot; title=&quot;参考：&quot;&gt;&lt;/a&gt;参考：&lt;div class=&quot;tag link&quot;&gt;&lt;a class=&quot;link-card&quot; title=&quot;Butterfly 主题的 PWA 实现方案&quot; </summary>
      
    
    
    
    <category term="前端" scheme="https://blog.dyfnb.xyz/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="hexo" scheme="https://blog.dyfnb.xyz/tags/hexo/"/>
    
    <category term="Butterfly" scheme="https://blog.dyfnb.xyz/tags/Butterfly/"/>
    
    <category term="pwa" scheme="https://blog.dyfnb.xyz/tags/pwa/"/>
    
  </entry>
  
</feed>
